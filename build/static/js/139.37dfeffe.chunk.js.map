{"version":3,"file":"static/js/139.37dfeffe.chunk.js","mappings":"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","sources":["../node_modules/.pnpm/js-sdsl@4.2.0/node_modules/js-sdsl/dist/esm/container/ContainerBase/container/ContainerBase/index.js","../node_modules/.pnpm/js-sdsl@4.2.0/node_modules/js-sdsl/dist/esm/src/container/ContainerBase/index.ts","../node_modules/.pnpm/js-sdsl@4.2.0/node_modules/js-sdsl/dist/src/utils/checkObject.ts","../node_modules/.pnpm/js-sdsl@4.2.0/node_modules/js-sdsl/dist/esm/utils/utils/checkObject.js","../node_modules/.pnpm/js-sdsl@4.2.0/node_modules/js-sdsl/dist/src/utils/throwError.ts","../node_modules/.pnpm/js-sdsl@4.2.0/node_modules/js-sdsl/dist/esm/utils/utils/throwError.js","../node_modules/.pnpm/js-sdsl@4.2.0/node_modules/js-sdsl/dist/esm/container/HashContainer/Base/container/HashContainer/Base/index.js","../node_modules/.pnpm/js-sdsl@4.2.0/node_modules/js-sdsl/dist/esm/container/src/container/HashContainer/Base/index.ts","../node_modules/.pnpm/js-sdsl@4.2.0/node_modules/js-sdsl/dist/esm/container/HashContainer/container/HashContainer/HashSet.js","../node_modules/.pnpm/js-sdsl@4.2.0/node_modules/js-sdsl/dist/esm/src/container/HashContainer/HashSet.ts","../node_modules/.pnpm/mnemonist@0.39.5/node_modules/mnemonist/bi-map.js","../node_modules/.pnpm/mnemonist@0.39.5/node_modules/mnemonist/bit-set.js","../node_modules/.pnpm/mnemonist@0.39.5/node_modules/mnemonist/bit-vector.js","../node_modules/.pnpm/mnemonist@0.39.5/node_modules/mnemonist/bk-tree.js","../node_modules/.pnpm/mnemonist@0.39.5/node_modules/mnemonist/bloom-filter.js","../node_modules/.pnpm/mnemonist@0.39.5/node_modules/mnemonist/circular-buffer.js","../node_modules/.pnpm/mnemonist@0.39.5/node_modules/mnemonist/default-map.js","../node_modules/.pnpm/mnemonist@0.39.5/node_modules/mnemonist/default-weak-map.js","../node_modules/.pnpm/mnemonist@0.39.5/node_modules/mnemonist/fibonacci-heap.js","../node_modules/.pnpm/mnemonist@0.39.5/node_modules/mnemonist/fixed-deque.js","../node_modules/.pnpm/mnemonist@0.39.5/node_modules/mnemonist/fixed-reverse-heap.js","../node_modules/.pnpm/mnemonist@0.39.5/node_modules/mnemonist/fixed-stack.js","../node_modules/.pnpm/mnemonist@0.39.5/node_modules/mnemonist/fuzzy-map.js","../node_modules/.pnpm/mnemonist@0.39.5/node_modules/mnemonist/fuzzy-multi-map.js","../node_modules/.pnpm/mnemonist@0.39.5/node_modules/mnemonist/hashed-array-tree.js","../node_modules/.pnpm/mnemonist@0.39.5/node_modules/mnemonist/heap.js","../node_modules/.pnpm/mnemonist@0.39.5/node_modules/mnemonist/index.js","../node_modules/.pnpm/mnemonist@0.39.5/node_modules/mnemonist/inverted-index.js","../node_modules/.pnpm/mnemonist@0.39.5/node_modules/mnemonist/kd-tree.js","../node_modules/.pnpm/mnemonist@0.39.5/node_modules/mnemonist/linked-list.js","../node_modules/.pnpm/mnemonist@0.39.5/node_modules/mnemonist/lru-cache-with-delete.js","../node_modules/.pnpm/mnemonist@0.39.5/node_modules/mnemonist/lru-cache.js","../node_modules/.pnpm/mnemonist@0.39.5/node_modules/mnemonist/lru-map-with-delete.js","../node_modules/.pnpm/mnemonist@0.39.5/node_modules/mnemonist/lru-map.js","../node_modules/.pnpm/mnemonist@0.39.5/node_modules/mnemonist/multi-map.js","../node_modules/.pnpm/mnemonist@0.39.5/node_modules/mnemonist/multi-set.js","../node_modules/.pnpm/mnemonist@0.39.5/node_modules/mnemonist/passjoin-index.js","../node_modules/.pnpm/mnemonist@0.39.5/node_modules/mnemonist/queue.js","../node_modules/.pnpm/mnemonist@0.39.5/node_modules/mnemonist/set.js","../node_modules/.pnpm/mnemonist@0.39.5/node_modules/mnemonist/sort/quick.js","../node_modules/.pnpm/mnemonist@0.39.5/node_modules/mnemonist/sparse-map.js","../node_modules/.pnpm/mnemonist@0.39.5/node_modules/mnemonist/sparse-queue-set.js","../node_modules/.pnpm/mnemonist@0.39.5/node_modules/mnemonist/sparse-set.js","../node_modules/.pnpm/mnemonist@0.39.5/node_modules/mnemonist/stack.js","../node_modules/.pnpm/mnemonist@0.39.5/node_modules/mnemonist/static-disjoint-set.js","../node_modules/.pnpm/mnemonist@0.39.5/node_modules/mnemonist/static-interval-tree.js","../node_modules/.pnpm/mnemonist@0.39.5/node_modules/mnemonist/suffix-array.js","../node_modules/.pnpm/mnemonist@0.39.5/node_modules/mnemonist/symspell.js","../node_modules/.pnpm/mnemonist@0.39.5/node_modules/mnemonist/trie-map.js","../node_modules/.pnpm/mnemonist@0.39.5/node_modules/mnemonist/trie.js","../node_modules/.pnpm/mnemonist@0.39.5/node_modules/mnemonist/utils/binary-search.js","../node_modules/.pnpm/mnemonist@0.39.5/node_modules/mnemonist/utils/bitwise.js","../node_modules/.pnpm/mnemonist@0.39.5/node_modules/mnemonist/utils/comparators.js","../node_modules/.pnpm/mnemonist@0.39.5/node_modules/mnemonist/utils/iterables.js","../node_modules/.pnpm/mnemonist@0.39.5/node_modules/mnemonist/utils/merge.js","../node_modules/.pnpm/mnemonist@0.39.5/node_modules/mnemonist/utils/murmurhash3.js","../node_modules/.pnpm/mnemonist@0.39.5/node_modules/mnemonist/utils/typed-arrays.js","../node_modules/.pnpm/mnemonist@0.39.5/node_modules/mnemonist/vector.js","../node_modules/.pnpm/mnemonist@0.39.5/node_modules/mnemonist/vp-tree.js","../node_modules/.pnpm/obliterator@2.0.4/node_modules/obliterator/foreach.js","../node_modules/.pnpm/obliterator@2.0.4/node_modules/obliterator/iterator.js","../node_modules/.pnpm/obliterator@2.0.4/node_modules/obliterator/support.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar ContainerIterator = /** @class */ (function () {\n    /**\n     * @internal\n     */\n    function ContainerIterator(iteratorType) {\n        if (iteratorType === void 0) { iteratorType = 0 /* IteratorType.NORMAL */; }\n        this.iteratorType = iteratorType;\n    }\n    /**\n     * @param iter - The other iterator you want to compare.\n     * @returns Whether this equals to obj.\n     * @example\n     * container.find(1).equals(container.end());\n     */\n    ContainerIterator.prototype.equals = function (iter) {\n        return this._node === iter._node;\n    };\n    return ContainerIterator;\n}());\nexport { ContainerIterator };\nvar Base = /** @class */ (function () {\n    function Base() {\n        /**\n         * @description Container's size.\n         * @internal\n         */\n        this._length = 0;\n    }\n    Object.defineProperty(Base.prototype, \"length\", {\n        /**\n         * @returns The size of the container.\n         * @example\n         * const container = new Vector([1, 2]);\n         * console.log(container.length); // 2\n         */\n        get: function () {\n            return this._length;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * @returns The size of the container.\n     * @example\n     * const container = new Vector([1, 2]);\n     * console.log(container.size()); // 2\n     */\n    Base.prototype.size = function () {\n        return this._length;\n    };\n    /**\n     * @returns Whether the container is empty.\n     * @example\n     * container.clear();\n     * console.log(container.empty());  // true\n     */\n    Base.prototype.empty = function () {\n        return this._length === 0;\n    };\n    return Base;\n}());\nexport { Base };\nvar Container = /** @class */ (function (_super) {\n    __extends(Container, _super);\n    function Container() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return Container;\n}(Base));\nexport { Container };\n","/**\n * @description The iterator type including `NORMAL` and `REVERSE`.\n */\nexport const enum IteratorType {\n  NORMAL = 0,\n  REVERSE = 1\n}\n\nexport abstract class ContainerIterator<T> {\n  /**\n   * @internal\n   */\n  abstract _node: unknown;\n  /**\n   * @description Iterator's type.\n   * @example\n   * console.log(container.end().iteratorType === IteratorType.NORMAL);  // true\n   */\n  readonly iteratorType: IteratorType;\n  /**\n   * @internal\n   */\n  protected constructor(iteratorType = IteratorType.NORMAL) {\n    this.iteratorType = iteratorType;\n  }\n  /**\n   * @param iter - The other iterator you want to compare.\n   * @returns Whether this equals to obj.\n   * @example\n   * container.find(1).equals(container.end());\n   */\n  equals(iter: ContainerIterator<T>) {\n    return this._node === iter._node;\n  }\n  /**\n   * @description Pointers to element.\n   * @returns The value of the pointer's element.\n   * @example\n   * const val = container.begin().pointer;\n   */\n  abstract get pointer(): T;\n  /**\n   * @description Set pointer's value (some containers are unavailable).\n   * @param newValue - The new value you want to set.\n   * @example\n   * (<LinkList<number>>container).begin().pointer = 1;\n   */\n  abstract set pointer(newValue: T);\n  /**\n   * @description Move `this` iterator to pre.\n   * @returns The iterator's self.\n   * @example\n   * const iter = container.find(1);  // container = [0, 1]\n   * const pre = iter.pre();\n   * console.log(pre === iter);  // true\n   * console.log(pre.equals(iter));  // true\n   * console.log(pre.pointer, iter.pointer); // 0, 0\n   */\n  abstract pre(): this;\n  /**\n   * @description Move `this` iterator to next.\n   * @returns The iterator's self.\n   * @example\n   * const iter = container.find(1);  // container = [1, 2]\n   * const next = iter.next();\n   * console.log(next === iter);  // true\n   * console.log(next.equals(iter));  // true\n   * console.log(next.pointer, iter.pointer); // 2, 2\n   */\n  abstract next(): this;\n  /**\n   * @description Get a copy of itself.\n   * @returns The copy of self.\n   * @example\n   * const iter = container.find(1);  // container = [1, 2]\n   * const next = iter.copy().next();\n   * console.log(next === iter);  // false\n   * console.log(next.equals(iter));  // false\n   * console.log(next.pointer, iter.pointer); // 2, 1\n   */\n  abstract copy(): ContainerIterator<T>;\n}\n\nexport abstract class Base {\n  /**\n   * @description Container's size.\n   * @internal\n   */\n  protected _length = 0;\n  /**\n   * @returns The size of the container.\n   * @example\n   * const container = new Vector([1, 2]);\n   * console.log(container.length); // 2\n   */\n  get length() {\n    return this._length;\n  }\n  /**\n   * @returns The size of the container.\n   * @example\n   * const container = new Vector([1, 2]);\n   * console.log(container.size()); // 2\n   */\n  size() {\n    return this._length;\n  }\n  /**\n   * @returns Whether the container is empty.\n   * @example\n   * container.clear();\n   * console.log(container.empty());  // true\n   */\n  empty() {\n    return this._length === 0;\n  }\n  /**\n   * @description Clear the container.\n   * @example\n   * container.clear();\n   * console.log(container.empty());  // true\n   */\n  abstract clear(): void;\n}\n\nexport abstract class Container<T> extends Base {\n  /**\n   * @returns Iterator pointing to the beginning element.\n   * @example\n   * const begin = container.begin();\n   * const end = container.end();\n   * for (const it = begin; !it.equals(end); it.next()) {\n   *   doSomething(it.pointer);\n   * }\n   */\n  abstract begin(): ContainerIterator<T>;\n  /**\n   * @returns Iterator pointing to the super end like c++.\n   * @example\n   * const begin = container.begin();\n   * const end = container.end();\n   * for (const it = begin; !it.equals(end); it.next()) {\n   *   doSomething(it.pointer);\n   * }\n   */\n  abstract end(): ContainerIterator<T>;\n  /**\n   * @returns Iterator pointing to the end element.\n   * @example\n   * const rBegin = container.rBegin();\n   * const rEnd = container.rEnd();\n   * for (const it = rBegin; !it.equals(rEnd); it.next()) {\n   *   doSomething(it.pointer);\n   * }\n   */\n  abstract rBegin(): ContainerIterator<T>;\n  /**\n   * @returns Iterator pointing to the super begin like c++.\n   * @example\n   * const rBegin = container.rBegin();\n   * const rEnd = container.rEnd();\n   * for (const it = rBegin; !it.equals(rEnd); it.next()) {\n   *   doSomething(it.pointer);\n   * }\n   */\n  abstract rEnd(): ContainerIterator<T>;\n  /**\n   * @returns The first element of the container.\n   */\n  abstract front(): T | undefined;\n  /**\n   * @returns The last element of the container.\n   */\n  abstract back(): T | undefined;\n  /**\n   * @param element - The element you want to find.\n   * @returns An iterator pointing to the element if found, or super end if not found.\n   * @example\n   * container.find(1).equals(container.end());\n   */\n  abstract find(element: T): ContainerIterator<T>;\n  /**\n   * @description Iterate over all elements in the container.\n   * @param callback - Callback function like Array.forEach.\n   * @example\n   * container.forEach((element, index) => console.log(element, index));\n   */\n  abstract forEach(callback: (element: T, index: number, container: Container<T>) => void): void;\n  /**\n   * @description Gets the value of the element at the specified position.\n   * @example\n   * const val = container.getElementByPos(-1); // throw a RangeError\n   */\n  abstract getElementByPos(pos: number): T;\n  /**\n   * @description Removes the element at the specified position.\n   * @param pos - The element's position you want to remove.\n   * @returns The container length after erasing.\n   * @example\n   * container.eraseElementByPos(-1); // throw a RangeError\n   */\n  abstract eraseElementByPos(pos: number): number;\n  /**\n   * @description Removes element by iterator and move `iter` to next.\n   * @param iter - The iterator you want to erase.\n   * @returns The next iterator.\n   * @example\n   * container.eraseElementByIterator(container.begin());\n   * container.eraseElementByIterator(container.end()); // throw a RangeError\n   */\n  abstract eraseElementByIterator(\n    iter: ContainerIterator<T>\n  ): ContainerIterator<T>;\n  /**\n   * @description Using for `for...of` syntax like Array.\n   * @example\n   * for (const element of container) {\n   *   console.log(element);\n   * }\n   */\n  abstract [Symbol.iterator](): Generator<T, void>;\n}\n\n/**\n * @description The initial data type passed in when initializing the container.\n */\nexport type initContainer<T> = (\n  { size: number } |\n  { length: number } |\n  { size(): number }\n  ) &\n  { forEach(callback: (element: T) => void): void; };\n","/**\n * @description Determine whether the type of key is `object`.\n * @param key - The key want to check.\n * @returns Whether the type of key is `object`.\n * @internal\n */\nexport default function checkObject<T>(key: T) {\n  const t = typeof key;\n  return (t === 'object' && key !== null) || t === 'function';\n}\n","/**\n * @description Determine whether the type of key is `object`.\n * @param key - The key want to check.\n * @returns Whether the type of key is `object`.\n * @internal\n */\nexport default function checkObject(key) {\n    var t = typeof key;\n    return (t === 'object' && key !== null) || t === 'function';\n}\n","/**\n * @description Throw an iterator access error.\n * @internal\n */\nexport function throwIteratorAccessError() {\n  throw new RangeError('Iterator access denied!');\n}\n","/**\n * @description Throw an iterator access error.\n * @internal\n */\nexport function throwIteratorAccessError() {\n    throw new RangeError('Iterator access denied!');\n}\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { Container, ContainerIterator } from \"../../ContainerBase\";\nimport checkObject from \"../../../utils/checkObject\";\nimport $checkWithinAccessParams from \"../../../utils/checkParams.macro\";\nimport { throwIteratorAccessError } from \"../../../utils/throwError\";\nvar HashContainerIterator = /** @class */ (function (_super) {\n    __extends(HashContainerIterator, _super);\n    /**\n     * @internal\n     */\n    function HashContainerIterator(node, header, iteratorType) {\n        var _this = _super.call(this, iteratorType) || this;\n        _this._node = node;\n        _this._header = header;\n        if (_this.iteratorType === 0 /* IteratorType.NORMAL */) {\n            _this.pre = function () {\n                if (this._node._pre === this._header) {\n                    throwIteratorAccessError();\n                }\n                this._node = this._node._pre;\n                return this;\n            };\n            _this.next = function () {\n                if (this._node === this._header) {\n                    throwIteratorAccessError();\n                }\n                this._node = this._node._next;\n                return this;\n            };\n        }\n        else {\n            _this.pre = function () {\n                if (this._node._next === this._header) {\n                    throwIteratorAccessError();\n                }\n                this._node = this._node._next;\n                return this;\n            };\n            _this.next = function () {\n                if (this._node === this._header) {\n                    throwIteratorAccessError();\n                }\n                this._node = this._node._pre;\n                return this;\n            };\n        }\n        return _this;\n    }\n    return HashContainerIterator;\n}(ContainerIterator));\nexport { HashContainerIterator };\nvar HashContainer = /** @class */ (function (_super) {\n    __extends(HashContainer, _super);\n    /**\n     * @internal\n     */\n    function HashContainer() {\n        var _this = _super.call(this) || this;\n        /**\n         * @internal\n         */\n        _this._objMap = [];\n        /**\n         * @internal\n         */\n        _this._originMap = {};\n        /**\n         * @description Unique symbol used to tag object.\n         */\n        _this.HASH_TAG = Symbol('@@HASH_TAG');\n        Object.setPrototypeOf(_this._originMap, null);\n        _this._header = {};\n        _this._header._pre = _this._header._next = _this._head = _this._tail = _this._header;\n        return _this;\n    }\n    /**\n     * @internal\n     */\n    HashContainer.prototype._eraseNode = function (node) {\n        var _pre = node._pre, _next = node._next;\n        _pre._next = _next;\n        _next._pre = _pre;\n        if (node === this._head) {\n            this._head = _next;\n        }\n        if (node === this._tail) {\n            this._tail = _pre;\n        }\n        this._length -= 1;\n    };\n    /**\n     * @internal\n     */\n    HashContainer.prototype._set = function (key, value, isObject) {\n        if (isObject === undefined)\n            isObject = checkObject(key);\n        var newTail;\n        if (isObject) {\n            var index = key[this.HASH_TAG];\n            if (index !== undefined) {\n                this._objMap[index]._value = value;\n                return this._length;\n            }\n            Object.defineProperty(key, this.HASH_TAG, {\n                value: this._objMap.length,\n                configurable: true\n            });\n            newTail = {\n                _key: key,\n                _value: value,\n                _pre: this._tail,\n                _next: this._header\n            };\n            this._objMap.push(newTail);\n        }\n        else {\n            var node = this._originMap[key];\n            if (node) {\n                node._value = value;\n                return this._length;\n            }\n            newTail = {\n                _key: key,\n                _value: value,\n                _pre: this._tail,\n                _next: this._header\n            };\n            this._originMap[key] = newTail;\n        }\n        if (this._length === 0) {\n            this._head = newTail;\n            this._header._next = newTail;\n        }\n        else {\n            this._tail._next = newTail;\n        }\n        this._tail = newTail;\n        this._header._pre = newTail;\n        return ++this._length;\n    };\n    /**\n     * @internal\n     */\n    HashContainer.prototype._findElementNode = function (key, isObject) {\n        if (isObject === undefined)\n            isObject = checkObject(key);\n        if (isObject) {\n            var index = key[this.HASH_TAG];\n            if (index === undefined)\n                return this._header;\n            return this._objMap[index];\n        }\n        else {\n            return this._originMap[key] || this._header;\n        }\n    };\n    HashContainer.prototype.clear = function () {\n        var HASH_TAG = this.HASH_TAG;\n        this._objMap.forEach(function (el) {\n            delete el._key[HASH_TAG];\n        });\n        this._objMap = [];\n        this._originMap = {};\n        Object.setPrototypeOf(this._originMap, null);\n        this._length = 0;\n        this._head = this._tail = this._header._pre = this._header._next = this._header;\n    };\n    /**\n     * @description Remove the element of the specified key.\n     * @param key - The key you want to remove.\n     * @param isObject - Tell us if the type of inserted key is `object` to improve efficiency.<br/>\n     *                   If a `undefined` value is passed in, the type will be automatically judged.\n     * @returns Whether erase successfully.\n     */\n    HashContainer.prototype.eraseElementByKey = function (key, isObject) {\n        var node;\n        if (isObject === undefined)\n            isObject = checkObject(key);\n        if (isObject) {\n            var index = key[this.HASH_TAG];\n            if (index === undefined)\n                return false;\n            delete key[this.HASH_TAG];\n            node = this._objMap[index];\n            delete this._objMap[index];\n        }\n        else {\n            node = this._originMap[key];\n            if (node === undefined)\n                return false;\n            delete this._originMap[key];\n        }\n        this._eraseNode(node);\n        return true;\n    };\n    HashContainer.prototype.eraseElementByIterator = function (iter) {\n        var node = iter._node;\n        if (node === this._header) {\n            throwIteratorAccessError();\n        }\n        this._eraseNode(node);\n        return iter.next();\n    };\n    HashContainer.prototype.eraseElementByPos = function (pos) {\n        if (pos < 0 || pos > this._length - 1) {\n            throw new RangeError();\n        }\n        var node = this._head;\n        while (pos--) {\n            node = node._next;\n        }\n        this._eraseNode(node);\n        return this._length;\n    };\n    return HashContainer;\n}(Container));\nexport { HashContainer };\n","import { Container, ContainerIterator, IteratorType } from '@/container/ContainerBase';\nimport checkObject from '@/utils/checkObject';\nimport $checkWithinAccessParams from '@/utils/checkParams.macro';\nimport { throwIteratorAccessError } from '@/utils/throwError';\n\n/**\n * @internal\n */\ntype HashLinkNode<K, V> = {\n  _key: K,\n  _value: V,\n  _pre: HashLinkNode<K, V>,\n  _next: HashLinkNode<K, V>\n}\n\nexport abstract class HashContainerIterator<K, V> extends ContainerIterator<K | [K, V]> {\n  /**\n   * @internal\n   */\n  _node: HashLinkNode<K, V>;\n  /**\n   * @internal\n   */\n  protected readonly _header: HashLinkNode<K, V>;\n  /**\n   * @internal\n   */\n  constructor(\n    node: HashLinkNode<K, V>,\n    header: HashLinkNode<K, V>,\n    iteratorType?: IteratorType\n  ) {\n    super(iteratorType);\n    this._node = node;\n    this._header = header;\n    if (this.iteratorType === IteratorType.NORMAL) {\n      this.pre = function () {\n        if (this._node._pre === this._header) {\n          throwIteratorAccessError();\n        }\n        this._node = this._node._pre;\n        return this;\n      };\n      this.next = function () {\n        if (this._node === this._header) {\n          throwIteratorAccessError();\n        }\n        this._node = this._node._next;\n        return this;\n      };\n    } else {\n      this.pre = function () {\n        if (this._node._next === this._header) {\n          throwIteratorAccessError();\n        }\n        this._node = this._node._next;\n        return this;\n      };\n      this.next = function () {\n        if (this._node === this._header) {\n          throwIteratorAccessError();\n        }\n        this._node = this._node._pre;\n        return this;\n      };\n    }\n  }\n  // @ts-ignore\n  pre(): this;\n  // @ts-ignore\n  next(): this;\n}\n\nexport abstract class HashContainer<K, V> extends Container<K | [K, V]> {\n  /**\n   * @internal\n   */\n  protected _objMap: HashLinkNode<K, V>[] = [];\n  /**\n   * @internal\n   */\n  protected _originMap: Record<string, HashLinkNode<K, V>> = {};\n  /**\n   * @internal\n   */\n  protected _head: HashLinkNode<K, V>;\n  /**\n   * @internal\n   */\n  protected _tail: HashLinkNode<K, V>;\n  /**\n   * @internal\n   */\n  protected readonly _header: HashLinkNode<K, V>;\n  /**\n   * @description Unique symbol used to tag object.\n   */\n  readonly HASH_TAG = Symbol('@@HASH_TAG');\n  /**\n   * @internal\n   */\n  protected constructor() {\n    super();\n    Object.setPrototypeOf(this._originMap, null);\n    this._header = <HashLinkNode<K, V>>{};\n    this._header._pre = this._header._next = this._head = this._tail = this._header;\n  }\n  /**\n   * @internal\n   */\n  protected _eraseNode(node: HashLinkNode<K, V>) {\n    const { _pre, _next } = node;\n    _pre._next = _next;\n    _next._pre = _pre;\n    if (node === this._head) {\n      this._head = _next;\n    }\n    if (node === this._tail) {\n      this._tail = _pre;\n    }\n    this._length -= 1;\n  }\n  /**\n   * @internal\n   */\n  protected _set(key: K, value?: V, isObject?: boolean) {\n    if (isObject === undefined) isObject = checkObject(key);\n    let newTail;\n    if (isObject) {\n      const index = (<Record<symbol, number>><unknown>key)[this.HASH_TAG];\n      if (index !== undefined) {\n        this._objMap[<number>index]._value = <V>value;\n        return this._length;\n      }\n      Object.defineProperty(key, this.HASH_TAG, {\n        value: this._objMap.length,\n        configurable: true\n      });\n      newTail = {\n        _key: key,\n        _value: <V>value,\n        _pre: this._tail,\n        _next: this._header\n      };\n      this._objMap.push(newTail);\n    } else {\n      const node = this._originMap[<string><unknown>key];\n      if (node) {\n        node._value = <V>value;\n        return this._length;\n      }\n      newTail = {\n        _key: key,\n        _value: <V>value,\n        _pre: this._tail,\n        _next: this._header\n      };\n      this._originMap[<string><unknown>key] = newTail;\n    }\n    if (this._length === 0) {\n      this._head = newTail;\n      this._header._next = newTail;\n    } else {\n      this._tail._next = newTail;\n    }\n    this._tail = newTail;\n    this._header._pre = newTail;\n    return ++this._length;\n  }\n  /**\n   * @internal\n   */\n  protected _findElementNode(key: K, isObject?: boolean) {\n    if (isObject === undefined) isObject = checkObject(key);\n    if (isObject) {\n      const index = (<Record<symbol, number>><unknown>key)[this.HASH_TAG];\n      if (index === undefined) return this._header;\n      return this._objMap[index];\n    } else {\n      return this._originMap[<string><unknown>key] || this._header;\n    }\n  }\n  clear() {\n    const HASH_TAG = this.HASH_TAG;\n    this._objMap.forEach(function (el) {\n      delete (<Record<symbol, number>><unknown>el._key)[HASH_TAG];\n    });\n    this._objMap = [];\n    this._originMap = {};\n    Object.setPrototypeOf(this._originMap, null);\n    this._length = 0;\n    this._head = this._tail = this._header._pre = this._header._next = this._header;\n  }\n  /**\n   * @description Remove the element of the specified key.\n   * @param key - The key you want to remove.\n   * @param isObject - Tell us if the type of inserted key is `object` to improve efficiency.<br/>\n   *                   If a `undefined` value is passed in, the type will be automatically judged.\n   * @returns Whether erase successfully.\n   */\n  eraseElementByKey(key: K, isObject?: boolean) {\n    let node;\n    if (isObject === undefined) isObject = checkObject(key);\n    if (isObject) {\n      const index = (<Record<symbol, number>><unknown>key)[this.HASH_TAG];\n      if (index === undefined) return false;\n      delete (<Record<symbol, number>><unknown>key)[this.HASH_TAG];\n      node = this._objMap[index];\n      delete this._objMap[index];\n    } else {\n      node = this._originMap[<string><unknown>key];\n      if (node === undefined) return false;\n      delete this._originMap[<string><unknown>key];\n    }\n    this._eraseNode(node);\n    return true;\n  }\n  eraseElementByIterator(iter: HashContainerIterator<K, V>) {\n    const node = iter._node;\n    if (node === this._header) {\n      throwIteratorAccessError();\n    }\n    this._eraseNode(node);\n    return iter.next();\n  }\n  eraseElementByPos(pos: number) {\n    $checkWithinAccessParams!(pos, 0, this._length - 1);\n    let node = this._head;\n    while (pos--) {\n      node = node._next;\n    }\n    this._eraseNode(node);\n    return this._length;\n  }\n}\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { HashContainer, HashContainerIterator } from \"./Base\";\nimport $checkWithinAccessParams from \"../../utils/checkParams.macro\";\nimport { throwIteratorAccessError } from \"../../utils/throwError\";\nvar HashSetIterator = /** @class */ (function (_super) {\n    __extends(HashSetIterator, _super);\n    function HashSetIterator() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Object.defineProperty(HashSetIterator.prototype, \"pointer\", {\n        get: function () {\n            if (this._node === this._header) {\n                throwIteratorAccessError();\n            }\n            return this._node._key;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    HashSetIterator.prototype.copy = function () {\n        return new HashSetIterator(this._node, this._header, this.iteratorType);\n    };\n    return HashSetIterator;\n}(HashContainerIterator));\nvar HashSet = /** @class */ (function (_super) {\n    __extends(HashSet, _super);\n    function HashSet(container) {\n        if (container === void 0) { container = []; }\n        var _this = _super.call(this) || this;\n        var self = _this;\n        container.forEach(function (el) {\n            self.insert(el);\n        });\n        return _this;\n    }\n    HashSet.prototype.begin = function () {\n        return new HashSetIterator(this._head, this._header);\n    };\n    HashSet.prototype.end = function () {\n        return new HashSetIterator(this._header, this._header);\n    };\n    HashSet.prototype.rBegin = function () {\n        return new HashSetIterator(this._tail, this._header, 1 /* IteratorType.REVERSE */);\n    };\n    HashSet.prototype.rEnd = function () {\n        return new HashSetIterator(this._header, this._header, 1 /* IteratorType.REVERSE */);\n    };\n    HashSet.prototype.front = function () {\n        return this._head._key;\n    };\n    HashSet.prototype.back = function () {\n        return this._tail._key;\n    };\n    /**\n     * @description Insert element to set.\n     * @param key - The key want to insert.\n     * @param isObject - Tell us if the type of inserted key is `object` to improve efficiency.<br/>\n     *                   If a `undefined` value is passed in, the type will be automatically judged.\n     * @returns The size of container after inserting.\n     */\n    HashSet.prototype.insert = function (key, isObject) {\n        return this._set(key, undefined, isObject);\n    };\n    HashSet.prototype.getElementByPos = function (pos) {\n        if (pos < 0 || pos > this._length - 1) {\n            throw new RangeError();\n        }\n        var node = this._head;\n        while (pos--) {\n            node = node._next;\n        }\n        return node._key;\n    };\n    /**\n     * @description Check key if exist in container.\n     * @param key - The element you want to search.\n     * @param isObject - Tell us if the type of inserted key is `object` to improve efficiency.<br/>\n     *                   If a `undefined` value is passed in, the type will be automatically judged.\n     * @returns An iterator pointing to the element if found, or super end if not found.\n     */\n    HashSet.prototype.find = function (key, isObject) {\n        var node = this._findElementNode(key, isObject);\n        return new HashSetIterator(node, this._header);\n    };\n    HashSet.prototype.forEach = function (callback) {\n        var index = 0;\n        var node = this._head;\n        while (node !== this._header) {\n            callback(node._key, index++, this);\n            node = node._next;\n        }\n    };\n    HashSet.prototype[Symbol.iterator] = function () {\n        return function () {\n            var node;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        node = this._head;\n                        _a.label = 1;\n                    case 1:\n                        if (!(node !== this._header)) return [3 /*break*/, 3];\n                        return [4 /*yield*/, node._key];\n                    case 2:\n                        _a.sent();\n                        node = node._next;\n                        return [3 /*break*/, 1];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        }.bind(this)();\n    };\n    return HashSet;\n}(HashContainer));\nexport default HashSet;\n","import { initContainer, IteratorType } from '@/container/ContainerBase';\nimport { HashContainer, HashContainerIterator } from '@/container/HashContainer/Base';\nimport $checkWithinAccessParams from '@/utils/checkParams.macro';\nimport { throwIteratorAccessError } from '@/utils/throwError';\n\nclass HashSetIterator<K, V> extends HashContainerIterator<K, V> {\n  get pointer() {\n    if (this._node === this._header) {\n      throwIteratorAccessError();\n    }\n    return this._node._key;\n  }\n  copy() {\n    return new HashSetIterator(this._node, this._header, this.iteratorType);\n  }\n  // @ts-ignore\n  equals(iter: HashSetIterator<K, V>): boolean;\n}\n\nexport type { HashSetIterator };\n\nclass HashSet<K> extends HashContainer<K, undefined> {\n  constructor(container: initContainer<K> = []) {\n    super();\n    const self = this;\n    container.forEach(function (el) {\n      self.insert(el);\n    });\n  }\n  begin() {\n    return new HashSetIterator(this._head, this._header);\n  }\n  end() {\n    return new HashSetIterator(this._header, this._header);\n  }\n  rBegin() {\n    return new HashSetIterator(this._tail, this._header, IteratorType.REVERSE);\n  }\n  rEnd() {\n    return new HashSetIterator(this._header, this._header, IteratorType.REVERSE);\n  }\n  front(): K | undefined {\n    return this._head._key;\n  }\n  back(): K | undefined {\n    return this._tail._key;\n  }\n  /**\n   * @description Insert element to set.\n   * @param key - The key want to insert.\n   * @param isObject - Tell us if the type of inserted key is `object` to improve efficiency.<br/>\n   *                   If a `undefined` value is passed in, the type will be automatically judged.\n   * @returns The size of container after inserting.\n   */\n  insert(key: K, isObject?: boolean) {\n    return this._set(key, undefined, isObject);\n  }\n  getElementByPos(pos: number) {\n    $checkWithinAccessParams!(pos, 0, this._length - 1);\n    let node = this._head;\n    while (pos--) {\n      node = node._next;\n    }\n    return node._key;\n  }\n  /**\n   * @description Check key if exist in container.\n   * @param key - The element you want to search.\n   * @param isObject - Tell us if the type of inserted key is `object` to improve efficiency.<br/>\n   *                   If a `undefined` value is passed in, the type will be automatically judged.\n   * @returns An iterator pointing to the element if found, or super end if not found.\n   */\n  find(key: K, isObject?: boolean) {\n    const node = this._findElementNode(key, isObject);\n    return new HashSetIterator(node, this._header);\n  }\n  forEach(callback: (element: K, index: number, container: HashSet<K>) => void) {\n    let index = 0;\n    let node = this._head;\n    while (node !== this._header) {\n      callback(node._key, index++, this);\n      node = node._next;\n    }\n  }\n  [Symbol.iterator]() {\n    return function * (this: HashSet<K>) {\n      let node = this._head;\n      while (node !== this._header) {\n        yield node._key;\n        node = node._next;\n      }\n    }.bind(this)();\n  }\n}\n\nexport default HashSet;\n","/**\n * Mnemonist BiMap\n * ================\n *\n * JavaScript implementation of a BiMap.\n */\nvar forEach = require('obliterator/foreach');\n\n/**\n * Inverse Map.\n *\n * @constructor\n */\nfunction InverseMap(original) {\n\n  this.size = 0;\n  this.items = new Map();\n  this.inverse = original;\n}\n\n/**\n * BiMap.\n *\n * @constructor\n */\nfunction BiMap() {\n\n  this.size = 0;\n  this.items = new Map();\n  this.inverse = new InverseMap(this);\n}\n\n/**\n * Method used to clear the map.\n *\n * @return {undefined}\n */\nfunction clear() {\n  this.size = 0;\n  this.items.clear();\n  this.inverse.items.clear();\n}\n\nBiMap.prototype.clear = clear;\nInverseMap.prototype.clear = clear;\n\n/**\n * Method used to set a relation.\n *\n * @param  {any} key - Key.\n * @param  {any} value - Value.\n * @return {BiMap|InverseMap}\n */\nfunction set(key, value) {\n\n  // First we need to attempt to see if the relation is not flawed\n  if (this.items.has(key)) {\n    var currentValue = this.items.get(key);\n\n    // The relation already exists, we do nothing\n    if (currentValue === value)\n      return this;\n    else\n      this.inverse.items.delete(currentValue);\n  }\n\n  if (this.inverse.items.has(value)) {\n    var currentKey = this.inverse.items.get(value);\n\n    if (currentKey === key)\n      return this;\n    else\n      this.items.delete(currentKey);\n  }\n\n  // Here we actually add the relation\n  this.items.set(key, value);\n  this.inverse.items.set(value, key);\n\n  // Size\n  this.size = this.items.size;\n  this.inverse.size = this.inverse.items.size;\n\n  return this;\n}\n\nBiMap.prototype.set = set;\nInverseMap.prototype.set = set;\n\n/**\n * Method used to delete a relation.\n *\n * @param  {any} key - Key.\n * @return {boolean}\n */\nfunction del(key) {\n  if (this.items.has(key)) {\n    var currentValue = this.items.get(key);\n\n    this.items.delete(key);\n    this.inverse.items.delete(currentValue);\n\n    // Size\n    this.size = this.items.size;\n    this.inverse.size = this.inverse.items.size;\n\n    return true;\n  }\n\n  return false;\n}\n\nBiMap.prototype.delete = del;\nInverseMap.prototype.delete = del;\n\n/**\n * Mapping some Map prototype function unto our two classes.\n */\nvar METHODS = ['has', 'get', 'forEach', 'keys', 'values', 'entries'];\n\nMETHODS.forEach(function(name) {\n  BiMap.prototype[name] = InverseMap.prototype[name] = function() {\n    return Map.prototype[name].apply(this.items, arguments);\n  };\n});\n\n/**\n * Attaching the #.values method to Symbol.iterator if possible.\n */\nif (typeof Symbol !== 'undefined') {\n  BiMap.prototype[Symbol.iterator] = BiMap.prototype.entries;\n  InverseMap.prototype[Symbol.iterator] = InverseMap.prototype.entries;\n}\n\n/**\n * Convenience known methods.\n */\nBiMap.prototype.inspect = function() {\n  var dummy = {\n    left: this.items,\n    right: this.inverse.items\n  };\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(dummy, 'constructor', {\n    value: BiMap,\n    enumerable: false\n  });\n\n  return dummy;\n};\n\nif (typeof Symbol !== 'undefined')\n  BiMap.prototype[Symbol.for('nodejs.util.inspect.custom')] = BiMap.prototype.inspect;\n\nInverseMap.prototype.inspect = function() {\n  var dummy = {\n    left: this.inverse.items,\n    right: this.items\n  };\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(dummy, 'constructor', {\n    value: InverseMap,\n    enumerable: false\n  });\n\n  return dummy;\n};\n\nif (typeof Symbol !== 'undefined')\n  InverseMap.prototype[Symbol.for('nodejs.util.inspect.custom')] = InverseMap.prototype.inspect;\n\n\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a bimap.\n *\n * @param  {Iterable} iterable - Target iterable.\n * @return {BiMap}\n */\nBiMap.from = function(iterable) {\n  var bimap = new BiMap();\n\n  forEach(iterable, function(value, key) {\n    bimap.set(key, value);\n  });\n\n  return bimap;\n};\n\n/**\n * Exporting.\n */\nmodule.exports = BiMap;\n","/**\n * Mnemonist BitSet\n * =================\n *\n * JavaScript implementation of a fixed-size BitSet based upon a Uint32Array.\n *\n * Notes:\n *   - (i >> 5) is the same as ((i / 32) | 0)\n *   - (i & 0x0000001f) is the same as (i % 32)\n *   - I could use a Float64Array to store more in less blocks but I would lose\n *     the benefits of byte comparison to keep track of size without popcounts.\n */\nvar Iterator = require('obliterator/iterator'),\n    bitwise = require('./utils/bitwise.js');\n\n/**\n * BitSet.\n *\n * @constructor\n */\nfunction BitSet(length) {\n\n  // Properties\n  this.length = length;\n  this.clear();\n\n  // Methods\n\n  // Statics\n}\n\n/**\n * Method used to clear the bit set.\n *\n * @return {undefined}\n */\nBitSet.prototype.clear = function() {\n\n  // Properties\n  this.size = 0;\n  this.array = new Uint32Array(Math.ceil(this.length / 32));\n};\n\n/**\n * Method used to set the given bit's value.\n *\n * @param  {number} index - Target bit index.\n * @param  {number} value - Value to set.\n * @return {BitSet}\n */\nBitSet.prototype.set = function(index, value) {\n  var byteIndex = index >> 5,\n      pos = index & 0x0000001f,\n      oldBytes = this.array[byteIndex],\n      newBytes;\n\n  if (value === 0 || value === false)\n    newBytes = this.array[byteIndex] &= ~(1 << pos);\n  else\n    newBytes = this.array[byteIndex] |= (1 << pos);\n\n  // The operands of all bitwise operators are converted to *signed* 32-bit integers.\n  // Source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Signed_32-bit_integers\n  // Shifting by 31 changes the sign (i.e. 1 << 31 = -2147483648).\n  // Therefore, get unsigned representation by applying '>>> 0'.\n  newBytes = newBytes >>> 0;\n\n  // Updating size\n  if (newBytes > oldBytes)\n    this.size++;\n  else if (newBytes < oldBytes)\n    this.size--;\n\n  return this;\n};\n\n/**\n* Method used to reset the given bit's value.\n*\n* @param  {number} index - Target bit index.\n* @return {BitSet}\n*/\nBitSet.prototype.reset = function(index) {\n  var byteIndex = index >> 5,\n      pos = index & 0x0000001f,\n      oldBytes = this.array[byteIndex],\n      newBytes;\n\n  newBytes = this.array[byteIndex] &= ~(1 << pos);\n\n  // Updating size\n  if (newBytes < oldBytes)\n    this.size--;\n\n  return this;\n};\n\n/**\n * Method used to flip the value of the given bit.\n *\n * @param  {number} index - Target bit index.\n * @return {BitSet}\n */\nBitSet.prototype.flip = function(index) {\n  var byteIndex = index >> 5,\n      pos = index & 0x0000001f,\n      oldBytes = this.array[byteIndex];\n\n  var newBytes = this.array[byteIndex] ^= (1 << pos);\n\n  // Get unsigned representation.\n  newBytes = newBytes >>> 0;\n\n  // Updating size\n  if (newBytes > oldBytes)\n    this.size++;\n  else if (newBytes < oldBytes)\n    this.size--;\n\n  return this;\n};\n\n/**\n * Method used to get the given bit's value.\n *\n * @param  {number} index - Target bit index.\n * @return {number}\n */\nBitSet.prototype.get = function(index) {\n  var byteIndex = index >> 5,\n      pos = index & 0x0000001f;\n\n  return (this.array[byteIndex] >> pos) & 1;\n};\n\n/**\n * Method used to test the given bit's value.\n *\n * @param  {number} index - Target bit index.\n * @return {BitSet}\n */\nBitSet.prototype.test = function(index) {\n  return Boolean(this.get(index));\n};\n\n/**\n * Method used to return the number of 1 from the beginning of the set up to\n * the ith index.\n *\n * @param  {number} i - Ith index (cannot be > length).\n * @return {number}\n */\nBitSet.prototype.rank = function(i) {\n  if (this.size === 0)\n    return 0;\n\n  var byteIndex = i >> 5,\n      pos = i & 0x0000001f,\n      r = 0;\n\n  // Accessing the bytes before the last one\n  for (var j = 0; j < byteIndex; j++)\n    r += bitwise.table8Popcount(this.array[j]);\n\n  // Handling masked last byte\n  var maskedByte = this.array[byteIndex] & ((1 << pos) - 1);\n\n  r += bitwise.table8Popcount(maskedByte);\n\n  return r;\n};\n\n/**\n * Method used to return the position of the rth 1 in the set or -1 if the\n * set is empty.\n *\n * Note: usually select is implemented using binary search over rank but I\n * tend to think the following linear implementation is faster since here\n * rank is O(n) anyway.\n *\n * @param  {number} r - Rth 1 to select (should be < length).\n * @return {number}\n */\nBitSet.prototype.select = function(r) {\n  if (this.size === 0)\n    return -1;\n\n  // TODO: throw?\n  if (r >= this.length)\n    return -1;\n\n  var byte,\n      b = 32,\n      p = 0,\n      c = 0;\n\n  for (var i = 0, l = this.array.length; i < l; i++) {\n    byte = this.array[i];\n\n    // The byte is empty, let's continue\n    if (byte === 0)\n      continue;\n\n    // TODO: This branching might not be useful here\n    if (i === l - 1)\n      b = this.length % 32 || 32;\n\n    // TODO: popcount should speed things up here\n\n    for (var j = 0; j < b; j++, p++) {\n      c += (byte >> j) & 1;\n\n      if (c === r)\n        return p;\n    }\n  }\n};\n\n/**\n * Method used to iterate over the bit set's values.\n *\n * @param  {function}  callback - Function to call for each item.\n * @param  {object}    scope    - Optional scope.\n * @return {undefined}\n */\nBitSet.prototype.forEach = function(callback, scope) {\n  scope = arguments.length > 1 ? scope : this;\n\n  var length = this.length,\n      byte,\n      bit,\n      b = 32;\n\n  for (var i = 0, l = this.array.length; i < l; i++) {\n    byte = this.array[i];\n\n    if (i === l - 1)\n      b = length % 32 || 32;\n\n    for (var j = 0; j < b; j++) {\n      bit = (byte >> j) & 1;\n\n      callback.call(scope, bit, i * 32 + j);\n    }\n  }\n};\n\n/**\n * Method used to create an iterator over a set's values.\n *\n * @return {Iterator}\n */\nBitSet.prototype.values = function() {\n  var length = this.length,\n      inner = false,\n      byte,\n      bit,\n      array = this.array,\n      l = array.length,\n      i = 0,\n      j = -1,\n      b = 32;\n\n  return new Iterator(function next() {\n    if (!inner) {\n\n      if (i >= l)\n        return {\n          done: true\n        };\n\n      if (i === l - 1)\n        b = length % 32 || 32;\n\n      byte = array[i++];\n      inner = true;\n      j = -1;\n    }\n\n    j++;\n\n    if (j >= b) {\n      inner = false;\n      return next();\n    }\n\n    bit = (byte >> j) & 1;\n\n    return {\n      value: bit\n    };\n  });\n};\n\n/**\n * Method used to create an iterator over a set's entries.\n *\n * @return {Iterator}\n */\nBitSet.prototype.entries = function() {\n  var length = this.length,\n      inner = false,\n      byte,\n      bit,\n      array = this.array,\n      index,\n      l = array.length,\n      i = 0,\n      j = -1,\n      b = 32;\n\n  return new Iterator(function next() {\n    if (!inner) {\n\n      if (i >= l)\n        return {\n          done: true\n        };\n\n      if (i === l - 1)\n        b = length % 32 || 32;\n\n      byte = array[i++];\n      inner = true;\n      j = -1;\n    }\n\n    j++;\n    index = (~-i) * 32 + j;\n\n    if (j >= b) {\n      inner = false;\n      return next();\n    }\n\n    bit = (byte >> j) & 1;\n\n    return {\n      value: [index, bit]\n    };\n  });\n};\n\n/**\n * Attaching the #.values method to Symbol.iterator if possible.\n */\nif (typeof Symbol !== 'undefined')\n  BitSet.prototype[Symbol.iterator] = BitSet.prototype.values;\n\n/**\n * Convenience known methods.\n */\nBitSet.prototype.inspect = function() {\n  var proxy = new Uint8Array(this.length);\n\n  this.forEach(function(bit, i) {\n    proxy[i] = bit;\n  });\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(proxy, 'constructor', {\n    value: BitSet,\n    enumerable: false\n  });\n\n  return proxy;\n};\n\nif (typeof Symbol !== 'undefined')\n  BitSet.prototype[Symbol.for('nodejs.util.inspect.custom')] = BitSet.prototype.inspect;\n\nBitSet.prototype.toJSON = function() {\n  return Array.from(this.array);\n};\n\n/**\n * Exporting.\n */\nmodule.exports = BitSet;\n","/**\n * Mnemonist BitVector\n * ====================\n *\n * JavaScript implementation of a dynamic BitSet based upon a Uint32Array.\n *\n * Notes:\n *   - (i >> 5) is the same as ((i / 32) | 0)\n *   - (i & 0x0000001f) is the same as (i % 32)\n *   - I could use a Float64Array to store more in less blocks but I would lose\n *     the benefits of byte comparison to keep track of size without popcounts.\n */\nvar Iterator = require('obliterator/iterator'),\n    bitwise = require('./utils/bitwise.js');\n\n/**\n * Constants.\n */\nvar DEFAULT_GROWING_POLICY = function(capacity) {\n  return Math.max(1, Math.ceil(capacity * 1.5));\n};\n\n/**\n * Helpers.\n */\nfunction createByteArray(capacity) {\n  return new Uint32Array(Math.ceil(capacity / 32));\n}\n\n/**\n * BitVector.\n *\n * @constructor\n */\nfunction BitVector(initialLengthOrOptions) {\n  var initialLength = initialLengthOrOptions || 0,\n      policy = DEFAULT_GROWING_POLICY;\n\n  if (typeof initialLengthOrOptions === 'object') {\n    initialLength = (\n      initialLengthOrOptions.initialLength ||\n      initialLengthOrOptions.initialCapacity ||\n      0\n    );\n    policy = initialLengthOrOptions.policy || policy;\n  }\n\n  this.size = 0;\n  this.length = initialLength;\n  this.capacity = Math.ceil(this.length / 32) * 32;\n  this.policy = policy;\n  this.array = createByteArray(this.capacity);\n}\n\n/**\n * Method used to set the given bit's value.\n *\n * @param  {number} index - Target bit index.\n * @param  {number|boolean} value - Value to set.\n * @return {BitVector}\n */\nBitVector.prototype.set = function(index, value) {\n\n  // Out of bounds?\n  if (this.length < index)\n    throw new Error('BitVector.set: index out of bounds.');\n\n  var byteIndex = index >> 5,\n      pos = index & 0x0000001f,\n      oldBytes = this.array[byteIndex],\n      newBytes;\n\n  if (value === 0 || value === false)\n    newBytes = this.array[byteIndex] &= ~(1 << pos);\n  else\n    newBytes = this.array[byteIndex] |= (1 << pos);\n\n  // Get unsigned representation.\n  newBytes = newBytes >>> 0;\n\n  // Updating size\n  if (newBytes > oldBytes)\n    this.size++;\n  else if (newBytes < oldBytes)\n    this.size--;\n\n  return this;\n};\n\n/**\n* Method used to reset the given bit's value.\n*\n* @param  {number} index - Target bit index.\n* @return {BitVector}\n*/\nBitVector.prototype.reset = function(index) {\n  var byteIndex = index >> 5,\n      pos = index & 0x0000001f,\n      oldBytes = this.array[byteIndex],\n      newBytes;\n\n  newBytes = this.array[byteIndex] &= ~(1 << pos);\n\n  // Updating size\n  if (newBytes < oldBytes)\n    this.size--;\n\n  return this;\n};\n\n/**\n * Method used to flip the value of the given bit.\n *\n * @param  {number} index - Target bit index.\n * @return {BitVector}\n */\nBitVector.prototype.flip = function(index) {\n  var byteIndex = index >> 5,\n      pos = index & 0x0000001f,\n      oldBytes = this.array[byteIndex];\n\n  var newBytes = this.array[byteIndex] ^= (1 << pos);\n\n  // Get unsigned representation.\n  newBytes = newBytes >>> 0;\n\n  // Updating size\n  if (newBytes > oldBytes)\n    this.size++;\n  else if (newBytes < oldBytes)\n    this.size--;\n\n  return this;\n};\n\n/**\n * Method used to apply the growing policy.\n *\n * @param  {number} [override] - Override capacity.\n * @return {number}\n */\nBitVector.prototype.applyPolicy = function(override) {\n  var newCapacity = this.policy(override || this.capacity);\n\n  if (typeof newCapacity !== 'number' || newCapacity < 0)\n    throw new Error('mnemonist/bit-vector.applyPolicy: policy returned an invalid value (expecting a positive integer).');\n\n  if (newCapacity <= this.capacity)\n    throw new Error('mnemonist/bit-vector.applyPolicy: policy returned a less or equal capacity to allocate.');\n\n  // TODO: we should probably check that the returned number is an integer\n\n  // Ceil to nearest 32\n  return Math.ceil(newCapacity / 32) * 32;\n};\n\n/**\n * Method used to reallocate the underlying array.\n *\n * @param  {number}       capacity - Target capacity.\n * @return {BitVector}\n */\nBitVector.prototype.reallocate = function(capacity) {\n  var virtualCapacity = capacity;\n\n  capacity = Math.ceil(capacity / 32) * 32;\n\n  if (virtualCapacity < this.length)\n    this.length = virtualCapacity;\n\n  if (capacity === this.capacity)\n    return this;\n\n  var oldArray = this.array;\n\n  var storageLength = capacity / 32;\n\n  if (storageLength === this.array.length)\n    return this;\n\n  if (storageLength > this.array.length) {\n    this.array = new Uint32Array(storageLength);\n    this.array.set(oldArray, 0);\n  }\n  else {\n    this.array = oldArray.slice(0, storageLength);\n  }\n\n  this.capacity = capacity;\n\n  return this;\n};\n\n/**\n * Method used to grow the array.\n *\n * @param  {number}       [capacity] - Optional capacity to match.\n * @return {BitVector}\n */\nBitVector.prototype.grow = function(capacity) {\n  var newCapacity;\n\n  if (typeof capacity === 'number') {\n\n    if (this.capacity >= capacity)\n      return this;\n\n    // We need to match the given capacity\n    newCapacity = this.capacity;\n\n    while (newCapacity < capacity)\n      newCapacity = this.applyPolicy(newCapacity);\n\n    this.reallocate(newCapacity);\n\n    return this;\n  }\n\n  // We need to run the policy once\n  newCapacity = this.applyPolicy();\n  this.reallocate(newCapacity);\n\n  return this;\n};\n\n/**\n * Method used to resize the array. Won't deallocate.\n *\n * @param  {number}       length - Target length.\n * @return {BitVector}\n */\nBitVector.prototype.resize = function(length) {\n  if (length === this.length)\n    return this;\n\n  if (length < this.length) {\n    this.length = length;\n    return this;\n  }\n\n  this.length = length;\n  this.reallocate(length);\n\n  return this;\n};\n\n/**\n * Method used to push a value in the set.\n *\n * @param  {number|boolean} value\n * @return {BitVector}\n */\nBitVector.prototype.push = function(value) {\n  if (this.capacity === this.length)\n    this.grow();\n\n  if (value === 0 || value === false)\n    return ++this.length;\n\n  this.size++;\n\n  var index = this.length++,\n      byteIndex = index >> 5,\n      pos = index & 0x0000001f;\n\n  this.array[byteIndex] |= (1 << pos);\n\n  return this.length;\n};\n\n/**\n * Method used to pop the last value of the set.\n *\n * @return {number} - The popped value.\n */\nBitVector.prototype.pop = function() {\n  if (this.length === 0)\n    return;\n\n  var index = --this.length;\n\n  var byteIndex = index >> 5,\n      pos = index & 0x0000001f;\n\n  return (this.array[byteIndex] >> pos) & 1;\n};\n\n/**\n * Method used to get the given bit's value.\n *\n * @param  {number} index - Target bit index.\n * @return {number}\n */\nBitVector.prototype.get = function(index) {\n  if (this.length < index)\n    return undefined;\n\n  var byteIndex = index >> 5,\n      pos = index & 0x0000001f;\n\n  return (this.array[byteIndex] >> pos) & 1;\n};\n\n/**\n * Method used to test the given bit's value.\n *\n * @param  {number} index - Target bit index.\n * @return {BitVector}\n */\nBitVector.prototype.test = function(index) {\n  if (this.length < index)\n    return false;\n\n  return Boolean(this.get(index));\n};\n\n/**\n * Method used to return the number of 1 from the beginning of the set up to\n * the ith index.\n *\n * @param  {number} i - Ith index (cannot be > length).\n * @return {number}\n */\nBitVector.prototype.rank = function(i) {\n  if (this.size === 0)\n    return 0;\n\n  var byteIndex = i >> 5,\n      pos = i & 0x0000001f,\n      r = 0;\n\n  // Accessing the bytes before the last one\n  for (var j = 0; j < byteIndex; j++)\n    r += bitwise.table8Popcount(this.array[j]);\n\n  // Handling masked last byte\n  var maskedByte = this.array[byteIndex] & ((1 << pos) - 1);\n\n  r += bitwise.table8Popcount(maskedByte);\n\n  return r;\n};\n\n/**\n * Method used to return the position of the rth 1 in the set or -1 if the\n * set is empty.\n *\n * Note: usually select is implemented using binary search over rank but I\n * tend to think the following linear implementation is faster since here\n * rank is O(n) anyway.\n *\n * @param  {number} r - Rth 1 to select (should be < length).\n * @return {number}\n */\nBitVector.prototype.select = function(r) {\n  if (this.size === 0)\n    return -1;\n\n  // TODO: throw?\n  if (r >= this.length)\n    return -1;\n\n  var byte,\n      b = 32,\n      p = 0,\n      c = 0;\n\n  for (var i = 0, l = this.array.length; i < l; i++) {\n    byte = this.array[i];\n\n    // The byte is empty, let's continue\n    if (byte === 0)\n      continue;\n\n    // TODO: This branching might not be useful here\n    if (i === l - 1)\n      b = this.length % 32 || 32;\n\n    // TODO: popcount should speed things up here\n\n    for (var j = 0; j < b; j++, p++) {\n      c += (byte >> j) & 1;\n\n      if (c === r)\n        return p;\n    }\n  }\n};\n\n/**\n * Method used to iterate over the bit set's values.\n *\n * @param  {function}  callback - Function to call for each item.\n * @param  {object}    scope    - Optional scope.\n * @return {undefined}\n */\nBitVector.prototype.forEach = function(callback, scope) {\n  scope = arguments.length > 1 ? scope : this;\n\n  var length = this.length,\n      byte,\n      bit,\n      b = 32;\n\n  for (var i = 0, l = this.array.length; i < l; i++) {\n    byte = this.array[i];\n\n    if (i === l - 1)\n      b = length % 32 || 32;\n\n    for (var j = 0; j < b; j++) {\n      bit = (byte >> j) & 1;\n\n      callback.call(scope, bit, i * 32 + j);\n    }\n  }\n};\n\n/**\n * Method used to create an iterator over a set's values.\n *\n * @return {Iterator}\n */\nBitVector.prototype.values = function() {\n  var length = this.length,\n      inner = false,\n      byte,\n      bit,\n      array = this.array,\n      l = array.length,\n      i = 0,\n      j = -1,\n      b = 32;\n\n  return new Iterator(function next() {\n    if (!inner) {\n\n      if (i >= l)\n        return {\n          done: true\n        };\n\n      if (i === l - 1)\n        b = length % 32 || 32;\n\n      byte = array[i++];\n      inner = true;\n      j = -1;\n    }\n\n    j++;\n\n    if (j >= b) {\n      inner = false;\n      return next();\n    }\n\n    bit = (byte >> j) & 1;\n\n    return {\n      value: bit\n    };\n  });\n};\n\n/**\n * Method used to create an iterator over a set's entries.\n *\n * @return {Iterator}\n */\nBitVector.prototype.entries = function() {\n  var length = this.length,\n      inner = false,\n      byte,\n      bit,\n      array = this.array,\n      index,\n      l = array.length,\n      i = 0,\n      j = -1,\n      b = 32;\n\n  return new Iterator(function next() {\n    if (!inner) {\n\n      if (i >= l)\n        return {\n          done: true\n        };\n\n      if (i === l - 1)\n        b = length % 32 || 32;\n\n      byte = array[i++];\n      inner = true;\n      j = -1;\n    }\n\n    j++;\n    index = (~-i) * 32 + j;\n\n    if (j >= b) {\n      inner = false;\n      return next();\n    }\n\n    bit = (byte >> j) & 1;\n\n    return {\n      value: [index, bit]\n    };\n  });\n};\n\n/**\n * Attaching the #.values method to Symbol.iterator if possible.\n */\nif (typeof Symbol !== 'undefined')\n  BitVector.prototype[Symbol.iterator] = BitVector.prototype.values;\n\n/**\n * Convenience known methods.\n */\nBitVector.prototype.inspect = function() {\n  var proxy = new Uint8Array(this.length);\n\n  this.forEach(function(bit, i) {\n    proxy[i] = bit;\n  });\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(proxy, 'constructor', {\n    value: BitVector,\n    enumerable: false\n  });\n\n  return proxy;\n};\n\nif (typeof Symbol !== 'undefined')\n  BitVector.prototype[Symbol.for('nodejs.util.inspect.custom')] = BitVector.prototype.inspect;\n\nBitVector.prototype.toJSON = function() {\n  return Array.from(this.array.slice(0, (this.length >> 5) + 1));\n};\n\n/**\n * Exporting.\n */\nmodule.exports = BitVector;\n","/* eslint no-constant-condition: 0 */\n/**\n * Mnemonist BK Tree\n * ==================\n *\n * Implementation of a Burkhard-Keller tree, allowing fast lookups of words\n * that lie within a specified distance of the query word.\n *\n * [Reference]:\n * https://en.wikipedia.org/wiki/BK-tree\n *\n * [Article]:\n * W. Burkhard and R. Keller. Some approaches to best-match file searching,\n * CACM, 1973\n */\nvar forEach = require('obliterator/foreach');\n\n/**\n * BK Tree.\n *\n * @constructor\n * @param {function} distance - Distance function to use.\n */\nfunction BKTree(distance) {\n\n  if (typeof distance !== 'function')\n    throw new Error('mnemonist/BKTree.constructor: given `distance` should be a function.');\n\n  this.distance = distance;\n  this.clear();\n}\n\n/**\n * Method used to add an item to the tree.\n *\n * @param  {any} item - Item to add.\n * @return {BKTree}\n */\nBKTree.prototype.add = function(item) {\n\n  // Initializing the tree with the first given word\n  if (!this.root) {\n    this.root = {\n      item: item,\n      children: {}\n    };\n\n    this.size++;\n    return this;\n  }\n\n  var node = this.root,\n      d;\n\n  while (true) {\n    d = this.distance(item, node.item);\n\n    if (!node.children[d])\n      break;\n\n    node = node.children[d];\n  }\n\n  node.children[d] = {\n    item: item,\n    children: {}\n  };\n\n  this.size++;\n  return this;\n};\n\n/**\n * Method used to query the tree.\n *\n * @param  {number} n     - Maximum distance between query & item.\n * @param  {any}    query - Query\n * @return {BKTree}\n */\nBKTree.prototype.search = function(n, query) {\n  if (!this.root)\n    return [];\n\n  var found = [],\n      stack = [this.root],\n      node,\n      child,\n      d,\n      i,\n      l;\n\n  while (stack.length) {\n    node = stack.pop();\n    d = this.distance(query, node.item);\n\n    if (d <= n)\n      found.push({item: node.item, distance: d});\n\n    for (i = d - n, l = d + n + 1; i < l; i++) {\n      child = node.children[i];\n\n      if (child)\n        stack.push(child);\n    }\n  }\n\n  return found;\n};\n\n/**\n * Method used to clear the tree.\n *\n * @return {undefined}\n */\nBKTree.prototype.clear = function() {\n\n  // Properties\n  this.size = 0;\n  this.root = null;\n};\n\n/**\n * Convenience known methods.\n */\nBKTree.prototype.toJSON = function() {\n  return this.root;\n};\n\nBKTree.prototype.inspect = function() {\n  var array = [],\n      stack = [this.root],\n      node,\n      d;\n\n  while (stack.length) {\n    node = stack.pop();\n\n    if (!node)\n      continue;\n\n    array.push(node.item);\n\n    for (d in node.children)\n      stack.push(node.children[d]);\n  }\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(array, 'constructor', {\n    value: BKTree,\n    enumerable: false\n  });\n\n  return array;\n};\n\nif (typeof Symbol !== 'undefined')\n  BKTree.prototype[Symbol.for('nodejs.util.inspect.custom')] = BKTree.prototype.inspect;\n\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a tree.\n *\n * @param  {Iterable} iterable - Target iterable.\n * @param  {function} distance - Distance function.\n * @return {Heap}\n */\nBKTree.from = function(iterable, distance) {\n  var tree = new BKTree(distance);\n\n  forEach(iterable, function(value) {\n    tree.add(value);\n  });\n\n  return tree;\n};\n\n/**\n * Exporting.\n */\nmodule.exports = BKTree;\n","/**\n * Mnemonist Bloom Filter\n * =======================\n *\n * Bloom Filter implementation relying on MurmurHash3.\n */\nvar murmurhash3 = require('./utils/murmurhash3.js'),\n    forEach = require('obliterator/foreach');\n\n/**\n * Constants.\n */\nvar LN2_SQUARED = Math.LN2 * Math.LN2;\n\n/**\n * Defaults.\n */\nvar DEFAULTS = {\n  errorRate: 0.005\n};\n\n/**\n * Function used to convert a string into a Uint16 byte array.\n *\n * @param  {string}      string - Target string.\n * @return {Uint16Array}\n */\nfunction stringToByteArray(string) {\n  var array = new Uint16Array(string.length),\n      i,\n      l;\n\n  for (i = 0, l = string.length; i < l; i++)\n    array[i] = string.charCodeAt(i);\n\n  return array;\n}\n\n/**\n * Function used to hash the given byte array.\n *\n * @param  {number}      length - Length of the filter's byte array.\n * @param  {number}      seed   - Seed to use for the hash function.\n * @param  {Uint16Array}        - Byte array representing the string.\n * @return {number}             - The hash.\n *\n * @note length * 8 should probably already be computed as well as seeds.\n */\nfunction hashArray(length, seed, array) {\n  var hash = murmurhash3((seed * 0xFBA4C795) & 0xFFFFFFFF, array);\n\n  return hash % (length * 8);\n}\n\n/**\n * Bloom Filter.\n *\n * @constructor\n * @param {number|object} capacityOrOptions - Capacity or options.\n */\nfunction BloomFilter(capacityOrOptions) {\n  var options = {};\n\n  if (!capacityOrOptions)\n    throw new Error('mnemonist/BloomFilter.constructor: a BloomFilter must be created with a capacity.');\n\n  if (typeof capacityOrOptions === 'object')\n    options = capacityOrOptions;\n  else\n    options.capacity = capacityOrOptions;\n\n  // Handling capacity\n  if (typeof options.capacity !== 'number' || options.capacity <= 0)\n    throw new Error('mnemonist/BloomFilter.constructor: `capacity` option should be a positive integer.');\n\n  this.capacity = options.capacity;\n\n  // Handling error rate\n  this.errorRate = options.errorRate || DEFAULTS.errorRate;\n\n  if (typeof this.errorRate !== 'number' || options.errorRate <= 0)\n    throw new Error('mnemonist/BloomFilter.constructor: `errorRate` option should be a positive float.');\n\n  this.clear();\n}\n\n/**\n * Method used to clear the filter.\n *\n * @return {undefined}\n */\nBloomFilter.prototype.clear = function() {\n\n  // Optimizing number of bits & number of hash functions\n  var bits = -1 / LN2_SQUARED * this.capacity * Math.log(this.errorRate),\n      length = (bits / 8) | 0;\n\n  this.hashFunctions = (length * 8 / this.capacity * Math.LN2) | 0;\n\n  // Creating the data array\n  this.data = new Uint8Array(length);\n\n  return;\n};\n\n/**\n * Method used to add an string to the filter.\n *\n * @param  {string} string - Item to add.\n * @return {BloomFilter}\n *\n * @note Should probably create a hash function working directly on a string.\n */\nBloomFilter.prototype.add = function(string) {\n\n  // Converting the string to a byte array\n  var array = stringToByteArray(string);\n\n  // Applying the n hash functions\n  for (var i = 0, l = this.hashFunctions; i < l; i++) {\n    var index = hashArray(this.data.length, i, array),\n        position = (1 << (7 & index));\n\n    this.data[index >> 3] |= position;\n  }\n\n  return this;\n};\n\n/**\n * Method used to test the given string.\n *\n * @param  {string} string - Item to test.\n * @return {boolean}\n */\nBloomFilter.prototype.test = function(string) {\n\n  // Converting the string to a byte array\n  var array = stringToByteArray(string);\n\n  // Applying the n hash functions\n  for (var i = 0, l = this.hashFunctions; i < l; i++) {\n    var index = hashArray(this.data.length, i, array);\n\n    if (!(this.data[index >> 3] & (1 << (7 & index))))\n      return false;\n  }\n\n  return true;\n};\n\n/**\n * Convenience known methods.\n */\nBloomFilter.prototype.toJSON = function() {\n  return this.data;\n};\n\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a filter.\n *\n * @param  {Iterable}    iterable - Target iterable.\n * @return {BloomFilter}\n */\nBloomFilter.from = function(iterable, options) {\n  if (!options) {\n    options = iterable.length || iterable.size;\n\n    if (typeof options !== 'number')\n      throw new Error('BloomFilter.from: could not infer the filter\\'s capacity. Try passing it as second argument.');\n  }\n\n  var filter = new BloomFilter(options);\n\n  forEach(iterable, function(value) {\n    filter.add(value);\n  });\n\n  return filter;\n};\n\n/**\n * Exporting.\n */\nmodule.exports = BloomFilter;\n","/**\n * Mnemonist CircularBuffer\n * =========================\n *\n * Circular buffer implementation fit to use as a finite deque.\n */\nvar iterables = require('./utils/iterables.js'),\n    FixedDeque = require('./fixed-deque');\n\n/**\n * CircularBuffer.\n *\n * @constructor\n */\nfunction CircularBuffer(ArrayClass, capacity) {\n\n  if (arguments.length < 2)\n    throw new Error('mnemonist/circular-buffer: expecting an Array class and a capacity.');\n\n  if (typeof capacity !== 'number' || capacity <= 0)\n    throw new Error('mnemonist/circular-buffer: `capacity` should be a positive number.');\n\n  this.ArrayClass = ArrayClass;\n  this.capacity = capacity;\n  this.items = new ArrayClass(this.capacity);\n  this.clear();\n}\n\n/**\n * Pasting most of the prototype from FixedDeque.\n */\nfunction paste(name) {\n  CircularBuffer.prototype[name] = FixedDeque.prototype[name];\n}\n\nObject.keys(FixedDeque.prototype).forEach(paste);\n\nif (typeof Symbol !== 'undefined')\n  Object.getOwnPropertySymbols(FixedDeque.prototype).forEach(paste);\n\n/**\n * Method used to append a value to the buffer.\n *\n * @param  {any}    item - Item to append.\n * @return {number}      - Returns the new size of the buffer.\n */\nCircularBuffer.prototype.push = function(item) {\n  var index = (this.start + this.size) % this.capacity;\n\n  this.items[index] = item;\n\n  // Overwriting?\n  if (this.size === this.capacity) {\n\n    // If start is at the end, we wrap around the buffer\n    this.start = (index + 1) % this.capacity;\n\n    return this.size;\n  }\n\n  return ++this.size;\n};\n\n/**\n * Method used to prepend a value to the buffer.\n *\n * @param  {any}    item - Item to prepend.\n * @return {number}      - Returns the new size of the buffer.\n */\nCircularBuffer.prototype.unshift = function(item) {\n  var index = this.start - 1;\n\n  if (this.start === 0)\n    index = this.capacity - 1;\n\n  this.items[index] = item;\n\n  // Overwriting\n  if (this.size === this.capacity) {\n\n    this.start = index;\n\n    return this.size;\n  }\n\n  this.start = index;\n\n  return ++this.size;\n};\n\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a circular buffer.\n *\n * @param  {Iterable} iterable   - Target iterable.\n * @param  {function} ArrayClass - Array class to use.\n * @param  {number}   capacity   - Desired capacity.\n * @return {FiniteStack}\n */\nCircularBuffer.from = function(iterable, ArrayClass, capacity) {\n  if (arguments.length < 3) {\n    capacity = iterables.guessLength(iterable);\n\n    if (typeof capacity !== 'number')\n      throw new Error('mnemonist/circular-buffer.from: could not guess iterable length. Please provide desired capacity as last argument.');\n  }\n\n  var buffer = new CircularBuffer(ArrayClass, capacity);\n\n  if (iterables.isArrayLike(iterable)) {\n    var i, l;\n\n    for (i = 0, l = iterable.length; i < l; i++)\n      buffer.items[i] = iterable[i];\n\n    buffer.size = l;\n\n    return buffer;\n  }\n\n  iterables.forEach(iterable, function(value) {\n    buffer.push(value);\n  });\n\n  return buffer;\n};\n\n/**\n * Exporting.\n */\nmodule.exports = CircularBuffer;\n","/**\n * Mnemonist DefaultMap\n * =====================\n *\n * JavaScript implementation of a default map that will return a constructed\n * value any time one tries to access an inexisting key. It's quite similar\n * to python's defaultdict.\n */\n\n/**\n * DefaultMap.\n *\n * @constructor\n */\nfunction DefaultMap(factory) {\n  if (typeof factory !== 'function')\n    throw new Error('mnemonist/DefaultMap.constructor: expecting a function.');\n\n  this.items = new Map();\n  this.factory = factory;\n  this.size = 0;\n}\n\n/**\n * Method used to clear the structure.\n *\n * @return {undefined}\n */\nDefaultMap.prototype.clear = function() {\n\n  // Properties\n  this.items.clear();\n  this.size = 0;\n};\n\n/**\n * Method used to get the value set for given key. If the key does not exist,\n * the value will be created using the provided factory.\n *\n * @param  {any} key - Target key.\n * @return {any}\n */\nDefaultMap.prototype.get = function(key) {\n  var value = this.items.get(key);\n\n  if (typeof value === 'undefined') {\n    value = this.factory(key, this.size);\n    this.items.set(key, value);\n    this.size++;\n  }\n\n  return value;\n};\n\n/**\n * Method used to get the value set for given key. If the key does not exist,\n * a value won't be created.\n *\n * @param  {any} key - Target key.\n * @return {any}\n */\nDefaultMap.prototype.peek = function(key) {\n  return this.items.get(key);\n};\n\n/**\n * Method used to set a value for given key.\n *\n * @param  {any} key   - Target key.\n * @param  {any} value - Value.\n * @return {DefaultMap}\n */\nDefaultMap.prototype.set = function(key, value) {\n  this.items.set(key, value);\n  this.size = this.items.size;\n\n  return this;\n};\n\n/**\n * Method used to test the existence of a key in the map.\n *\n * @param  {any} key   - Target key.\n * @return {boolean}\n */\nDefaultMap.prototype.has = function(key) {\n  return this.items.has(key);\n};\n\n/**\n * Method used to delete target key.\n *\n * @param  {any} key   - Target key.\n * @return {boolean}\n */\nDefaultMap.prototype.delete = function(key) {\n  var deleted = this.items.delete(key);\n\n  this.size = this.items.size;\n\n  return deleted;\n};\n\n/**\n * Method used to iterate over each of the key/value pairs.\n *\n * @param  {function}  callback - Function to call for each item.\n * @param  {object}    scope    - Optional scope.\n * @return {undefined}\n */\nDefaultMap.prototype.forEach = function(callback, scope) {\n  scope = arguments.length > 1 ? scope : this;\n\n  this.items.forEach(callback, scope);\n};\n\n/**\n * Iterators.\n */\nDefaultMap.prototype.entries = function() {\n  return this.items.entries();\n};\n\nDefaultMap.prototype.keys = function() {\n  return this.items.keys();\n};\n\nDefaultMap.prototype.values = function() {\n  return this.items.values();\n};\n\n/**\n * Attaching the #.entries method to Symbol.iterator if possible.\n */\nif (typeof Symbol !== 'undefined')\n  DefaultMap.prototype[Symbol.iterator] = DefaultMap.prototype.entries;\n\n/**\n * Convenience known methods.\n */\nDefaultMap.prototype.inspect = function() {\n  return this.items;\n};\n\nif (typeof Symbol !== 'undefined')\n  DefaultMap.prototype[Symbol.for('nodejs.util.inspect.custom')] = DefaultMap.prototype.inspect;\n\n/**\n * Typical factories.\n */\nDefaultMap.autoIncrement = function() {\n  var i = 0;\n\n  return function() {\n    return i++;\n  };\n};\n\n/**\n * Exporting.\n */\nmodule.exports = DefaultMap;\n","/**\n * Mnemonist DefaultWeakMap\n * =========================\n *\n * JavaScript implementation of a default weak map that will return a constructed\n * value any time one tries to access an non-existing key. It is similar to\n * DefaultMap but uses ES6 WeakMap that only holds weak reference to keys.\n */\n\n/**\n * DefaultWeakMap.\n *\n * @constructor\n */\nfunction DefaultWeakMap(factory) {\n  if (typeof factory !== 'function')\n    throw new Error('mnemonist/DefaultWeakMap.constructor: expecting a function.');\n\n  this.items = new WeakMap();\n  this.factory = factory;\n}\n\n/**\n * Method used to clear the structure.\n *\n * @return {undefined}\n */\nDefaultWeakMap.prototype.clear = function() {\n\n  // Properties\n  this.items = new WeakMap();\n};\n\n/**\n * Method used to get the value set for given key. If the key does not exist,\n * the value will be created using the provided factory.\n *\n * @param  {any} key - Target key.\n * @return {any}\n */\nDefaultWeakMap.prototype.get = function(key) {\n  var value = this.items.get(key);\n\n  if (typeof value === 'undefined') {\n    value = this.factory(key);\n    this.items.set(key, value);\n  }\n\n  return value;\n};\n\n/**\n * Method used to get the value set for given key. If the key does not exist,\n * a value won't be created.\n *\n * @param  {any} key - Target key.\n * @return {any}\n */\nDefaultWeakMap.prototype.peek = function(key) {\n  return this.items.get(key);\n};\n\n/**\n * Method used to set a value for given key.\n *\n * @param  {any} key   - Target key.\n * @param  {any} value - Value.\n * @return {DefaultMap}\n */\nDefaultWeakMap.prototype.set = function(key, value) {\n  this.items.set(key, value);\n  return this;\n};\n\n/**\n * Method used to test the existence of a key in the map.\n *\n * @param  {any} key   - Target key.\n * @return {boolean}\n */\nDefaultWeakMap.prototype.has = function(key) {\n  return this.items.has(key);\n};\n\n/**\n * Method used to delete target key.\n *\n * @param  {any} key   - Target key.\n * @return {boolean}\n */\nDefaultWeakMap.prototype.delete = function(key) {\n  return this.items.delete(key);\n};\n\n/**\n * Convenience known methods.\n */\nDefaultWeakMap.prototype.inspect = function() {\n  return this.items;\n};\n\nif (typeof Symbol !== 'undefined')\n  DefaultWeakMap.prototype[Symbol.for('nodejs.util.inspect.custom')] = DefaultWeakMap.prototype.inspect;\n\n/**\n * Exporting.\n */\nmodule.exports = DefaultWeakMap;\n","/* eslint no-constant-condition: 0 */\n/**\n * Mnemonist Fibonacci Heap\n * =========================\n *\n * Fibonacci heap implementation.\n */\nvar comparators = require('./utils/comparators.js'),\n    forEach = require('obliterator/foreach');\n\nvar DEFAULT_COMPARATOR = comparators.DEFAULT_COMPARATOR,\n    reverseComparator = comparators.reverseComparator;\n\n/**\n * Fibonacci Heap.\n *\n * @constructor\n */\nfunction FibonacciHeap(comparator) {\n  this.clear();\n  this.comparator = comparator || DEFAULT_COMPARATOR;\n\n  if (typeof this.comparator !== 'function')\n    throw new Error('mnemonist/FibonacciHeap.constructor: given comparator should be a function.');\n}\n\n/**\n * Method used to clear the heap.\n *\n * @return {undefined}\n */\nFibonacciHeap.prototype.clear = function() {\n\n  // Properties\n  this.root = null;\n  this.min = null;\n  this.size = 0;\n};\n\n/**\n * Function used to create a node.\n *\n * @param  {any}    item - Target item.\n * @return {object}\n */\nfunction createNode(item) {\n  return {\n    item: item,\n    degree: 0\n  };\n}\n\n/**\n * Function used to merge the given node with the root list.\n *\n * @param {FibonacciHeap} heap - Target heap.\n * @param {Node}          node - Target node.\n */\nfunction mergeWithRoot(heap, node) {\n  if (!heap.root) {\n    heap.root = node;\n  }\n  else {\n    node.right = heap.root.right;\n    node.left = heap.root;\n    heap.root.right.left = node;\n    heap.root.right = node;\n  }\n}\n\n/**\n * Method used to push an item into the heap.\n *\n * @param  {any}    item - Item to push.\n * @return {number}\n */\nFibonacciHeap.prototype.push = function(item) {\n  var node = createNode(item);\n  node.left = node;\n  node.right = node;\n  mergeWithRoot(this, node);\n\n  if (!this.min || this.comparator(node.item, this.min.item) <= 0)\n    this.min = node;\n\n  return ++this.size;\n};\n\n/**\n * Method used to get the \"first\" item of the heap.\n *\n * @return {any}\n */\nFibonacciHeap.prototype.peek = function() {\n  return this.min ? this.min.item : undefined;\n};\n\n/**\n * Function used to consume the given linked list.\n *\n * @param {Node} head - Head node.\n * @param {array}\n */\nfunction consumeLinkedList(head) {\n  var nodes = [],\n      node = head,\n      flag = false;\n\n  while (true) {\n    if (node === head && flag)\n      break;\n    else if (node === head)\n      flag = true;\n\n    nodes.push(node);\n    node = node.right;\n  }\n\n  return nodes;\n}\n\n/**\n * Function used to remove the target node from the root list.\n *\n * @param {FibonacciHeap} heap - Target heap.\n * @param {Node}          node - Target node.\n */\nfunction removeFromRoot(heap, node) {\n  if (heap.root === node)\n    heap.root = node.right;\n  node.left.right = node.right;\n  node.right.left = node.left;\n}\n\n/**\n * Function used to merge the given node with the child list of a root node.\n *\n * @param {Node} parent - Parent node.\n * @param {Node} node   - Target node.\n */\nfunction mergeWithChild(parent, node) {\n  if (!parent.child) {\n    parent.child = node;\n  }\n  else {\n    node.right = parent.child.right;\n    node.left = parent.child;\n    parent.child.right.left = node;\n    parent.child.right = node;\n  }\n}\n\n/**\n * Function used to link one node to another in the root list.\n *\n * @param {FibonacciHeap} heap - Target heap.\n * @param {Node}          y - Y node.\n * @param {Node}          x - X node.\n */\nfunction link(heap, y, x) {\n  removeFromRoot(heap, y);\n  y.left = y;\n  y.right = y;\n  mergeWithChild(x, y);\n  x.degree++;\n  y.parent = x;\n}\n\n/**\n * Function used to consolidate the heap.\n *\n * @param {FibonacciHeap} heap - Target heap.\n */\nfunction consolidate(heap) {\n  var A = new Array(heap.size),\n      nodes = consumeLinkedList(heap.root),\n      i, l, x, y, d, t;\n\n  for (i = 0, l = nodes.length; i < l; i++) {\n    x = nodes[i];\n    d = x.degree;\n\n    while (A[d]) {\n      y = A[d];\n\n      if (heap.comparator(x.item, y.item) > 0) {\n        t = x;\n        x = y;\n        y = t;\n      }\n\n      link(heap, y, x);\n      A[d] = null;\n      d++;\n    }\n\n    A[d] = x;\n  }\n\n  for (i = 0; i < heap.size; i++) {\n    if (A[i] && heap.comparator(A[i].item, heap.min.item) <= 0)\n      heap.min = A[i];\n  }\n}\n\n/**\n * Method used to retrieve & remove the \"first\" item of the heap.\n *\n * @return {any}\n */\nFibonacciHeap.prototype.pop = function() {\n  if (!this.size)\n    return undefined;\n\n  var z = this.min;\n\n  if (z.child) {\n    var nodes = consumeLinkedList(z.child),\n        node,\n        i,\n        l;\n\n    for (i = 0, l = nodes.length; i < l; i++) {\n      node = nodes[i];\n\n      mergeWithRoot(this, node);\n      delete node.parent;\n    }\n  }\n\n  removeFromRoot(this, z);\n\n  if (z === z.right) {\n    this.min = null;\n    this.root = null;\n  }\n  else {\n    this.min = z.right;\n    consolidate(this);\n  }\n\n  this.size--;\n\n  return z.item;\n};\n\n/**\n * Convenience known methods.\n */\nFibonacciHeap.prototype.inspect = function() {\n  var proxy = {\n    size: this.size\n  };\n\n  if (this.min && 'item' in this.min)\n    proxy.top = this.min.item;\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(proxy, 'constructor', {\n    value: FibonacciHeap,\n    enumerable: false\n  });\n\n  return proxy;\n};\n\nif (typeof Symbol !== 'undefined')\n  FibonacciHeap.prototype[Symbol.for('nodejs.util.inspect.custom')] = FibonacciHeap.prototype.inspect;\n\n/**\n * Fibonacci Maximum Heap.\n *\n * @constructor\n */\nfunction MaxFibonacciHeap(comparator) {\n  this.clear();\n  this.comparator = comparator || DEFAULT_COMPARATOR;\n\n  if (typeof this.comparator !== 'function')\n    throw new Error('mnemonist/FibonacciHeap.constructor: given comparator should be a function.');\n\n  this.comparator = reverseComparator(this.comparator);\n}\n\nMaxFibonacciHeap.prototype = FibonacciHeap.prototype;\n\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a heap.\n *\n * @param  {Iterable} iterable   - Target iterable.\n * @param  {function} comparator - Custom comparator function.\n * @return {FibonacciHeap}\n */\nFibonacciHeap.from = function(iterable, comparator) {\n  var heap = new FibonacciHeap(comparator);\n\n  forEach(iterable, function(value) {\n    heap.push(value);\n  });\n\n  return heap;\n};\n\nMaxFibonacciHeap.from = function(iterable, comparator) {\n  var heap = new MaxFibonacciHeap(comparator);\n\n  forEach(iterable, function(value) {\n    heap.push(value);\n  });\n\n  return heap;\n};\n\n/**\n * Exporting.\n */\nFibonacciHeap.MinFibonacciHeap = FibonacciHeap;\nFibonacciHeap.MaxFibonacciHeap = MaxFibonacciHeap;\nmodule.exports = FibonacciHeap;\n","/**\n * Mnemonist FixedDeque\n * =====================\n *\n * Fixed capacity double-ended queue implemented as ring deque.\n */\nvar iterables = require('./utils/iterables.js'),\n    Iterator = require('obliterator/iterator');\n\n/**\n * FixedDeque.\n *\n * @constructor\n */\nfunction FixedDeque(ArrayClass, capacity) {\n\n  if (arguments.length < 2)\n    throw new Error('mnemonist/fixed-deque: expecting an Array class and a capacity.');\n\n  if (typeof capacity !== 'number' || capacity <= 0)\n    throw new Error('mnemonist/fixed-deque: `capacity` should be a positive number.');\n\n  this.ArrayClass = ArrayClass;\n  this.capacity = capacity;\n  this.items = new ArrayClass(this.capacity);\n  this.clear();\n}\n\n/**\n * Method used to clear the structure.\n *\n * @return {undefined}\n */\nFixedDeque.prototype.clear = function() {\n\n  // Properties\n  this.start = 0;\n  this.size = 0;\n};\n\n/**\n * Method used to append a value to the deque.\n *\n * @param  {any}    item - Item to append.\n * @return {number}      - Returns the new size of the deque.\n */\nFixedDeque.prototype.push = function(item) {\n  if (this.size === this.capacity)\n    throw new Error('mnemonist/fixed-deque.push: deque capacity (' + this.capacity + ') exceeded!');\n\n  var index = (this.start + this.size) % this.capacity;\n\n  this.items[index] = item;\n\n  return ++this.size;\n};\n\n/**\n * Method used to prepend a value to the deque.\n *\n * @param  {any}    item - Item to prepend.\n * @return {number}      - Returns the new size of the deque.\n */\nFixedDeque.prototype.unshift = function(item) {\n  if (this.size === this.capacity)\n    throw new Error('mnemonist/fixed-deque.unshift: deque capacity (' + this.capacity + ') exceeded!');\n\n  var index = this.start - 1;\n\n  if (this.start === 0)\n    index = this.capacity - 1;\n\n  this.items[index] = item;\n  this.start = index;\n\n  return ++this.size;\n};\n\n/**\n * Method used to pop the deque.\n *\n * @return {any} - Returns the popped item.\n */\nFixedDeque.prototype.pop = function() {\n  if (this.size === 0)\n    return;\n\n  const index = (this.start + this.size - 1) % this.capacity;\n\n  this.size--;\n\n  return this.items[index];\n};\n\n/**\n * Method used to shift the deque.\n *\n * @return {any} - Returns the shifted item.\n */\nFixedDeque.prototype.shift = function() {\n  if (this.size === 0)\n    return;\n\n  var index = this.start;\n\n  this.size--;\n  this.start++;\n\n  if (this.start === this.capacity)\n    this.start = 0;\n\n  return this.items[index];\n};\n\n/**\n * Method used to peek the first value of the deque.\n *\n * @return {any}\n */\nFixedDeque.prototype.peekFirst = function() {\n  if (this.size === 0)\n    return;\n\n  return this.items[this.start];\n};\n\n/**\n * Method used to peek the last value of the deque.\n *\n * @return {any}\n */\nFixedDeque.prototype.peekLast = function() {\n  if (this.size === 0)\n    return;\n\n  var index = this.start + this.size - 1;\n\n  if (index > this.capacity)\n    index -= this.capacity;\n\n  return this.items[index];\n};\n\n/**\n * Method used to get the desired value of the deque.\n *\n * @param  {number} index\n * @return {any}\n */\nFixedDeque.prototype.get = function(index) {\n  if (this.size === 0)\n    return;\n\n  index = this.start + index;\n\n  if (index > this.capacity)\n    index -= this.capacity;\n\n  return this.items[index];\n};\n\n/**\n * Method used to iterate over the deque.\n *\n * @param  {function}  callback - Function to call for each item.\n * @param  {object}    scope    - Optional scope.\n * @return {undefined}\n */\nFixedDeque.prototype.forEach = function(callback, scope) {\n  scope = arguments.length > 1 ? scope : this;\n\n  var c = this.capacity,\n      l = this.size,\n      i = this.start,\n      j = 0;\n\n  while (j < l) {\n    callback.call(scope, this.items[i], j, this);\n    i++;\n    j++;\n\n    if (i === c)\n      i = 0;\n  }\n};\n\n/**\n * Method used to convert the deque to a JavaScript array.\n *\n * @return {array}\n */\n// TODO: optional array class as argument?\nFixedDeque.prototype.toArray = function() {\n\n  // Optimization\n  var offset = this.start + this.size;\n\n  if (offset < this.capacity)\n    return this.items.slice(this.start, offset);\n\n  var array = new this.ArrayClass(this.size),\n      c = this.capacity,\n      l = this.size,\n      i = this.start,\n      j = 0;\n\n  while (j < l) {\n    array[j] = this.items[i];\n    i++;\n    j++;\n\n    if (i === c)\n      i = 0;\n  }\n\n  return array;\n};\n\n/**\n * Method used to create an iterator over the deque's values.\n *\n * @return {Iterator}\n */\nFixedDeque.prototype.values = function() {\n  var items = this.items,\n      c = this.capacity,\n      l = this.size,\n      i = this.start,\n      j = 0;\n\n  return new Iterator(function() {\n    if (j >= l)\n      return {\n        done: true\n      };\n\n    var value = items[i];\n\n    i++;\n    j++;\n\n    if (i === c)\n      i = 0;\n\n    return {\n      value: value,\n      done: false\n    };\n  });\n};\n\n/**\n * Method used to create an iterator over the deque's entries.\n *\n * @return {Iterator}\n */\nFixedDeque.prototype.entries = function() {\n  var items = this.items,\n      c = this.capacity,\n      l = this.size,\n      i = this.start,\n      j = 0;\n\n  return new Iterator(function() {\n    if (j >= l)\n      return {\n        done: true\n      };\n\n    var value = items[i];\n\n    i++;\n\n    if (i === c)\n      i = 0;\n\n    return {\n      value: [j++, value],\n      done: false\n    };\n  });\n};\n\n/**\n * Attaching the #.values method to Symbol.iterator if possible.\n */\nif (typeof Symbol !== 'undefined')\n  FixedDeque.prototype[Symbol.iterator] = FixedDeque.prototype.values;\n\n/**\n * Convenience known methods.\n */\nFixedDeque.prototype.inspect = function() {\n  var array = this.toArray();\n\n  array.type = this.ArrayClass.name;\n  array.capacity = this.capacity;\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(array, 'constructor', {\n    value: FixedDeque,\n    enumerable: false\n  });\n\n  return array;\n};\n\nif (typeof Symbol !== 'undefined')\n  FixedDeque.prototype[Symbol.for('nodejs.util.inspect.custom')] = FixedDeque.prototype.inspect;\n\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a deque.\n *\n * @param  {Iterable} iterable   - Target iterable.\n * @param  {function} ArrayClass - Array class to use.\n * @param  {number}   capacity   - Desired capacity.\n * @return {FiniteStack}\n */\nFixedDeque.from = function(iterable, ArrayClass, capacity) {\n  if (arguments.length < 3) {\n    capacity = iterables.guessLength(iterable);\n\n    if (typeof capacity !== 'number')\n      throw new Error('mnemonist/fixed-deque.from: could not guess iterable length. Please provide desired capacity as last argument.');\n  }\n\n  var deque = new FixedDeque(ArrayClass, capacity);\n\n  if (iterables.isArrayLike(iterable)) {\n    var i, l;\n\n    for (i = 0, l = iterable.length; i < l; i++)\n      deque.items[i] = iterable[i];\n\n    deque.size = l;\n\n    return deque;\n  }\n\n  iterables.forEach(iterable, function(value) {\n    deque.push(value);\n  });\n\n  return deque;\n};\n\n/**\n * Exporting.\n */\nmodule.exports = FixedDeque;\n","/**\n * Mnemonist Fixed Reverse Heap\n * =============================\n *\n * Static heap implementation with fixed capacity. It's a \"reverse\" heap\n * because it stores the elements in reverse so we can replace the worst\n * item in logarithmic time. As such, one cannot pop this heap but can only\n * consume it at the end. This structure is very efficient when trying to\n * find the n smallest/largest items from a larger query (k nearest neigbors\n * for instance).\n */\nvar comparators = require('./utils/comparators.js'),\n    Heap = require('./heap.js');\n\nvar DEFAULT_COMPARATOR = comparators.DEFAULT_COMPARATOR,\n    reverseComparator = comparators.reverseComparator;\n\n/**\n * Helper functions.\n */\n\n/**\n * Function used to sift up.\n *\n * @param {function} compare - Comparison function.\n * @param {array}    heap    - Array storing the heap's data.\n * @param {number}   size    - Heap's true size.\n * @param {number}   i       - Index.\n */\nfunction siftUp(compare, heap, size, i) {\n  var endIndex = size,\n      startIndex = i,\n      item = heap[i],\n      childIndex = 2 * i + 1,\n      rightIndex;\n\n  while (childIndex < endIndex) {\n    rightIndex = childIndex + 1;\n\n    if (\n      rightIndex < endIndex &&\n      compare(heap[childIndex], heap[rightIndex]) >= 0\n    ) {\n      childIndex = rightIndex;\n    }\n\n    heap[i] = heap[childIndex];\n    i = childIndex;\n    childIndex = 2 * i + 1;\n  }\n\n  heap[i] = item;\n  Heap.siftDown(compare, heap, startIndex, i);\n}\n\n/**\n * Fully consumes the given heap.\n *\n * @param  {function} ArrayClass - Array class to use.\n * @param  {function} compare    - Comparison function.\n * @param  {array}    heap       - Array storing the heap's data.\n * @param  {number}   size       - True size of the heap.\n * @return {array}\n */\nfunction consume(ArrayClass, compare, heap, size) {\n  var l = size,\n      i = l;\n\n  var array = new ArrayClass(size),\n      lastItem,\n      item;\n\n  while (i > 0) {\n    lastItem = heap[--i];\n\n    if (i !== 0) {\n      item = heap[0];\n      heap[0] = lastItem;\n      siftUp(compare, heap, --size, 0);\n      lastItem = item;\n    }\n\n    array[i] = lastItem;\n  }\n\n  return array;\n}\n\n/**\n * Binary Minimum FixedReverseHeap.\n *\n * @constructor\n * @param {function} ArrayClass - The class of array to use.\n * @param {function} comparator - Comparator function.\n * @param {number}   capacity   - Maximum number of items to keep.\n */\nfunction FixedReverseHeap(ArrayClass, comparator, capacity) {\n\n  // Comparator can be omitted\n  if (arguments.length === 2) {\n    capacity = comparator;\n    comparator = null;\n  }\n\n  this.ArrayClass = ArrayClass;\n  this.capacity = capacity;\n\n  this.items = new ArrayClass(capacity);\n  this.clear();\n  this.comparator = comparator || DEFAULT_COMPARATOR;\n\n  if (typeof capacity !== 'number' && capacity <= 0)\n    throw new Error('mnemonist/FixedReverseHeap.constructor: capacity should be a number > 0.');\n\n  if (typeof this.comparator !== 'function')\n    throw new Error('mnemonist/FixedReverseHeap.constructor: given comparator should be a function.');\n\n  this.comparator = reverseComparator(this.comparator);\n}\n\n/**\n * Method used to clear the heap.\n *\n * @return {undefined}\n */\nFixedReverseHeap.prototype.clear = function() {\n\n  // Properties\n  this.size = 0;\n};\n\n/**\n * Method used to push an item into the heap.\n *\n * @param  {any}    item - Item to push.\n * @return {number}\n */\nFixedReverseHeap.prototype.push = function(item) {\n\n  // Still some place\n  if (this.size < this.capacity) {\n    this.items[this.size] = item;\n    Heap.siftDown(this.comparator, this.items, 0, this.size);\n    this.size++;\n  }\n\n  // Heap is full, we need to replace worst item\n  else {\n\n    if (this.comparator(item, this.items[0]) > 0)\n      Heap.replace(this.comparator, this.items, item);\n  }\n\n  return this.size;\n};\n\n/**\n * Method used to peek the worst item in the heap.\n *\n * @return {any}\n */\nFixedReverseHeap.prototype.peek = function() {\n  return this.items[0];\n};\n\n/**\n * Method used to consume the heap fully and return its items as a sorted array.\n *\n * @return {array}\n */\nFixedReverseHeap.prototype.consume = function() {\n  var items = consume(this.ArrayClass, this.comparator, this.items, this.size);\n  this.size = 0;\n\n  return items;\n};\n\n/**\n * Method used to convert the heap to an array. Note that it basically clone\n * the heap and consumes it completely. This is hardly performant.\n *\n * @return {array}\n */\nFixedReverseHeap.prototype.toArray = function() {\n  return consume(this.ArrayClass, this.comparator, this.items.slice(0, this.size), this.size);\n};\n\n/**\n * Convenience known methods.\n */\nFixedReverseHeap.prototype.inspect = function() {\n  var proxy = this.toArray();\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(proxy, 'constructor', {\n    value: FixedReverseHeap,\n    enumerable: false\n  });\n\n  return proxy;\n};\n\nif (typeof Symbol !== 'undefined')\n  FixedReverseHeap.prototype[Symbol.for('nodejs.util.inspect.custom')] = FixedReverseHeap.prototype.inspect;\n\n/**\n * Exporting.\n */\nmodule.exports = FixedReverseHeap;\n","/**\n * Mnemonist FixedStack\n * =====================\n *\n * The fixed stack is a stack whose capacity is defined beforehand and that\n * cannot be exceeded. This class is really useful when combined with\n * byte arrays to save up some memory and avoid memory re-allocation, hence\n * speeding up computations.\n *\n * This has however a downside: you need to know the maximum size you stack\n * can have during your iteration (which is not too difficult to compute when\n * performing, say, a DFS on a balanced binary tree).\n */\nvar Iterator = require('obliterator/iterator'),\n    iterables = require('./utils/iterables.js');\n\n/**\n * FixedStack\n *\n * @constructor\n * @param {function} ArrayClass - Array class to use.\n * @param {number}   capacity   - Desired capacity.\n */\nfunction FixedStack(ArrayClass, capacity) {\n\n  if (arguments.length < 2)\n    throw new Error('mnemonist/fixed-stack: expecting an Array class and a capacity.');\n\n  if (typeof capacity !== 'number' || capacity <= 0)\n    throw new Error('mnemonist/fixed-stack: `capacity` should be a positive number.');\n\n  this.capacity = capacity;\n  this.ArrayClass = ArrayClass;\n  this.items = new this.ArrayClass(this.capacity);\n  this.clear();\n}\n\n/**\n * Method used to clear the stack.\n *\n * @return {undefined}\n */\nFixedStack.prototype.clear = function() {\n\n  // Properties\n  this.size = 0;\n};\n\n/**\n * Method used to add an item to the stack.\n *\n * @param  {any}    item - Item to add.\n * @return {number}\n */\nFixedStack.prototype.push = function(item) {\n  if (this.size === this.capacity)\n    throw new Error('mnemonist/fixed-stack.push: stack capacity (' + this.capacity + ') exceeded!');\n\n  this.items[this.size++] = item;\n  return this.size;\n};\n\n/**\n * Method used to retrieve & remove the last item of the stack.\n *\n * @return {any}\n */\nFixedStack.prototype.pop = function() {\n  if (this.size === 0)\n    return;\n\n  return this.items[--this.size];\n};\n\n/**\n * Method used to get the last item of the stack.\n *\n * @return {any}\n */\nFixedStack.prototype.peek = function() {\n  return this.items[this.size - 1];\n};\n\n/**\n * Method used to iterate over the stack.\n *\n * @param  {function}  callback - Function to call for each item.\n * @param  {object}    scope    - Optional scope.\n * @return {undefined}\n */\nFixedStack.prototype.forEach = function(callback, scope) {\n  scope = arguments.length > 1 ? scope : this;\n\n  for (var i = 0, l = this.items.length; i < l; i++)\n    callback.call(scope, this.items[l - i - 1], i, this);\n};\n\n/**\n * Method used to convert the stack to a JavaScript array.\n *\n * @return {array}\n */\nFixedStack.prototype.toArray = function() {\n  var array = new this.ArrayClass(this.size),\n      l = this.size - 1,\n      i = this.size;\n\n  while (i--)\n    array[i] = this.items[l - i];\n\n  return array;\n};\n\n/**\n * Method used to create an iterator over a stack's values.\n *\n * @return {Iterator}\n */\nFixedStack.prototype.values = function() {\n  var items = this.items,\n      l = this.size,\n      i = 0;\n\n  return new Iterator(function() {\n    if (i >= l)\n      return {\n        done: true\n      };\n\n    var value = items[l - i - 1];\n    i++;\n\n    return {\n      value: value,\n      done: false\n    };\n  });\n};\n\n/**\n * Method used to create an iterator over a stack's entries.\n *\n * @return {Iterator}\n */\nFixedStack.prototype.entries = function() {\n  var items = this.items,\n      l = this.size,\n      i = 0;\n\n  return new Iterator(function() {\n    if (i >= l)\n      return {\n        done: true\n      };\n\n    var value = items[l - i - 1];\n\n    return {\n      value: [i++, value],\n      done: false\n    };\n  });\n};\n\n/**\n * Attaching the #.values method to Symbol.iterator if possible.\n */\nif (typeof Symbol !== 'undefined')\n  FixedStack.prototype[Symbol.iterator] = FixedStack.prototype.values;\n\n\n/**\n * Convenience known methods.\n */\nFixedStack.prototype.toString = function() {\n  return this.toArray().join(',');\n};\n\nFixedStack.prototype.toJSON = function() {\n  return this.toArray();\n};\n\nFixedStack.prototype.inspect = function() {\n  var array = this.toArray();\n\n  array.type = this.ArrayClass.name;\n  array.capacity = this.capacity;\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(array, 'constructor', {\n    value: FixedStack,\n    enumerable: false\n  });\n\n  return array;\n};\n\nif (typeof Symbol !== 'undefined')\n  FixedStack.prototype[Symbol.for('nodejs.util.inspect.custom')] = FixedStack.prototype.inspect;\n\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a stack.\n *\n * @param  {Iterable} iterable   - Target iterable.\n * @param  {function} ArrayClass - Array class to use.\n * @param  {number}   capacity   - Desired capacity.\n * @return {FixedStack}\n */\nFixedStack.from = function(iterable, ArrayClass, capacity) {\n\n  if (arguments.length < 3) {\n    capacity = iterables.guessLength(iterable);\n\n    if (typeof capacity !== 'number')\n      throw new Error('mnemonist/fixed-stack.from: could not guess iterable length. Please provide desired capacity as last argument.');\n  }\n\n  var stack = new FixedStack(ArrayClass, capacity);\n\n  if (iterables.isArrayLike(iterable)) {\n    var i, l;\n\n    for (i = 0, l = iterable.length; i < l; i++)\n      stack.items[i] = iterable[i];\n\n    stack.size = l;\n\n    return stack;\n  }\n\n  iterables.forEach(iterable, function(value) {\n    stack.push(value);\n  });\n\n  return stack;\n};\n\n/**\n * Exporting.\n */\nmodule.exports = FixedStack;\n","/**\n * Mnemonist Fuzzy Map\n * ====================\n *\n * The fuzzy map is a map whose keys are processed by a function before\n * read/write operations. This can often result in multiple keys accessing\n * the same resource (example: a map with lowercased keys).\n */\nvar forEach = require('obliterator/foreach');\n\nvar identity = function(x) {\n  return x;\n};\n\n/**\n * FuzzyMap.\n *\n * @constructor\n * @param {array|function} descriptor - Hash functions descriptor.\n */\nfunction FuzzyMap(descriptor) {\n  this.items = new Map();\n  this.clear();\n\n  if (Array.isArray(descriptor)) {\n    this.writeHashFunction = descriptor[0];\n    this.readHashFunction = descriptor[1];\n  }\n  else {\n    this.writeHashFunction = descriptor;\n    this.readHashFunction = descriptor;\n  }\n\n  if (!this.writeHashFunction)\n    this.writeHashFunction = identity;\n  if (!this.readHashFunction)\n    this.readHashFunction = identity;\n\n  if (typeof this.writeHashFunction !== 'function')\n    throw new Error('mnemonist/FuzzyMap.constructor: invalid hash function given.');\n\n  if (typeof this.readHashFunction !== 'function')\n    throw new Error('mnemonist/FuzzyMap.constructor: invalid hash function given.');\n}\n\n/**\n * Method used to clear the structure.\n *\n * @return {undefined}\n */\nFuzzyMap.prototype.clear = function() {\n  this.items.clear();\n\n  // Properties\n  this.size = 0;\n};\n\n/**\n * Method used to add an item to the FuzzyMap.\n *\n * @param  {any} item - Item to add.\n * @return {FuzzyMap}\n */\nFuzzyMap.prototype.add = function(item) {\n  var key = this.writeHashFunction(item);\n\n  this.items.set(key, item);\n  this.size = this.items.size;\n\n  return this;\n};\n\n/**\n * Method used to set an item in the FuzzyMap using the given key.\n *\n * @param  {any} key  - Key to use.\n * @param  {any} item - Item to add.\n * @return {FuzzyMap}\n */\nFuzzyMap.prototype.set = function(key, item) {\n  key = this.writeHashFunction(key);\n\n  this.items.set(key, item);\n  this.size = this.items.size;\n\n  return this;\n};\n\n/**\n * Method used to retrieve an item from the FuzzyMap.\n *\n * @param  {any} key - Key to use.\n * @return {any}\n */\nFuzzyMap.prototype.get = function(key) {\n  key = this.readHashFunction(key);\n\n  return this.items.get(key);\n};\n\n/**\n * Method used to test the existence of an item in the map.\n *\n * @param  {any} key - Key to check.\n * @return {boolean}\n */\nFuzzyMap.prototype.has = function(key) {\n  key = this.readHashFunction(key);\n\n  return this.items.has(key);\n};\n\n/**\n * Method used to iterate over each of the FuzzyMap's values.\n *\n * @param  {function}  callback - Function to call for each item.\n * @param  {object}    scope    - Optional scope.\n * @return {undefined}\n */\nFuzzyMap.prototype.forEach = function(callback, scope) {\n  scope = arguments.length > 1 ? scope : this;\n\n  this.items.forEach(function(value) {\n    callback.call(scope, value, value);\n  });\n};\n\n/**\n * Method returning an iterator over the FuzzyMap's values.\n *\n * @return {FuzzyMapIterator}\n */\nFuzzyMap.prototype.values = function() {\n  return this.items.values();\n};\n\n/**\n * Attaching the #.values method to Symbol.iterator if possible.\n */\nif (typeof Symbol !== 'undefined')\n  FuzzyMap.prototype[Symbol.iterator] = FuzzyMap.prototype.values;\n\n/**\n * Convenience known method.\n */\nFuzzyMap.prototype.inspect = function() {\n  var array = Array.from(this.items.values());\n\n  Object.defineProperty(array, 'constructor', {\n    value: FuzzyMap,\n    enumerable: false\n  });\n\n  return array;\n};\n\nif (typeof Symbol !== 'undefined')\n  FuzzyMap.prototype[Symbol.for('nodejs.util.inspect.custom')] = FuzzyMap.prototype.inspect;\n\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a structure.\n *\n * @param  {Iterable}       iterable   - Target iterable.\n * @param  {array|function} descriptor - Hash functions descriptor.\n * @param  {boolean}        useSet     - Whether to use #.set or #.add\n * @return {FuzzyMap}\n */\nFuzzyMap.from = function(iterable, descriptor, useSet) {\n  var map = new FuzzyMap(descriptor);\n\n  forEach(iterable, function(value, key) {\n    if (useSet)\n      map.set(key, value);\n    else\n      map.add(value);\n  });\n\n  return map;\n};\n\n/**\n * Exporting.\n */\nmodule.exports = FuzzyMap;\n","/**\n * Mnemonist FuzzyMultiMap\n * ========================\n *\n * Same as the fuzzy map but relying on a MultiMap rather than a Map.\n */\nvar MultiMap = require('./multi-map.js'),\n    forEach = require('obliterator/foreach');\n\nvar identity = function(x) {\n  return x;\n};\n\n/**\n * FuzzyMultiMap.\n *\n * @constructor\n * @param {array|function} descriptor - Hash functions descriptor.\n * @param {function}       Container  - Container to use.\n */\nfunction FuzzyMultiMap(descriptor, Container) {\n  this.items = new MultiMap(Container);\n  this.clear();\n\n  if (Array.isArray(descriptor)) {\n    this.writeHashFunction = descriptor[0];\n    this.readHashFunction = descriptor[1];\n  }\n  else {\n    this.writeHashFunction = descriptor;\n    this.readHashFunction = descriptor;\n  }\n\n  if (!this.writeHashFunction)\n    this.writeHashFunction = identity;\n  if (!this.readHashFunction)\n    this.readHashFunction = identity;\n\n  if (typeof this.writeHashFunction !== 'function')\n    throw new Error('mnemonist/FuzzyMultiMap.constructor: invalid hash function given.');\n\n  if (typeof this.readHashFunction !== 'function')\n    throw new Error('mnemonist/FuzzyMultiMap.constructor: invalid hash function given.');\n}\n\n/**\n * Method used to clear the structure.\n *\n * @return {undefined}\n */\nFuzzyMultiMap.prototype.clear = function() {\n  this.items.clear();\n\n  // Properties\n  this.size = 0;\n  this.dimension = 0;\n};\n\n/**\n * Method used to add an item to the index.\n *\n * @param  {any} item - Item to add.\n * @return {FuzzyMultiMap}\n */\nFuzzyMultiMap.prototype.add = function(item) {\n  var key = this.writeHashFunction(item);\n\n  this.items.set(key, item);\n  this.size = this.items.size;\n  this.dimension = this.items.dimension;\n\n  return this;\n};\n\n/**\n * Method used to set an item in the index using the given key.\n *\n * @param  {any} key  - Key to use.\n * @param  {any} item - Item to add.\n * @return {FuzzyMultiMap}\n */\nFuzzyMultiMap.prototype.set = function(key, item) {\n  key = this.writeHashFunction(key);\n\n  this.items.set(key, item);\n  this.size = this.items.size;\n  this.dimension = this.items.dimension;\n\n  return this;\n};\n\n/**\n * Method used to retrieve an item from the index.\n *\n * @param  {any} key - Key to use.\n * @return {any}\n */\nFuzzyMultiMap.prototype.get = function(key) {\n  key = this.readHashFunction(key);\n\n  return this.items.get(key);\n};\n\n/**\n * Method used to test the existence of an item in the map.\n *\n * @param  {any} key - Key to check.\n * @return {boolean}\n */\nFuzzyMultiMap.prototype.has = function(key) {\n  key = this.readHashFunction(key);\n\n  return this.items.has(key);\n};\n\n/**\n * Method used to iterate over each of the index's values.\n *\n * @param  {function}  callback - Function to call for each item.\n * @param  {object}    scope    - Optional scope.\n * @return {undefined}\n */\nFuzzyMultiMap.prototype.forEach = function(callback, scope) {\n  scope = arguments.length > 1 ? scope : this;\n\n  this.items.forEach(function(value) {\n    callback.call(scope, value, value);\n  });\n};\n\n/**\n * Method returning an iterator over the index's values.\n *\n * @return {FuzzyMultiMapIterator}\n */\nFuzzyMultiMap.prototype.values = function() {\n  return this.items.values();\n};\n\n/**\n * Attaching the #.values method to Symbol.iterator if possible.\n */\nif (typeof Symbol !== 'undefined')\n  FuzzyMultiMap.prototype[Symbol.iterator] = FuzzyMultiMap.prototype.values;\n\n/**\n * Convenience known method.\n */\nFuzzyMultiMap.prototype.inspect = function() {\n  var array = Array.from(this);\n\n  Object.defineProperty(array, 'constructor', {\n    value: FuzzyMultiMap,\n    enumerable: false\n  });\n\n  return array;\n};\n\nif (typeof Symbol !== 'undefined')\n  FuzzyMultiMap.prototype[Symbol.for('nodejs.util.inspect.custom')] = FuzzyMultiMap.prototype.inspect;\n\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a structure.\n *\n * @param  {Iterable}       iterable   - Target iterable.\n * @param  {array|function} descriptor - Hash functions descriptor.\n * @param  {function}       Container  - Container to use.\n * @param  {boolean}        useSet     - Whether to use #.set or #.add\n * @return {FuzzyMultiMap}\n */\nFuzzyMultiMap.from = function(iterable, descriptor, Container, useSet) {\n  if (arguments.length === 3) {\n    if (typeof Container === 'boolean') {\n      useSet = Container;\n      Container = Array;\n    }\n  }\n\n  var map = new FuzzyMultiMap(descriptor, Container);\n\n  forEach(iterable, function(value, key) {\n    if (useSet)\n      map.set(key, value);\n    else\n      map.add(value);\n  });\n\n  return map;\n};\n\n/**\n * Exporting.\n */\nmodule.exports = FuzzyMultiMap;\n","/**\n * Mnemonist HashedArrayTree\n * ==========================\n *\n * Abstract implementation of a hashed array tree representing arrays growing\n * dynamically.\n */\n\n/**\n * Defaults.\n */\nvar DEFAULT_BLOCK_SIZE = 1024;\n\n/**\n * Helpers.\n */\nfunction powerOfTwo(x) {\n  return (x & (x - 1)) === 0;\n}\n\n/**\n * HashedArrayTree.\n *\n * @constructor\n * @param {function}      ArrayClass           - An array constructor.\n * @param {number|object} initialCapacityOrOptions - Self-explanatory.\n */\nfunction HashedArrayTree(ArrayClass, initialCapacityOrOptions) {\n  if (arguments.length < 1)\n    throw new Error('mnemonist/hashed-array-tree: expecting at least a byte array constructor.');\n\n  var initialCapacity = initialCapacityOrOptions || 0,\n      blockSize = DEFAULT_BLOCK_SIZE,\n      initialLength = 0;\n\n  if (typeof initialCapacityOrOptions === 'object') {\n    initialCapacity = initialCapacityOrOptions.initialCapacity || 0;\n    initialLength = initialCapacityOrOptions.initialLength || 0;\n    blockSize = initialCapacityOrOptions.blockSize || DEFAULT_BLOCK_SIZE;\n  }\n\n  if (!blockSize || !powerOfTwo(blockSize))\n    throw new Error('mnemonist/hashed-array-tree: block size should be a power of two.');\n\n  var capacity = Math.max(initialLength, initialCapacity),\n      initialBlocks = Math.ceil(capacity / blockSize);\n\n  this.ArrayClass = ArrayClass;\n  this.length = initialLength;\n  this.capacity = initialBlocks * blockSize;\n  this.blockSize = blockSize;\n  this.offsetMask = blockSize - 1;\n  this.blockMask = Math.log2(blockSize);\n\n  // Allocating initial blocks\n  this.blocks = new Array(initialBlocks);\n\n  for (var i = 0; i < initialBlocks; i++)\n    this.blocks[i] = new this.ArrayClass(this.blockSize);\n}\n\n/**\n * Method used to set a value.\n *\n * @param  {number} index - Index to edit.\n * @param  {any}    value - Value.\n * @return {HashedArrayTree}\n */\nHashedArrayTree.prototype.set = function(index, value) {\n\n  // Out of bounds?\n  if (this.length < index)\n    throw new Error('HashedArrayTree(' + this.ArrayClass.name + ').set: index out of bounds.');\n\n  var block = index >> this.blockMask,\n      i = index & this.offsetMask;\n\n  this.blocks[block][i] = value;\n\n  return this;\n};\n\n/**\n * Method used to get a value.\n *\n * @param  {number} index - Index to retrieve.\n * @return {any}\n */\nHashedArrayTree.prototype.get = function(index) {\n  if (this.length < index)\n    return;\n\n  var block = index >> this.blockMask,\n      i = index & this.offsetMask;\n\n  return this.blocks[block][i];\n};\n\n/**\n * Method used to grow the array.\n *\n * @param  {number}          capacity - Optional capacity to accomodate.\n * @return {HashedArrayTree}\n */\nHashedArrayTree.prototype.grow = function(capacity) {\n  if (typeof capacity !== 'number')\n    capacity = this.capacity + this.blockSize;\n\n  if (this.capacity >= capacity)\n    return this;\n\n  while (this.capacity < capacity) {\n    this.blocks.push(new this.ArrayClass(this.blockSize));\n    this.capacity += this.blockSize;\n  }\n\n  return this;\n};\n\n/**\n * Method used to resize the array. Won't deallocate.\n *\n * @param  {number}       length - Target length.\n * @return {HashedArrayTree}\n */\nHashedArrayTree.prototype.resize = function(length) {\n  if (length === this.length)\n    return this;\n\n  if (length < this.length) {\n    this.length = length;\n    return this;\n  }\n\n  this.length = length;\n  this.grow(length);\n\n  return this;\n};\n\n/**\n * Method used to push a value into the array.\n *\n * @param  {any}    value - Value to push.\n * @return {number}       - Length of the array.\n */\nHashedArrayTree.prototype.push = function(value) {\n  if (this.capacity === this.length)\n    this.grow();\n\n  var index = this.length;\n\n  var block = index >> this.blockMask,\n      i = index & this.offsetMask;\n\n  this.blocks[block][i] = value;\n\n  return ++this.length;\n};\n\n/**\n * Method used to pop the last value of the array.\n *\n * @return {number} - The popped value.\n */\nHashedArrayTree.prototype.pop = function() {\n  if (this.length === 0)\n    return;\n\n  var lastBlock = this.blocks[this.blocks.length - 1];\n\n  var i = (--this.length) & this.offsetMask;\n\n  return lastBlock[i];\n};\n\n/**\n * Convenience known methods.\n */\nHashedArrayTree.prototype.inspect = function() {\n  var proxy = new this.ArrayClass(this.length),\n      block;\n\n  for (var i = 0, l = this.length; i < l; i++) {\n    block = i >> this.blockMask;\n    proxy[i] = this.blocks[block][i & this.offsetMask];\n  }\n\n  proxy.type = this.ArrayClass.name;\n  proxy.items = this.length;\n  proxy.capacity = this.capacity;\n  proxy.blockSize = this.blockSize;\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(proxy, 'constructor', {\n    value: HashedArrayTree,\n    enumerable: false\n  });\n\n  return proxy;\n};\n\nif (typeof Symbol !== 'undefined')\n  HashedArrayTree.prototype[Symbol.for('nodejs.util.inspect.custom')] = HashedArrayTree.prototype.inspect;\n\n/**\n * Exporting.\n */\nmodule.exports = HashedArrayTree;\n","/**\n * Mnemonist Binary Heap\n * ======================\n *\n * Binary heap implementation.\n */\nvar forEach = require('obliterator/foreach'),\n    comparators = require('./utils/comparators.js'),\n    iterables = require('./utils/iterables.js');\n\nvar DEFAULT_COMPARATOR = comparators.DEFAULT_COMPARATOR,\n    reverseComparator = comparators.reverseComparator;\n\n/**\n * Heap helper functions.\n */\n\n/**\n * Function used to sift down.\n *\n * @param {function} compare    - Comparison function.\n * @param {array}    heap       - Array storing the heap's data.\n * @param {number}   startIndex - Starting index.\n * @param {number}   i          - Index.\n */\nfunction siftDown(compare, heap, startIndex, i) {\n  var item = heap[i],\n      parentIndex,\n      parent;\n\n  while (i > startIndex) {\n    parentIndex = (i - 1) >> 1;\n    parent = heap[parentIndex];\n\n    if (compare(item, parent) < 0) {\n      heap[i] = parent;\n      i = parentIndex;\n      continue;\n    }\n\n    break;\n  }\n\n  heap[i] = item;\n}\n\n/**\n * Function used to sift up.\n *\n * @param {function} compare - Comparison function.\n * @param {array}    heap    - Array storing the heap's data.\n * @param {number}   i       - Index.\n */\nfunction siftUp(compare, heap, i) {\n  var endIndex = heap.length,\n      startIndex = i,\n      item = heap[i],\n      childIndex = 2 * i + 1,\n      rightIndex;\n\n  while (childIndex < endIndex) {\n    rightIndex = childIndex + 1;\n\n    if (\n      rightIndex < endIndex &&\n      compare(heap[childIndex], heap[rightIndex]) >= 0\n    ) {\n      childIndex = rightIndex;\n    }\n\n    heap[i] = heap[childIndex];\n    i = childIndex;\n    childIndex = 2 * i + 1;\n  }\n\n  heap[i] = item;\n  siftDown(compare, heap, startIndex, i);\n}\n\n/**\n * Function used to push an item into a heap represented by a raw array.\n *\n * @param {function} compare - Comparison function.\n * @param {array}    heap    - Array storing the heap's data.\n * @param {any}      item    - Item to push.\n */\nfunction push(compare, heap, item) {\n  heap.push(item);\n  siftDown(compare, heap, 0, heap.length - 1);\n}\n\n/**\n * Function used to pop an item from a heap represented by a raw array.\n *\n * @param  {function} compare - Comparison function.\n * @param  {array}    heap    - Array storing the heap's data.\n * @return {any}\n */\nfunction pop(compare, heap) {\n  var lastItem = heap.pop();\n\n  if (heap.length !== 0) {\n    var item = heap[0];\n    heap[0] = lastItem;\n    siftUp(compare, heap, 0);\n\n    return item;\n  }\n\n  return lastItem;\n}\n\n/**\n * Function used to pop the heap then push a new value into it, thus \"replacing\"\n * it.\n *\n * @param  {function} compare - Comparison function.\n * @param  {array}    heap    - Array storing the heap's data.\n * @param  {any}      item    - The item to push.\n * @return {any}\n */\nfunction replace(compare, heap, item) {\n  if (heap.length === 0)\n    throw new Error('mnemonist/heap.replace: cannot pop an empty heap.');\n\n  var popped = heap[0];\n  heap[0] = item;\n  siftUp(compare, heap, 0);\n\n  return popped;\n}\n\n/**\n * Function used to push an item in the heap then pop the heap and return the\n * popped value.\n *\n * @param  {function} compare - Comparison function.\n * @param  {array}    heap    - Array storing the heap's data.\n * @param  {any}      item    - The item to push.\n * @return {any}\n */\nfunction pushpop(compare, heap, item) {\n  var tmp;\n\n  if (heap.length !== 0 && compare(heap[0], item) < 0) {\n    tmp = heap[0];\n    heap[0] = item;\n    item = tmp;\n    siftUp(compare, heap, 0);\n  }\n\n  return item;\n}\n\n/**\n * Converts and array into an abstract heap in linear time.\n *\n * @param {function} compare - Comparison function.\n * @param {array}    array   - Target array.\n */\nfunction heapify(compare, array) {\n  var n = array.length,\n      l = n >> 1,\n      i = l;\n\n  while (--i >= 0)\n    siftUp(compare, array, i);\n}\n\n/**\n * Fully consumes the given heap.\n *\n * @param  {function} compare - Comparison function.\n * @param  {array}    heap    - Array storing the heap's data.\n * @return {array}\n */\nfunction consume(compare, heap) {\n  var l = heap.length,\n      i = 0;\n\n  var array = new Array(l);\n\n  while (i < l)\n    array[i++] = pop(compare, heap);\n\n  return array;\n}\n\n/**\n * Function used to retrieve the n smallest items from the given iterable.\n *\n * @param {function} compare  - Comparison function.\n * @param {number}   n        - Number of top items to retrieve.\n * @param {any}      iterable - Arbitrary iterable.\n * @param {array}\n */\nfunction nsmallest(compare, n, iterable) {\n  if (arguments.length === 2) {\n    iterable = n;\n    n = compare;\n    compare = DEFAULT_COMPARATOR;\n  }\n\n  var reverseCompare = reverseComparator(compare);\n\n  var i, l, v;\n\n  var min = Infinity;\n\n  var result;\n\n  // If n is equal to 1, it's just a matter of finding the minimum\n  if (n === 1) {\n    if (iterables.isArrayLike(iterable)) {\n      for (i = 0, l = iterable.length; i < l; i++) {\n        v = iterable[i];\n\n        if (min === Infinity || compare(v, min) < 0)\n          min = v;\n      }\n\n      result = new iterable.constructor(1);\n      result[0] = min;\n\n      return result;\n    }\n\n    forEach(iterable, function(value) {\n      if (min === Infinity || compare(value, min) < 0)\n        min = value;\n    });\n\n    return [min];\n  }\n\n  if (iterables.isArrayLike(iterable)) {\n\n    // If n > iterable length, we just clone and sort\n    if (n >= iterable.length)\n      return iterable.slice().sort(compare);\n\n    result = iterable.slice(0, n);\n    heapify(reverseCompare, result);\n\n    for (i = n, l = iterable.length; i < l; i++)\n      if (reverseCompare(iterable[i], result[0]) > 0)\n        replace(reverseCompare, result, iterable[i]);\n\n    // NOTE: if n is over some number, it becomes faster to consume the heap\n    return result.sort(compare);\n  }\n\n  // Correct for size\n  var size = iterables.guessLength(iterable);\n\n  if (size !== null && size < n)\n    n = size;\n\n  result = new Array(n);\n  i = 0;\n\n  forEach(iterable, function(value) {\n    if (i < n) {\n      result[i] = value;\n    }\n    else {\n      if (i === n)\n        heapify(reverseCompare, result);\n\n      if (reverseCompare(value, result[0]) > 0)\n        replace(reverseCompare, result, value);\n    }\n\n    i++;\n  });\n\n  if (result.length > i)\n    result.length = i;\n\n  // NOTE: if n is over some number, it becomes faster to consume the heap\n  return result.sort(compare);\n}\n\n/**\n * Function used to retrieve the n largest items from the given iterable.\n *\n * @param {function} compare  - Comparison function.\n * @param {number}   n        - Number of top items to retrieve.\n * @param {any}      iterable - Arbitrary iterable.\n * @param {array}\n */\nfunction nlargest(compare, n, iterable) {\n  if (arguments.length === 2) {\n    iterable = n;\n    n = compare;\n    compare = DEFAULT_COMPARATOR;\n  }\n\n  var reverseCompare = reverseComparator(compare);\n\n  var i, l, v;\n\n  var max = -Infinity;\n\n  var result;\n\n  // If n is equal to 1, it's just a matter of finding the maximum\n  if (n === 1) {\n    if (iterables.isArrayLike(iterable)) {\n      for (i = 0, l = iterable.length; i < l; i++) {\n        v = iterable[i];\n\n        if (max === -Infinity || compare(v, max) > 0)\n          max = v;\n      }\n\n      result = new iterable.constructor(1);\n      result[0] = max;\n\n      return result;\n    }\n\n    forEach(iterable, function(value) {\n      if (max === -Infinity || compare(value, max) > 0)\n        max = value;\n    });\n\n    return [max];\n  }\n\n  if (iterables.isArrayLike(iterable)) {\n\n    // If n > iterable length, we just clone and sort\n    if (n >= iterable.length)\n      return iterable.slice().sort(reverseCompare);\n\n    result = iterable.slice(0, n);\n    heapify(compare, result);\n\n    for (i = n, l = iterable.length; i < l; i++)\n      if (compare(iterable[i], result[0]) > 0)\n        replace(compare, result, iterable[i]);\n\n    // NOTE: if n is over some number, it becomes faster to consume the heap\n    return result.sort(reverseCompare);\n  }\n\n  // Correct for size\n  var size = iterables.guessLength(iterable);\n\n  if (size !== null && size < n)\n    n = size;\n\n  result = new Array(n);\n  i = 0;\n\n  forEach(iterable, function(value) {\n    if (i < n) {\n      result[i] = value;\n    }\n    else {\n      if (i === n)\n        heapify(compare, result);\n\n      if (compare(value, result[0]) > 0)\n        replace(compare, result, value);\n    }\n\n    i++;\n  });\n\n  if (result.length > i)\n    result.length = i;\n\n  // NOTE: if n is over some number, it becomes faster to consume the heap\n  return result.sort(reverseCompare);\n}\n\n/**\n * Binary Minimum Heap.\n *\n * @constructor\n * @param {function} comparator - Comparator function to use.\n */\nfunction Heap(comparator) {\n  this.clear();\n  this.comparator = comparator || DEFAULT_COMPARATOR;\n\n  if (typeof this.comparator !== 'function')\n    throw new Error('mnemonist/Heap.constructor: given comparator should be a function.');\n}\n\n/**\n * Method used to clear the heap.\n *\n * @return {undefined}\n */\nHeap.prototype.clear = function() {\n\n  // Properties\n  this.items = [];\n  this.size = 0;\n};\n\n/**\n * Method used to push an item into the heap.\n *\n * @param  {any}    item - Item to push.\n * @return {number}\n */\nHeap.prototype.push = function(item) {\n  push(this.comparator, this.items, item);\n  return ++this.size;\n};\n\n/**\n * Method used to retrieve the \"first\" item of the heap.\n *\n * @return {any}\n */\nHeap.prototype.peek = function() {\n  return this.items[0];\n};\n\n/**\n * Method used to retrieve & remove the \"first\" item of the heap.\n *\n * @return {any}\n */\nHeap.prototype.pop = function() {\n  if (this.size !== 0)\n    this.size--;\n\n  return pop(this.comparator, this.items);\n};\n\n/**\n * Method used to pop the heap, then push an item and return the popped\n * item.\n *\n * @param  {any} item - Item to push into the heap.\n * @return {any}\n */\nHeap.prototype.replace = function(item) {\n  return replace(this.comparator, this.items, item);\n};\n\n/**\n * Method used to push the heap, the pop it and return the pooped item.\n *\n * @param  {any} item - Item to push into the heap.\n * @return {any}\n */\nHeap.prototype.pushpop = function(item) {\n  return pushpop(this.comparator, this.items, item);\n};\n\n/**\n * Method used to consume the heap fully and return its items as a sorted array.\n *\n * @return {array}\n */\nHeap.prototype.consume = function() {\n  this.size = 0;\n  return consume(this.comparator, this.items);\n};\n\n/**\n * Method used to convert the heap to an array. Note that it basically clone\n * the heap and consumes it completely. This is hardly performant.\n *\n * @return {array}\n */\nHeap.prototype.toArray = function() {\n  return consume(this.comparator, this.items.slice());\n};\n\n/**\n * Convenience known methods.\n */\nHeap.prototype.inspect = function() {\n  var proxy = this.toArray();\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(proxy, 'constructor', {\n    value: Heap,\n    enumerable: false\n  });\n\n  return proxy;\n};\n\nif (typeof Symbol !== 'undefined')\n  Heap.prototype[Symbol.for('nodejs.util.inspect.custom')] = Heap.prototype.inspect;\n\n/**\n * Binary Maximum Heap.\n *\n * @constructor\n * @param {function} comparator - Comparator function to use.\n */\nfunction MaxHeap(comparator) {\n  this.clear();\n  this.comparator = comparator || DEFAULT_COMPARATOR;\n\n  if (typeof this.comparator !== 'function')\n    throw new Error('mnemonist/MaxHeap.constructor: given comparator should be a function.');\n\n  this.comparator = reverseComparator(this.comparator);\n}\n\nMaxHeap.prototype = Heap.prototype;\n\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a heap.\n *\n * @param  {Iterable} iterable   - Target iterable.\n * @param  {function} comparator - Custom comparator function.\n * @return {Heap}\n */\nHeap.from = function(iterable, comparator) {\n  var heap = new Heap(comparator);\n\n  var items;\n\n  // If iterable is an array, we can be clever about it\n  if (iterables.isArrayLike(iterable))\n    items = iterable.slice();\n  else\n    items = iterables.toArray(iterable);\n\n  heapify(heap.comparator, items);\n  heap.items = items;\n  heap.size = items.length;\n\n  return heap;\n};\n\nMaxHeap.from = function(iterable, comparator) {\n  var heap = new MaxHeap(comparator);\n\n  var items;\n\n  // If iterable is an array, we can be clever about it\n  if (iterables.isArrayLike(iterable))\n    items = iterable.slice();\n  else\n    items = iterables.toArray(iterable);\n\n  heapify(heap.comparator, items);\n  heap.items = items;\n  heap.size = items.length;\n\n  return heap;\n};\n\n/**\n * Exporting.\n */\nHeap.siftUp = siftUp;\nHeap.siftDown = siftDown;\nHeap.push = push;\nHeap.pop = pop;\nHeap.replace = replace;\nHeap.pushpop = pushpop;\nHeap.heapify = heapify;\nHeap.consume = consume;\n\nHeap.nsmallest = nsmallest;\nHeap.nlargest = nlargest;\n\nHeap.MinHeap = Heap;\nHeap.MaxHeap = MaxHeap;\n\nmodule.exports = Heap;\n","/**\n * Mnemonist Library Endpoint\n * ===========================\n *\n * Exporting every data structure through a unified endpoint. Consumers\n * of this library should prefer the modular access though.\n */\nvar Heap = require('./heap.js'),\n    FibonacciHeap = require('./fibonacci-heap.js'),\n    SuffixArray = require('./suffix-array.js');\n\nmodule.exports = {\n  BiMap: require('./bi-map.js'),\n  BitSet: require('./bit-set.js'),\n  BitVector: require('./bit-vector.js'),\n  BloomFilter: require('./bloom-filter.js'),\n  BKTree: require('./bk-tree.js'),\n  CircularBuffer: require('./circular-buffer.js'),\n  DefaultMap: require('./default-map.js'),\n  DefaultWeakMap: require('./default-weak-map.js'),\n  FixedDeque: require('./fixed-deque.js'),\n  StaticDisjointSet: require('./static-disjoint-set.js'),\n  FibonacciHeap: FibonacciHeap,\n  MinFibonacciHeap: FibonacciHeap.MinFibonacciHeap,\n  MaxFibonacciHeap: FibonacciHeap.MaxFibonacciHeap,\n  FixedReverseHeap: require('./fixed-reverse-heap.js'),\n  FuzzyMap: require('./fuzzy-map.js'),\n  FuzzyMultiMap: require('./fuzzy-multi-map.js'),\n  HashedArrayTree: require('./hashed-array-tree.js'),\n  Heap: Heap,\n  MinHeap: Heap.MinHeap,\n  MaxHeap: Heap.MaxHeap,\n  StaticIntervalTree: require('./static-interval-tree.js'),\n  InvertedIndex: require('./inverted-index.js'),\n  KDTree: require('./kd-tree.js'),\n  LinkedList: require('./linked-list.js'),\n  LRUCache: require('./lru-cache.js'),\n  LRUCacheWithDelete: require('./lru-cache-with-delete.js'),\n  LRUMap: require('./lru-map.js'),\n  LRUMapWithDelete: require('./lru-map-with-delete.js'),\n  MultiMap: require('./multi-map.js'),\n  MultiSet: require('./multi-set.js'),\n  PassjoinIndex: require('./passjoin-index.js'),\n  Queue: require('./queue.js'),\n  FixedStack: require('./fixed-stack.js'),\n  Stack: require('./stack.js'),\n  SuffixArray: SuffixArray,\n  GeneralizedSuffixArray: SuffixArray.GeneralizedSuffixArray,\n  Set: require('./set.js'),\n  SparseQueueSet: require('./sparse-queue-set.js'),\n  SparseMap: require('./sparse-map.js'),\n  SparseSet: require('./sparse-set.js'),\n  SymSpell: require('./symspell.js'),\n  Trie: require('./trie.js'),\n  TrieMap: require('./trie-map.js'),\n  Vector: require('./vector.js'),\n  VPTree: require('./vp-tree.js')\n};\n","/**\n * Mnemonist Inverted Index\n * =========================\n *\n * JavaScript implementation of an inverted index.\n */\nvar Iterator = require('obliterator/iterator'),\n    forEach = require('obliterator/foreach'),\n    helpers = require('./utils/merge.js');\n\nfunction identity(x) {\n  return x;\n}\n\n/**\n * InvertedIndex.\n *\n * @constructor\n * @param {function} tokenizer - Tokenizer function.\n */\nfunction InvertedIndex(descriptor) {\n  this.clear();\n\n  if (Array.isArray(descriptor)) {\n    this.documentTokenizer = descriptor[0];\n    this.queryTokenizer = descriptor[1];\n  }\n  else {\n    this.documentTokenizer = descriptor;\n    this.queryTokenizer = descriptor;\n  }\n\n  if (!this.documentTokenizer)\n    this.documentTokenizer = identity;\n  if (!this.queryTokenizer)\n    this.queryTokenizer = identity;\n\n  if (typeof this.documentTokenizer !== 'function')\n    throw new Error('mnemonist/InvertedIndex.constructor: document tokenizer is not a function.');\n\n  if (typeof this.queryTokenizer !== 'function')\n    throw new Error('mnemonist/InvertedIndex.constructor: query tokenizer is not a function.');\n}\n\n/**\n * Method used to clear the InvertedIndex.\n *\n * @return {undefined}\n */\nInvertedIndex.prototype.clear = function() {\n\n  // Properties\n  this.items = [];\n  this.mapping = new Map();\n  this.size = 0;\n  this.dimension = 0;\n};\n\n/**\n * Method used to add a document to the index.\n *\n * @param  {any} doc - Item to add.\n * @return {InvertedIndex}\n */\nInvertedIndex.prototype.add = function(doc) {\n\n  // Increasing size\n  this.size++;\n\n  // Storing document\n  var key = this.items.length;\n  this.items.push(doc);\n\n  // Tokenizing the document\n  var tokens = this.documentTokenizer(doc);\n\n  if (!Array.isArray(tokens))\n    throw new Error('mnemonist/InvertedIndex.add: tokenizer function should return an array of tokens.');\n\n  // Indexing\n  var done = new Set(),\n      token,\n      container;\n\n  for (var i = 0, l = tokens.length; i < l; i++) {\n    token = tokens[i];\n\n    if (done.has(token))\n      continue;\n\n    done.add(token);\n\n    container = this.mapping.get(token);\n\n    if (!container) {\n      container = [];\n      this.mapping.set(token, container);\n    }\n\n    container.push(key);\n  }\n\n  this.dimension = this.mapping.size;\n\n  return this;\n};\n\n/**\n * Method used to query the index in a AND fashion.\n *\n * @param  {any} query - Query\n * @return {Set}       - Intersection of documents matching the query.\n */\nInvertedIndex.prototype.get = function(query) {\n\n  // Early termination\n  if (!this.size)\n    return [];\n\n  // First we need to tokenize the query\n  var tokens = this.queryTokenizer(query);\n\n  if (!Array.isArray(tokens))\n    throw new Error('mnemonist/InvertedIndex.query: tokenizer function should return an array of tokens.');\n\n  if (!tokens.length)\n    return [];\n\n  var results = this.mapping.get(tokens[0]),\n      c,\n      i,\n      l;\n\n  if (typeof results === 'undefined' || results.length === 0)\n    return [];\n\n  if (tokens.length > 1) {\n    for (i = 1, l = tokens.length; i < l; i++) {\n      c = this.mapping.get(tokens[i]);\n\n      if (typeof c === 'undefined' || c.length === 0)\n        return [];\n\n      results = helpers.intersectionUniqueArrays(results, c);\n    }\n  }\n\n  var docs = new Array(results.length);\n\n  for (i = 0, l = docs.length; i < l; i++)\n    docs[i] = this.items[results[i]];\n\n  return docs;\n};\n\n/**\n * Method used to iterate over each of the documents.\n *\n * @param  {function}  callback - Function to call for each item.\n * @param  {object}    scope    - Optional scope.\n * @return {undefined}\n */\nInvertedIndex.prototype.forEach = function(callback, scope) {\n  scope = arguments.length > 1 ? scope : this;\n\n  for (var i = 0, l = this.documents.length; i < l; i++)\n    callback.call(scope, this.documents[i], i, this);\n};\n\n/**\n * Method returning an iterator over the index's documents.\n *\n * @return {Iterator}\n */\nInvertedIndex.prototype.documents = function() {\n  var documents = this.items,\n      l = documents.length,\n      i = 0;\n\n  return new Iterator(function() {\n    if (i >= l)\n      return {\n        done: true\n      };\n\n      var value = documents[i++];\n\n      return {\n        value: value,\n        done: false\n      };\n  });\n};\n\n/**\n * Method returning an iterator over the index's tokens.\n *\n * @return {Iterator}\n */\nInvertedIndex.prototype.tokens = function() {\n  return this.mapping.keys();\n};\n\n/**\n * Attaching the #.values method to Symbol.iterator if possible.\n */\nif (typeof Symbol !== 'undefined')\n  InvertedIndex.prototype[Symbol.iterator] = InvertedIndex.prototype.documents;\n\n/**\n * Convenience known methods.\n */\nInvertedIndex.prototype.inspect = function() {\n  var array = this.items.slice();\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(array, 'constructor', {\n    value: InvertedIndex,\n    enumerable: false\n  });\n\n  return array;\n};\n\nif (typeof Symbol !== 'undefined')\n  InvertedIndex.prototype[Symbol.for('nodejs.util.inspect.custom')] = InvertedIndex.prototype.inspect;\n\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a InvertedIndex.\n *\n * @param  {Iterable} iterable - Target iterable.\n * @param  {function} tokenizer - Tokenizer function.\n * @return {InvertedIndex}\n */\nInvertedIndex.from = function(iterable, descriptor) {\n  var index = new InvertedIndex(descriptor);\n\n  forEach(iterable, function(doc) {\n    index.add(doc);\n  });\n\n  return index;\n};\n\n/**\n * Exporting.\n */\nmodule.exports = InvertedIndex;\n","/**\n * Mnemonist KDTree\n * =================\n *\n * Low-level JavaScript implementation of a k-dimensional tree.\n */\nvar iterables = require('./utils/iterables.js');\nvar typed = require('./utils/typed-arrays.js');\nvar createTupleComparator = require('./utils/comparators.js').createTupleComparator;\nvar FixedReverseHeap = require('./fixed-reverse-heap.js');\nvar inplaceQuickSortIndices = require('./sort/quick.js').inplaceQuickSortIndices;\n\n/**\n * Helper function used to compute the squared distance between a query point\n * and an indexed points whose values are stored in a tree's axes.\n *\n * Note that squared distance is used instead of euclidean to avoid\n * costly sqrt computations.\n *\n * @param  {number} dimensions - Number of dimensions.\n * @param  {array}  axes       - Axes data.\n * @param  {number} pivot      - Pivot.\n * @param  {array}  point      - Query point.\n * @return {number}\n */\nfunction squaredDistanceAxes(dimensions, axes, pivot, b) {\n  var d;\n\n  var dist = 0,\n      step;\n\n  for (d = 0; d < dimensions; d++) {\n    step = axes[d][pivot] - b[d];\n    dist += step * step;\n  }\n\n  return dist;\n}\n\n/**\n * Helper function used to reshape input data into low-level axes data.\n *\n * @param  {number} dimensions - Number of dimensions.\n * @param  {array}  data       - Data in the shape [label, [x, y, z...]]\n * @return {object}\n */\nfunction reshapeIntoAxes(dimensions, data) {\n  var l = data.length;\n\n  var axes = new Array(dimensions),\n      labels = new Array(l),\n      axis;\n\n  var PointerArray = typed.getPointerArray(l);\n\n  var ids = new PointerArray(l);\n\n  var d, i, row;\n\n  var f = true;\n\n  for (d = 0; d < dimensions; d++) {\n    axis = new Float64Array(l);\n\n    for (i = 0; i < l; i++) {\n      row = data[i];\n      axis[i] = row[1][d];\n\n      if (f) {\n        labels[i] = row[0];\n        ids[i] = i;\n      }\n    }\n\n    f = false;\n    axes[d] = axis;\n  }\n\n  return {axes: axes, ids: ids, labels: labels};\n}\n\n/**\n * Helper function used to build a kd-tree from axes data.\n *\n * @param  {number} dimensions - Number of dimensions.\n * @param  {array}  axes       - Axes.\n * @param  {array}  ids        - Indices to sort.\n * @param  {array}  labels     - Point labels.\n * @return {object}\n */\nfunction buildTree(dimensions, axes, ids, labels) {\n  var l = labels.length;\n\n  // NOTE: +1 because we need to keep 0 as null pointer\n  var PointerArray = typed.getPointerArray(l + 1);\n\n  // Building the tree\n  var pivots = new PointerArray(l),\n      lefts = new PointerArray(l),\n      rights = new PointerArray(l);\n\n  var stack = [[0, 0, ids.length, -1, 0]],\n      step,\n      parent,\n      direction,\n      median,\n      pivot,\n      lo,\n      hi;\n\n  var d, i = 0;\n\n  while (stack.length !== 0) {\n    step = stack.pop();\n\n    d = step[0];\n    lo = step[1];\n    hi = step[2];\n    parent = step[3];\n    direction = step[4];\n\n    inplaceQuickSortIndices(axes[d], ids, lo, hi);\n\n    l = hi - lo;\n    median = lo + (l >>> 1); // Fancy floor(l / 2)\n    pivot = ids[median];\n    pivots[i] = pivot;\n\n    if (parent > -1) {\n      if (direction === 0)\n        lefts[parent] = i + 1;\n      else\n        rights[parent] = i + 1;\n    }\n\n    d = (d + 1) % dimensions;\n\n    // Right\n    if (median !== lo && median !== hi - 1) {\n      stack.push([d, median + 1, hi, i, 1]);\n    }\n\n    // Left\n    if (median !== lo) {\n      stack.push([d, lo, median, i, 0]);\n    }\n\n    i++;\n  }\n\n  return {\n    axes: axes,\n    labels: labels,\n    pivots: pivots,\n    lefts: lefts,\n    rights: rights\n  };\n}\n\n/**\n * KDTree.\n *\n * @constructor\n */\nfunction KDTree(dimensions, build) {\n  this.dimensions = dimensions;\n  this.visited = 0;\n\n  this.axes = build.axes;\n  this.labels = build.labels;\n\n  this.pivots = build.pivots;\n  this.lefts = build.lefts;\n  this.rights = build.rights;\n\n  this.size = this.labels.length;\n}\n\n/**\n * Method returning the query's nearest neighbor.\n *\n * @param  {array}  query - Query point.\n * @return {any}\n */\nKDTree.prototype.nearestNeighbor = function(query) {\n  var bestDistance = Infinity,\n      best = null;\n\n  var dimensions = this.dimensions,\n      axes = this.axes,\n      pivots = this.pivots,\n      lefts = this.lefts,\n      rights = this.rights;\n\n  var visited = 0;\n\n  function recurse(d, node) {\n    visited++;\n\n    var left = lefts[node],\n        right = rights[node],\n        pivot = pivots[node];\n\n    var dist = squaredDistanceAxes(\n      dimensions,\n      axes,\n      pivot,\n      query\n    );\n\n    if (dist < bestDistance) {\n      best = pivot;\n      bestDistance = dist;\n\n      if (dist === 0)\n        return;\n    }\n\n    var dx = axes[d][pivot] - query[d];\n\n    d = (d + 1) % dimensions;\n\n    // Going the correct way?\n    if (dx > 0) {\n      if (left !== 0)\n        recurse(d, left - 1);\n    }\n    else {\n      if (right !== 0)\n        recurse(d, right - 1);\n    }\n\n    // Going the other way?\n    if (dx * dx < bestDistance) {\n      if (dx > 0) {\n        if (right !== 0)\n          recurse(d, right - 1);\n      }\n      else {\n        if (left !== 0)\n          recurse(d, left - 1);\n      }\n    }\n  }\n\n  recurse(0, 0);\n\n  this.visited = visited;\n  return this.labels[best];\n};\n\nvar KNN_HEAP_COMPARATOR_3 = createTupleComparator(3);\nvar KNN_HEAP_COMPARATOR_2 = createTupleComparator(2);\n\n/**\n * Method returning the query's k nearest neighbors.\n *\n * @param  {number} k     - Number of nearest neighbor to retrieve.\n * @param  {array}  query - Query point.\n * @return {array}\n */\n\n// TODO: can do better by improving upon static-kdtree here\nKDTree.prototype.kNearestNeighbors = function(k, query) {\n  if (k <= 0)\n    throw new Error('mnemonist/kd-tree.kNearestNeighbors: k should be a positive number.');\n\n  k = Math.min(k, this.size);\n\n  if (k === 1)\n    return [this.nearestNeighbor(query)];\n\n  var heap = new FixedReverseHeap(Array, KNN_HEAP_COMPARATOR_3, k);\n\n  var dimensions = this.dimensions,\n      axes = this.axes,\n      pivots = this.pivots,\n      lefts = this.lefts,\n      rights = this.rights;\n\n  var visited = 0;\n\n  function recurse(d, node) {\n    var left = lefts[node],\n        right = rights[node],\n        pivot = pivots[node];\n\n    var dist = squaredDistanceAxes(\n      dimensions,\n      axes,\n      pivot,\n      query\n    );\n\n    heap.push([dist, visited++, pivot]);\n\n    var point = query[d],\n        split = axes[d][pivot],\n        dx = point - split;\n\n    d = (d + 1) % dimensions;\n\n    // Going the correct way?\n    if (point < split) {\n      if (left !== 0) {\n        recurse(d, left - 1);\n      }\n    }\n    else {\n      if (right !== 0) {\n        recurse(d, right - 1);\n      }\n    }\n\n    // Going the other way?\n    if (dx * dx < heap.peek()[0] || heap.size < k) {\n      if (point < split) {\n        if (right !== 0) {\n          recurse(d, right - 1);\n        }\n      }\n      else {\n        if (left !== 0) {\n          recurse(d, left - 1);\n        }\n      }\n    }\n  }\n\n  recurse(0, 0);\n\n  this.visited = visited;\n\n  var best = heap.consume();\n\n  for (var i = 0; i < best.length; i++)\n    best[i] = this.labels[best[i][2]];\n\n  return best;\n};\n\n/**\n * Method returning the query's k nearest neighbors by linear search.\n *\n * @param  {number} k     - Number of nearest neighbor to retrieve.\n * @param  {array}  query - Query point.\n * @return {array}\n */\nKDTree.prototype.linearKNearestNeighbors = function(k, query) {\n  if (k <= 0)\n    throw new Error('mnemonist/kd-tree.kNearestNeighbors: k should be a positive number.');\n\n  k = Math.min(k, this.size);\n\n  var heap = new FixedReverseHeap(Array, KNN_HEAP_COMPARATOR_2, k);\n\n  var i, l, dist;\n\n  for (i = 0, l = this.size; i < l; i++) {\n    dist = squaredDistanceAxes(\n      this.dimensions,\n      this.axes,\n      this.pivots[i],\n      query\n    );\n\n    heap.push([dist, i]);\n  }\n\n  var best = heap.consume();\n\n  for (i = 0; i < best.length; i++)\n    best[i] = this.labels[this.pivots[best[i][1]]];\n\n  return best;\n};\n\n/**\n * Convenience known methods.\n */\nKDTree.prototype.inspect = function() {\n  var dummy = new Map();\n\n  dummy.dimensions = this.dimensions;\n\n  Object.defineProperty(dummy, 'constructor', {\n    value: KDTree,\n    enumerable: false\n  });\n\n  var i, j, point;\n\n  for (i = 0; i < this.size; i++) {\n    point = new Array(this.dimensions);\n\n    for (j = 0; j < this.dimensions; j++)\n      point[j] = this.axes[j][i];\n\n    dummy.set(this.labels[i], point);\n  }\n\n  return dummy;\n};\n\nif (typeof Symbol !== 'undefined')\n  KDTree.prototype[Symbol.for('nodejs.util.inspect.custom')] = KDTree.prototype.inspect;\n\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a structure.\n *\n * @param  {Iterable} iterable   - Target iterable.\n * @param  {number}   dimensions - Space dimensions.\n * @return {KDTree}\n */\nKDTree.from = function(iterable, dimensions) {\n  var data = iterables.toArray(iterable);\n\n  var reshaped = reshapeIntoAxes(dimensions, data);\n\n  var result = buildTree(dimensions, reshaped.axes, reshaped.ids, reshaped.labels);\n\n  return new KDTree(dimensions, result);\n};\n\n/**\n * Static @.from function building a KDTree from given axes.\n *\n * @param  {Iterable} iterable   - Target iterable.\n * @param  {number}   dimensions - Space dimensions.\n * @return {KDTree}\n */\nKDTree.fromAxes = function(axes, labels) {\n  if (!labels)\n    labels = typed.indices(axes[0].length);\n\n  var dimensions = axes.length;\n\n  var result = buildTree(axes.length, axes, typed.indices(labels.length), labels);\n\n  return new KDTree(dimensions, result);\n};\n\n/**\n * Exporting.\n */\nmodule.exports = KDTree;\n","/**\n * Mnemonist Linked List\n * ======================\n *\n * Singly linked list implementation. Uses raw JavaScript objects as nodes\n * as benchmarks proved it was the fastest thing to do.\n */\nvar Iterator = require('obliterator/iterator'),\n    forEach = require('obliterator/foreach');\n\n/**\n * Linked List.\n *\n * @constructor\n */\nfunction LinkedList() {\n  this.clear();\n}\n\n/**\n * Method used to clear the list.\n *\n * @return {undefined}\n */\nLinkedList.prototype.clear = function() {\n\n  // Properties\n  this.head = null;\n  this.tail = null;\n  this.size = 0;\n};\n\n/**\n * Method used to get the first item of the list.\n *\n * @return {any}\n */\nLinkedList.prototype.first = function() {\n  return this.head ? this.head.item : undefined;\n};\nLinkedList.prototype.peek = LinkedList.prototype.first;\n\n/**\n * Method used to get the last item of the list.\n *\n * @return {any}\n */\nLinkedList.prototype.last = function() {\n  return this.tail ? this.tail.item : undefined;\n};\n\n/**\n * Method used to add an item at the end of the list.\n *\n * @param  {any}    item - The item to add.\n * @return {number}\n */\nLinkedList.prototype.push = function(item) {\n  var node = {item: item, next: null};\n\n  if (!this.head) {\n    this.head = node;\n    this.tail = node;\n  }\n  else {\n    this.tail.next = node;\n    this.tail = node;\n  }\n\n  this.size++;\n\n  return this.size;\n};\n\n/**\n * Method used to add an item at the beginning of the list.\n *\n * @param  {any}    item - The item to add.\n * @return {number}\n */\nLinkedList.prototype.unshift = function(item) {\n  var node = {item: item, next: null};\n\n  if (!this.head) {\n    this.head = node;\n    this.tail = node;\n  }\n  else {\n    if (!this.head.next)\n      this.tail = this.head;\n    node.next = this.head;\n    this.head = node;\n  }\n\n  this.size++;\n\n  return this.size;\n};\n\n/**\n * Method used to retrieve & remove the first item of the list.\n *\n * @return {any}\n */\nLinkedList.prototype.shift = function() {\n  if (!this.size)\n    return undefined;\n\n  var node = this.head;\n\n  this.head = node.next;\n  this.size--;\n\n  return node.item;\n};\n\n/**\n * Method used to iterate over the list.\n *\n * @param  {function}  callback - Function to call for each item.\n * @param  {object}    scope    - Optional scope.\n * @return {undefined}\n */\nLinkedList.prototype.forEach = function(callback, scope) {\n  if (!this.size)\n    return;\n\n  scope = arguments.length > 1 ? scope : this;\n\n  var n = this.head,\n      i = 0;\n\n  while (n) {\n    callback.call(scope, n.item, i, this);\n    n = n.next;\n    i++;\n  }\n};\n\n/**\n * Method used to convert the list into an array.\n *\n * @return {array}\n */\nLinkedList.prototype.toArray = function() {\n  if (!this.size)\n    return [];\n\n  var array = new Array(this.size);\n\n  for (var i = 0, l = this.size, n = this.head; i < l; i++) {\n    array[i] = n.item;\n    n = n.next;\n  }\n\n  return array;\n};\n\n/**\n * Method used to create an iterator over a list's values.\n *\n * @return {Iterator}\n */\nLinkedList.prototype.values = function() {\n  var n = this.head;\n\n  return new Iterator(function() {\n    if (!n)\n      return {\n        done: true\n      };\n\n    var value = n.item;\n    n = n.next;\n\n    return {\n      value: value,\n      done: false\n    };\n  });\n};\n\n/**\n * Method used to create an iterator over a list's entries.\n *\n * @return {Iterator}\n */\nLinkedList.prototype.entries = function() {\n  var n = this.head,\n      i = 0;\n\n  return new Iterator(function() {\n    if (!n)\n      return {\n        done: true\n      };\n\n    var value = n.item;\n    n = n.next;\n    i++;\n\n    return {\n      value: [i - 1, value],\n      done: false\n    };\n  });\n};\n\n/**\n * Attaching the #.values method to Symbol.iterator if possible.\n */\nif (typeof Symbol !== 'undefined')\n  LinkedList.prototype[Symbol.iterator] = LinkedList.prototype.values;\n\n/**\n * Convenience known methods.\n */\nLinkedList.prototype.toString = function() {\n  return this.toArray().join(',');\n};\n\nLinkedList.prototype.toJSON = function() {\n  return this.toArray();\n};\n\nLinkedList.prototype.inspect = function() {\n  var array = this.toArray();\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(array, 'constructor', {\n    value: LinkedList,\n    enumerable: false\n  });\n\n  return array;\n};\n\nif (typeof Symbol !== 'undefined')\n  LinkedList.prototype[Symbol.for('nodejs.util.inspect.custom')] = LinkedList.prototype.inspect;\n\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a list.\n *\n * @param  {Iterable} iterable   - Target iterable.\n * @return {LinkedList}\n */\nLinkedList.from = function(iterable) {\n  var list = new LinkedList();\n\n  forEach(iterable, function(value) {\n    list.push(value);\n  });\n\n  return list;\n};\n\n/**\n * Exporting.\n */\nmodule.exports = LinkedList;\n","/**\n * Mnemonist LRUCacheWithDelete\n * =============================\n *\n * An extension of LRUCache with delete functionality.\n */\n\nvar LRUCache = require('./lru-cache.js'),\n    forEach = require('obliterator/foreach'),\n    typed = require('./utils/typed-arrays.js'),\n    iterables = require('./utils/iterables.js');\n\n// The only complication with deleting items is that the LRU's\n// performance depends on having a fixed-size list of pointers; the\n// doubly-linked-list is happy to expand and contract.\n//\n// On delete, we record the position of the former item's pointer in a\n// list of \"holes\" in the pointer array. On insert, if there is a hole\n// the new pointer slots in to fill the hole; otherwise, it is\n// appended as usual. (Note: we are only talking here about the\n// internal pointer list. setting or getting an item promotes it\n// to the top of the LRU ranking no matter what came before)\n\nfunction LRUCacheWithDelete(Keys, Values, capacity) {\n  if (arguments.length < 2) {\n    LRUCache.call(this, Keys);\n  }\n  else {\n    LRUCache.call(this, Keys, Values, capacity);\n  }\n  var PointerArray = typed.getPointerArray(this.capacity);\n  this.deleted = new PointerArray(this.capacity);\n  this.deletedSize = 0;\n}\n\nfor (var k in LRUCache.prototype)\n  LRUCacheWithDelete.prototype[k] = LRUCache.prototype[k];\nif (typeof Symbol !== 'undefined')\n  LRUCacheWithDelete.prototype[Symbol.iterator] = LRUCache.prototype[Symbol.iterator];\n\n/**\n * Method used to clear the structure.\n *\n * @return {undefined}\n */\nLRUCacheWithDelete.prototype.clear = function() {\n  LRUCache.prototype.clear.call(this);\n  this.deletedSize = 0;\n};\n\n/**\n * Method used to set the value for the given key in the cache.\n *\n * @param  {any} key   - Key.\n * @param  {any} value - Value.\n * @return {undefined}\n */\nLRUCacheWithDelete.prototype.set = function(key, value) {\n\n  var pointer = this.items[key];\n\n  // The key already exists, we just need to update the value and splay on top\n  if (typeof pointer !== 'undefined') {\n    this.splayOnTop(pointer);\n    this.V[pointer] = value;\n\n    return;\n  }\n\n  // The cache is not yet full\n  if (this.size < this.capacity) {\n    if (this.deletedSize > 0) {\n      // If there is a \"hole\" in the pointer list, reuse it\n      pointer = this.deleted[--this.deletedSize];\n    }\n    else {\n      // otherwise append to the pointer list\n      pointer = this.size;\n    }\n    this.size++;\n  }\n\n  // Cache is full, we need to drop the last value\n  else {\n    pointer = this.tail;\n    this.tail = this.backward[pointer];\n    delete this.items[this.K[pointer]];\n  }\n\n  // Storing key & value\n  this.items[key] = pointer;\n  this.K[pointer] = key;\n  this.V[pointer] = value;\n\n  // Moving the item at the front of the list\n  this.forward[pointer] = this.head;\n  this.backward[this.head] = pointer;\n  this.head = pointer;\n};\n\n/**\n * Method used to set the value for the given key in the cache\n *\n * @param  {any} key   - Key.\n * @param  {any} value - Value.\n * @return {{evicted: boolean, key: any, value: any}} An object containing the\n * key and value of an item that was overwritten or evicted in the set\n * operation, as well as a boolean indicating whether it was evicted due to\n * limited capacity. Return value is null if nothing was evicted or overwritten\n * during the set operation.\n */\nLRUCacheWithDelete.prototype.setpop = function(key, value) {\n  var oldValue = null;\n  var oldKey = null;\n\n  var pointer = this.items[key];\n\n  // The key already exists, we just need to update the value and splay on top\n  if (typeof pointer !== 'undefined') {\n    this.splayOnTop(pointer);\n    oldValue = this.V[pointer];\n    this.V[pointer] = value;\n    return {evicted: false, key: key, value: oldValue};\n  }\n\n  // The cache is not yet full\n  if (this.size < this.capacity) {\n    if (this.deletedSize > 0) {\n      // If there is a \"hole\" in the pointer list, reuse it\n      pointer = this.deleted[--this.deletedSize];\n    }\n    else {\n      // otherwise append to the pointer list\n      pointer = this.size;\n    }\n    this.size++;\n  }\n\n  // Cache is full, we need to drop the last value\n  else {\n    pointer = this.tail;\n    this.tail = this.backward[pointer];\n    oldValue = this.V[pointer];\n    oldKey = this.K[pointer];\n    delete this.items[this.K[pointer]];\n  }\n\n  // Storing key & value\n  this.items[key] = pointer;\n  this.K[pointer] = key;\n  this.V[pointer] = value;\n\n  // Moving the item at the front of the list\n  this.forward[pointer] = this.head;\n  this.backward[this.head] = pointer;\n  this.head = pointer;\n\n  // Return object if eviction took place, otherwise return null\n  if (oldKey) {\n    return {evicted: true, key: oldKey, value: oldValue};\n  }\n  else {\n    return null;\n  }\n};\n\n/**\n * Method used to delete the entry for the given key in the cache.\n *\n * @param  {any} key   - Key.\n * @return {boolean}   - true if the item was present\n */\nLRUCacheWithDelete.prototype.delete = function(key) {\n\n  var pointer = this.items[key];\n\n  if (typeof pointer === 'undefined') {\n    return false;\n  }\n\n  delete this.items[key];\n\n  if (this.size === 1) {\n    this.size = 0;\n    this.head = 0;\n    this.tail = 0;\n    this.deletedSize = 0;\n    return true;\n  }\n\n  var previous = this.backward[pointer],\n      next = this.forward[pointer];\n\n  if (this.head === pointer) {\n    this.head = next;\n  }\n  if (this.tail === pointer) {\n    this.tail = previous;\n  }\n\n  this.forward[previous] = next;\n  this.backward[next] = previous;\n\n  this.size--;\n  this.deleted[this.deletedSize++] = pointer;\n\n  return true;\n};\n\n/**\n * Method used to remove and return the value for the given key in the cache.\n *\n * @param  {any} key                 - Key.\n * @param  {any} [missing=undefined] - Value to return if item is absent\n * @return {any} The value, if present; the missing indicator if absent\n */\nLRUCacheWithDelete.prototype.remove = function(key, missing = undefined) {\n\n  var pointer = this.items[key];\n\n  if (typeof pointer === 'undefined') {\n    return missing;\n  }\n\n  var dead = this.V[pointer];\n  delete this.items[key];\n\n  if (this.size === 1) {\n    this.size = 0;\n    this.head = 0;\n    this.tail = 0;\n    this.deletedSize = 0;\n    return dead;\n  }\n\n  var previous = this.backward[pointer],\n      next = this.forward[pointer];\n\n  if (this.head === pointer) {\n    this.head = next;\n  }\n  if (this.tail === pointer) {\n    this.tail = previous;\n  }\n\n  this.forward[previous] = next;\n  this.backward[next] = previous;\n\n  this.size--;\n  this.deleted[this.deletedSize++] = pointer;\n\n  return dead;\n};\n\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a structure.\n *\n * @param  {Iterable} iterable - Target iterable.\n * @param  {function} Keys     - Array class for storing keys.\n * @param  {function} Values   - Array class for storing values.\n * @param  {number}   capacity - Cache's capacity.\n * @return {LRUCacheWithDelete}\n */\nLRUCacheWithDelete.from = function(iterable, Keys, Values, capacity) {\n  if (arguments.length < 2) {\n    capacity = iterables.guessLength(iterable);\n\n    if (typeof capacity !== 'number')\n      throw new Error('mnemonist/lru-cache.from: could not guess iterable length. Please provide desired capacity as last argument.');\n  }\n  else if (arguments.length === 2) {\n    capacity = Keys;\n    Keys = null;\n    Values = null;\n  }\n\n  var cache = new LRUCacheWithDelete(Keys, Values, capacity);\n\n  forEach(iterable, function(value, key) {\n    cache.set(key, value);\n  });\n\n  return cache;\n};\n\nmodule.exports = LRUCacheWithDelete;\n","/**\n * Mnemonist LRUCache\n * ===================\n *\n * JavaScript implementation of the LRU Cache data structure. To save up\n * memory and allocations this implementation represents its underlying\n * doubly-linked list as static arrays and pointers. Thus, memory is allocated\n * only once at instantiation and JS objects are never created to serve as\n * pointers. This also means this implementation does not trigger too many\n * garbage collections.\n *\n * Note that to save up memory, a LRU Cache can be implemented using a singly\n * linked list by storing predecessors' pointers as hashmap values.\n * However, this means more hashmap lookups and would probably slow the whole\n * thing down. What's more, pointers are not the things taking most space in\n * memory.\n */\nvar Iterator = require('obliterator/iterator'),\n    forEach = require('obliterator/foreach'),\n    typed = require('./utils/typed-arrays.js'),\n    iterables = require('./utils/iterables.js');\n\n/**\n * LRUCache.\n *\n * @constructor\n * @param {function} Keys     - Array class for storing keys.\n * @param {function} Values   - Array class for storing values.\n * @param {number}   capacity - Desired capacity.\n */\nfunction LRUCache(Keys, Values, capacity) {\n  if (arguments.length < 2) {\n    capacity = Keys;\n    Keys = null;\n    Values = null;\n  }\n\n  this.capacity = capacity;\n\n  if (typeof this.capacity !== 'number' || this.capacity <= 0)\n    throw new Error('mnemonist/lru-cache: capacity should be positive number.');\n  else if (!isFinite(this.capacity) || Math.floor(this.capacity) !== this.capacity)\n    throw new Error('mnemonist/lru-cache: capacity should be a finite positive integer.');\n\n  var PointerArray = typed.getPointerArray(capacity);\n\n  this.forward = new PointerArray(capacity);\n  this.backward = new PointerArray(capacity);\n  this.K = typeof Keys === 'function' ? new Keys(capacity) : new Array(capacity);\n  this.V = typeof Values === 'function' ? new Values(capacity) : new Array(capacity);\n\n  // Properties\n  this.size = 0;\n  this.head = 0;\n  this.tail = 0;\n  this.items = {};\n}\n\n/**\n * Method used to clear the structure.\n *\n * @return {undefined}\n */\nLRUCache.prototype.clear = function() {\n  this.size = 0;\n  this.head = 0;\n  this.tail = 0;\n  this.items = {};\n};\n\n/**\n * Method used to splay a value on top.\n *\n * @param  {number}   pointer - Pointer of the value to splay on top.\n * @return {LRUCache}\n */\nLRUCache.prototype.splayOnTop = function(pointer) {\n  var oldHead = this.head;\n\n  if (this.head === pointer)\n    return this;\n\n  var previous = this.backward[pointer],\n      next = this.forward[pointer];\n\n  if (this.tail === pointer) {\n    this.tail = previous;\n  }\n  else {\n    this.backward[next] = previous;\n  }\n\n  this.forward[previous] = next;\n\n  this.backward[oldHead] = pointer;\n  this.head = pointer;\n  this.forward[pointer] = oldHead;\n\n  return this;\n};\n\n/**\n * Method used to set the value for the given key in the cache.\n *\n * @param  {any} key   - Key.\n * @param  {any} value - Value.\n * @return {undefined}\n */\nLRUCache.prototype.set = function(key, value) {\n\n  var pointer = this.items[key];\n\n  // The key already exists, we just need to update the value and splay on top\n  if (typeof pointer !== 'undefined') {\n    this.splayOnTop(pointer);\n    this.V[pointer] = value;\n\n    return;\n  }\n\n  // The cache is not yet full\n  if (this.size < this.capacity) {\n    pointer = this.size++;\n  }\n\n  // Cache is full, we need to drop the last value\n  else {\n    pointer = this.tail;\n    this.tail = this.backward[pointer];\n    delete this.items[this.K[pointer]];\n  }\n\n  // Storing key & value\n  this.items[key] = pointer;\n  this.K[pointer] = key;\n  this.V[pointer] = value;\n\n  // Moving the item at the front of the list\n  this.forward[pointer] = this.head;\n  this.backward[this.head] = pointer;\n  this.head = pointer;\n};\n\n/**\n * Method used to set the value for the given key in the cache\n *\n * @param  {any} key   - Key.\n * @param  {any} value - Value.\n * @return {{evicted: boolean, key: any, value: any}} An object containing the\n * key and value of an item that was overwritten or evicted in the set\n * operation, as well as a boolean indicating whether it was evicted due to\n * limited capacity. Return value is null if nothing was evicted or overwritten\n * during the set operation.\n */\nLRUCache.prototype.setpop = function(key, value) {\n  var oldValue = null;\n  var oldKey = null;\n\n  var pointer = this.items[key];\n\n  // The key already exists, we just need to update the value and splay on top\n  if (typeof pointer !== 'undefined') {\n    this.splayOnTop(pointer);\n    oldValue = this.V[pointer];\n    this.V[pointer] = value;\n    return {evicted: false, key: key, value: oldValue};\n  }\n\n  // The cache is not yet full\n  if (this.size < this.capacity) {\n    pointer = this.size++;\n  }\n\n  // Cache is full, we need to drop the last value\n  else {\n    pointer = this.tail;\n    this.tail = this.backward[pointer];\n    oldValue = this.V[pointer];\n    oldKey = this.K[pointer];\n    delete this.items[this.K[pointer]];\n  }\n\n  // Storing key & value\n  this.items[key] = pointer;\n  this.K[pointer] = key;\n  this.V[pointer] = value;\n\n  // Moving the item at the front of the list\n  this.forward[pointer] = this.head;\n  this.backward[this.head] = pointer;\n  this.head = pointer;\n\n  // Return object if eviction took place, otherwise return null\n  if (oldKey) {\n    return {evicted: true, key: oldKey, value: oldValue};\n  }\n  else {\n    return null;\n  }\n};\n\n/**\n * Method used to check whether the key exists in the cache.\n *\n * @param  {any} key   - Key.\n * @return {boolean}\n */\nLRUCache.prototype.has = function(key) {\n  return key in this.items;\n};\n\n/**\n * Method used to get the value attached to the given key. Will move the\n * related key to the front of the underlying linked list.\n *\n * @param  {any} key   - Key.\n * @return {any}\n */\nLRUCache.prototype.get = function(key) {\n  var pointer = this.items[key];\n\n  if (typeof pointer === 'undefined')\n    return;\n\n  this.splayOnTop(pointer);\n\n  return this.V[pointer];\n};\n\n/**\n * Method used to get the value attached to the given key. Does not modify\n * the ordering of the underlying linked list.\n *\n * @param  {any} key   - Key.\n * @return {any}\n */\nLRUCache.prototype.peek = function(key) {\n  var pointer = this.items[key];\n\n  if (typeof pointer === 'undefined')\n    return;\n\n  return this.V[pointer];\n};\n\n/**\n * Method used to iterate over the cache's entries using a callback.\n *\n * @param  {function}  callback - Function to call for each item.\n * @param  {object}    scope    - Optional scope.\n * @return {undefined}\n */\nLRUCache.prototype.forEach = function(callback, scope) {\n  scope = arguments.length > 1 ? scope : this;\n\n  var i = 0,\n      l = this.size;\n\n  var pointer = this.head,\n      keys = this.K,\n      values = this.V,\n      forward = this.forward;\n\n  while (i < l) {\n\n    callback.call(scope, values[pointer], keys[pointer], this);\n    pointer = forward[pointer];\n\n    i++;\n  }\n};\n\n/**\n * Method used to create an iterator over the cache's keys from most\n * recently used to least recently used.\n *\n * @return {Iterator}\n */\nLRUCache.prototype.keys = function() {\n  var i = 0,\n      l = this.size;\n\n  var pointer = this.head,\n      keys = this.K,\n      forward = this.forward;\n\n  return new Iterator(function() {\n    if (i >= l)\n      return {done: true};\n\n    var key = keys[pointer];\n\n    i++;\n\n    if (i < l)\n      pointer = forward[pointer];\n\n    return {\n      done: false,\n      value: key\n    };\n  });\n};\n\n/**\n * Method used to create an iterator over the cache's values from most\n * recently used to least recently used.\n *\n * @return {Iterator}\n */\nLRUCache.prototype.values = function() {\n  var i = 0,\n      l = this.size;\n\n  var pointer = this.head,\n      values = this.V,\n      forward = this.forward;\n\n  return new Iterator(function() {\n    if (i >= l)\n      return {done: true};\n\n    var value = values[pointer];\n\n    i++;\n\n    if (i < l)\n      pointer = forward[pointer];\n\n    return {\n      done: false,\n      value: value\n    };\n  });\n};\n\n/**\n * Method used to create an iterator over the cache's entries from most\n * recently used to least recently used.\n *\n * @return {Iterator}\n */\nLRUCache.prototype.entries = function() {\n  var i = 0,\n      l = this.size;\n\n  var pointer = this.head,\n      keys = this.K,\n      values = this.V,\n      forward = this.forward;\n\n  return new Iterator(function() {\n    if (i >= l)\n      return {done: true};\n\n    var key = keys[pointer],\n        value = values[pointer];\n\n    i++;\n\n    if (i < l)\n      pointer = forward[pointer];\n\n    return {\n      done: false,\n      value: [key, value]\n    };\n  });\n};\n\n/**\n * Attaching the #.entries method to Symbol.iterator if possible.\n */\nif (typeof Symbol !== 'undefined')\n  LRUCache.prototype[Symbol.iterator] = LRUCache.prototype.entries;\n\n/**\n * Convenience known methods.\n */\nLRUCache.prototype.inspect = function() {\n  var proxy = new Map();\n\n  var iterator = this.entries(),\n      step;\n\n  while ((step = iterator.next(), !step.done))\n    proxy.set(step.value[0], step.value[1]);\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(proxy, 'constructor', {\n    value: LRUCache,\n    enumerable: false\n  });\n\n  return proxy;\n};\n\nif (typeof Symbol !== 'undefined')\n  LRUCache.prototype[Symbol.for('nodejs.util.inspect.custom')] = LRUCache.prototype.inspect;\n\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a structure.\n *\n * @param  {Iterable} iterable - Target iterable.\n * @param  {function} Keys     - Array class for storing keys.\n * @param  {function} Values   - Array class for storing values.\n * @param  {number}   capacity - Cache's capacity.\n * @return {LRUCache}\n */\nLRUCache.from = function(iterable, Keys, Values, capacity) {\n  if (arguments.length < 2) {\n    capacity = iterables.guessLength(iterable);\n\n    if (typeof capacity !== 'number')\n      throw new Error('mnemonist/lru-cache.from: could not guess iterable length. Please provide desired capacity as last argument.');\n  }\n  else if (arguments.length === 2) {\n    capacity = Keys;\n    Keys = null;\n    Values = null;\n  }\n\n  var cache = new LRUCache(Keys, Values, capacity);\n\n  forEach(iterable, function(value, key) {\n    cache.set(key, value);\n  });\n\n  return cache;\n};\n\n/**\n * Exporting.\n */\nmodule.exports = LRUCache;\n","/**\n * Mnemonist LRUMapWithDelete\n * ===========================\n *\n * An extension of LRUMap with delete functionality.\n */\n\nvar LRUMap = require('./lru-map.js'),\n    forEach = require('obliterator/foreach'),\n    typed = require('./utils/typed-arrays.js'),\n    iterables = require('./utils/iterables.js');\n\n// The only complication with deleting items is that the LRU's\n// performance depends on having a fixed-size list of pointers; the\n// doubly-linked-list is happy to expand and contract.\n//\n// On delete, we record the position of the former item's pointer in a\n// list of \"holes\" in the pointer array. On insert, if there is a hole\n// the new pointer slots in to fill the hole; otherwise, it is\n// appended as usual. (Note: we are only talking here about the\n// internal pointer list. setting or getting an item promotes it\n// to the top of the LRU ranking no matter what came before)\n\nfunction LRUMapWithDelete(Keys, Values, capacity) {\n  if (arguments.length < 2) {\n    LRUMap.call(this, Keys);\n  }\n  else {\n    LRUMap.call(this, Keys, Values, capacity);\n  }\n  var PointerArray = typed.getPointerArray(this.capacity);\n  this.deleted = new PointerArray(this.capacity);\n  this.deletedSize = 0;\n}\n\nfor (var k in LRUMap.prototype)\n  LRUMapWithDelete.prototype[k] = LRUMap.prototype[k];\nif (typeof Symbol !== 'undefined')\n  LRUMapWithDelete.prototype[Symbol.iterator] = LRUMap.prototype[Symbol.iterator];\n\n/**\n * Method used to clear the structure.\n *\n * @return {undefined}\n */\nLRUMapWithDelete.prototype.clear = function() {\n  LRUMap.prototype.clear.call(this);\n  this.deletedSize = 0;\n};\n\n/**\n * Method used to set the value for the given key in the cache.\n *\n * @param  {any} key   - Key.\n * @param  {any} value - Value.\n * @return {undefined}\n */\nLRUMapWithDelete.prototype.set = function(key, value) {\n\n  var pointer = this.items.get(key);\n\n  // The key already exists, we just need to update the value and splay on top\n  if (typeof pointer !== 'undefined') {\n    this.splayOnTop(pointer);\n    this.V[pointer] = value;\n\n    return;\n  }\n\n  // The cache is not yet full\n  if (this.size < this.capacity) {\n    if (this.deletedSize > 0) {\n      // If there is a \"hole\" in the pointer list, reuse it\n      pointer = this.deleted[--this.deletedSize];\n    }\n    else {\n      // otherwise append to the pointer list\n      pointer = this.size;\n    }\n    this.size++;\n  }\n\n  // Cache is full, we need to drop the last value\n  else {\n    pointer = this.tail;\n    this.tail = this.backward[pointer];\n    this.items.delete(this.K[pointer]);\n  }\n\n  // Storing key & value\n  this.items.set(key, pointer);\n  this.K[pointer] = key;\n  this.V[pointer] = value;\n\n  // Moving the item at the front of the list\n  this.forward[pointer] = this.head;\n  this.backward[this.head] = pointer;\n  this.head = pointer;\n};\n\n/**\n * Method used to set the value for the given key in the cache\n *\n * @param  {any} key   - Key.\n * @param  {any} value - Value.\n * @return {{evicted: boolean, key: any, value: any}} An object containing the\n * key and value of an item that was overwritten or evicted in the set\n * operation, as well as a boolean indicating whether it was evicted due to\n * limited capacity. Return value is null if nothing was evicted or overwritten\n * during the set operation.\n */\nLRUMapWithDelete.prototype.setpop = function(key, value) {\n  var oldValue = null;\n  var oldKey = null;\n\n  var pointer = this.items.get(key);\n\n  // The key already exists, we just need to update the value and splay on top\n  if (typeof pointer !== 'undefined') {\n    this.splayOnTop(pointer);\n    oldValue = this.V[pointer];\n    this.V[pointer] = value;\n    return {evicted: false, key: key, value: oldValue};\n  }\n\n  // The cache is not yet full\n  if (this.size < this.capacity) {\n    if (this.deletedSize > 0) {\n      // If there is a \"hole\" in the pointer list, reuse it\n      pointer = this.deleted[--this.deletedSize];\n    }\n    else {\n      // otherwise append to the pointer list\n      pointer = this.size;\n    }\n    this.size++;\n  }\n\n  // Cache is full, we need to drop the last value\n  else {\n    pointer = this.tail;\n    this.tail = this.backward[pointer];\n    oldValue = this.V[pointer];\n    oldKey = this.K[pointer];\n    this.items.delete(this.K[pointer]);\n  }\n\n  // Storing key & value\n  this.items.set(key, pointer);\n  this.K[pointer] = key;\n  this.V[pointer] = value;\n\n  // Moving the item at the front of the list\n  this.forward[pointer] = this.head;\n  this.backward[this.head] = pointer;\n  this.head = pointer;\n\n  // Return object if eviction took place, otherwise return null\n  if (oldKey) {\n    return {evicted: true, key: oldKey, value: oldValue};\n  }\n  else {\n    return null;\n  }\n};\n\n/**\n * Method used to delete the entry for the given key in the cache.\n *\n * @param  {any} key   - Key.\n * @return {boolean}   - true if the item was present\n */\nLRUMapWithDelete.prototype.delete = function(key) {\n\n  var pointer = this.items.get(key);\n\n  if (typeof pointer === 'undefined') {\n    return false;\n  }\n\n  this.items.delete(key);\n\n  if (this.size === 1) {\n    this.size = 0;\n    this.head = 0;\n    this.tail = 0;\n    this.deletedSize = 0;\n    return true;\n  }\n\n  var previous = this.backward[pointer],\n      next = this.forward[pointer];\n\n  if (this.head === pointer) {\n    this.head = next;\n  }\n  if (this.tail === pointer) {\n    this.tail = previous;\n  }\n\n  this.forward[previous] = next;\n  this.backward[next] = previous;\n\n  this.size--;\n  this.deleted[this.deletedSize++] = pointer;\n\n  return true;\n};\n\n/**\n * Method used to remove and return the value for the given key in the cache.\n *\n * @param  {any} key                 - Key.\n * @param  {any} [missing=undefined] - Value to return if item is absent\n * @return {any} The value, if present; the missing indicator if absent\n */\nLRUMapWithDelete.prototype.remove = function(key, missing = undefined) {\n\n  var pointer = this.items.get(key);\n\n  if (typeof pointer === 'undefined') {\n    return missing;\n  }\n\n  var dead = this.V[pointer];\n  this.items.delete(key);\n\n  if (this.size === 1) {\n    this.size = 0;\n    this.head = 0;\n    this.tail = 0;\n    this.deletedSize = 0;\n    return dead;\n  }\n\n  var previous = this.backward[pointer],\n      next = this.forward[pointer];\n\n  if (this.head === pointer) {\n    this.head = next;\n  }\n  if (this.tail === pointer) {\n    this.tail = previous;\n  }\n\n  this.forward[previous] = next;\n  this.backward[next] = previous;\n\n  this.size--;\n  this.deleted[this.deletedSize++] = pointer;\n\n  return dead;\n};\n\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a structure.\n *\n * @param  {Iterable} iterable - Target iterable.\n * @param  {function} Keys     - Array class for storing keys.\n * @param  {function} Values   - Array class for storing values.\n * @param  {number}   capacity - Cache's capacity.\n * @return {LRUMapWithDelete}\n */\nLRUMapWithDelete.from = function(iterable, Keys, Values, capacity) {\n  if (arguments.length < 2) {\n    capacity = iterables.guessLength(iterable);\n\n    if (typeof capacity !== 'number')\n      throw new Error('mnemonist/lru-map.from: could not guess iterable length. Please provide desired capacity as last argument.');\n  }\n  else if (arguments.length === 2) {\n    capacity = Keys;\n    Keys = null;\n    Values = null;\n  }\n\n  var cache = new LRUMapWithDelete(Keys, Values, capacity);\n\n  forEach(iterable, function(value, key) {\n    cache.set(key, value);\n  });\n\n  return cache;\n};\n\nmodule.exports = LRUMapWithDelete;\n","/**\n * Mnemonist LRUMap\n * =================\n *\n * Variant of the LRUCache class that leverages an ES6 Map instead of an object.\n * It might be faster for some use case but it is still hard to understand\n * when a Map can outperform an object in v8.\n */\nvar LRUCache = require('./lru-cache.js'),\n    forEach = require('obliterator/foreach'),\n    typed = require('./utils/typed-arrays.js'),\n    iterables = require('./utils/iterables.js');\n\n/**\n * LRUMap.\n *\n * @constructor\n * @param {function} Keys     - Array class for storing keys.\n * @param {function} Values   - Array class for storing values.\n * @param {number}   capacity - Desired capacity.\n */\nfunction LRUMap(Keys, Values, capacity) {\n  if (arguments.length < 2) {\n    capacity = Keys;\n    Keys = null;\n    Values = null;\n  }\n\n  this.capacity = capacity;\n\n  if (typeof this.capacity !== 'number' || this.capacity <= 0)\n    throw new Error('mnemonist/lru-map: capacity should be positive number.');\n  else if (!isFinite(this.capacity) || Math.floor(this.capacity) !== this.capacity)\n    throw new Error('mnemonist/lru-map: capacity should be a finite positive integer.');\n\n  var PointerArray = typed.getPointerArray(capacity);\n\n  this.forward = new PointerArray(capacity);\n  this.backward = new PointerArray(capacity);\n  this.K = typeof Keys === 'function' ? new Keys(capacity) : new Array(capacity);\n  this.V = typeof Values === 'function' ? new Values(capacity) : new Array(capacity);\n\n  // Properties\n  this.size = 0;\n  this.head = 0;\n  this.tail = 0;\n  this.items = new Map();\n}\n\n/**\n * Method used to clear the structure.\n *\n * @return {undefined}\n */\nLRUMap.prototype.clear = function() {\n  this.size = 0;\n  this.head = 0;\n  this.tail = 0;\n  this.items.clear();\n};\n\n/**\n * Method used to set the value for the given key in the cache.\n *\n * @param  {any} key   - Key.\n * @param  {any} value - Value.\n * @return {undefined}\n */\nLRUMap.prototype.set = function(key, value) {\n\n  var pointer = this.items.get(key);\n\n  // The key already exists, we just need to update the value and splay on top\n  if (typeof pointer !== 'undefined') {\n    this.splayOnTop(pointer);\n    this.V[pointer] = value;\n\n    return;\n  }\n\n  // The cache is not yet full\n  if (this.size < this.capacity) {\n    pointer = this.size++;\n  }\n\n  // Cache is full, we need to drop the last value\n  else {\n    pointer = this.tail;\n    this.tail = this.backward[pointer];\n    this.items.delete(this.K[pointer]);\n  }\n\n  // Storing key & value\n  this.items.set(key, pointer);\n  this.K[pointer] = key;\n  this.V[pointer] = value;\n\n  // Moving the item at the front of the list\n  this.forward[pointer] = this.head;\n  this.backward[this.head] = pointer;\n  this.head = pointer;\n};\n\n/**\n * Method used to set the value for the given key in the cache.\n *\n * @param  {any} key   - Key.\n * @param  {any} value - Value.\n * @return {{evicted: boolean, key: any, value: any}} An object containing the\n * key and value of an item that was overwritten or evicted in the set\n * operation, as well as a boolean indicating whether it was evicted due to\n * limited capacity. Return value is null if nothing was evicted or overwritten\n * during the set operation.\n */\nLRUMap.prototype.setpop = function(key, value) {\n  var oldValue = null;\n  var oldKey = null;\n\n  var pointer = this.items.get(key);\n\n  // The key already exists, we just need to update the value and splay on top\n  if (typeof pointer !== 'undefined') {\n    this.splayOnTop(pointer);\n    oldValue = this.V[pointer];\n    this.V[pointer] = value;\n    return {evicted: false, key: key, value: oldValue};\n  }\n\n  // The cache is not yet full\n  if (this.size < this.capacity) {\n    pointer = this.size++;\n  }\n\n  // Cache is full, we need to drop the last value\n  else {\n    pointer = this.tail;\n    this.tail = this.backward[pointer];\n    oldValue = this.V[pointer];\n    oldKey = this.K[pointer];\n    this.items.delete(this.K[pointer]);\n  }\n\n  // Storing key & value\n  this.items.set(key, pointer);\n  this.K[pointer] = key;\n  this.V[pointer] = value;\n\n  // Moving the item at the front of the list\n  this.forward[pointer] = this.head;\n  this.backward[this.head] = pointer;\n  this.head = pointer;\n\n  // Return object if eviction took place, otherwise return null\n  if (oldKey) {\n    return {evicted: true, key: oldKey, value: oldValue};\n  }\n  else {\n    return null;\n  }\n};\n\n/**\n * Method used to check whether the key exists in the cache.\n *\n * @param  {any} key   - Key.\n * @return {boolean}\n */\nLRUMap.prototype.has = function(key) {\n  return this.items.has(key);\n};\n\n/**\n * Method used to get the value attached to the given key. Will move the\n * related key to the front of the underlying linked list.\n *\n * @param  {any} key   - Key.\n * @return {any}\n */\nLRUMap.prototype.get = function(key) {\n  var pointer = this.items.get(key);\n\n  if (typeof pointer === 'undefined')\n    return;\n\n  this.splayOnTop(pointer);\n\n  return this.V[pointer];\n};\n\n/**\n * Method used to get the value attached to the given key. Does not modify\n * the ordering of the underlying linked list.\n *\n * @param  {any} key   - Key.\n * @return {any}\n */\nLRUMap.prototype.peek = function(key) {\n  var pointer = this.items.get(key);\n\n  if (typeof pointer === 'undefined')\n    return;\n\n  return this.V[pointer];\n};\n\n/**\n * Methods that can be reused as-is from LRUCache.\n */\nLRUMap.prototype.splayOnTop = LRUCache.prototype.splayOnTop;\nLRUMap.prototype.forEach = LRUCache.prototype.forEach;\nLRUMap.prototype.keys = LRUCache.prototype.keys;\nLRUMap.prototype.values = LRUCache.prototype.values;\nLRUMap.prototype.entries = LRUCache.prototype.entries;\n\n/**\n * Attaching the #.entries method to Symbol.iterator if possible.\n */\nif (typeof Symbol !== 'undefined')\n  LRUMap.prototype[Symbol.iterator] = LRUMap.prototype.entries;\n\n/**\n * Convenience known methods.\n */\nLRUMap.prototype.inspect = LRUCache.prototype.inspect;\n\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a structure.\n *\n * @param  {Iterable} iterable - Target iterable.\n * @param  {function} Keys     - Array class for storing keys.\n * @param  {function} Values   - Array class for storing values.\n * @param  {number}   capacity - Cache's capacity.\n * @return {LRUMap}\n */\nLRUMap.from = function(iterable, Keys, Values, capacity) {\n  if (arguments.length < 2) {\n    capacity = iterables.guessLength(iterable);\n\n    if (typeof capacity !== 'number')\n      throw new Error('mnemonist/lru-cache.from: could not guess iterable length. Please provide desired capacity as last argument.');\n  }\n  else if (arguments.length === 2) {\n    capacity = Keys;\n    Keys = null;\n    Values = null;\n  }\n\n  var cache = new LRUMap(Keys, Values, capacity);\n\n  forEach(iterable, function(value, key) {\n    cache.set(key, value);\n  });\n\n  return cache;\n};\n\n/**\n * Exporting.\n */\nmodule.exports = LRUMap;\n","/**\n * Mnemonist MultiMap\n * ===================\n *\n * Implementation of a MultiMap with custom container.\n */\nvar Iterator = require('obliterator/iterator'),\n    forEach = require('obliterator/foreach');\n\n/**\n * MultiMap.\n *\n * @constructor\n */\nfunction MultiMap(Container) {\n\n  this.Container = Container || Array;\n  this.items = new Map();\n  this.clear();\n\n  Object.defineProperty(this.items, 'constructor', {\n    value: MultiMap,\n    enumerable: false\n  });\n}\n\n/**\n * Method used to clear the structure.\n *\n * @return {undefined}\n */\nMultiMap.prototype.clear = function() {\n\n  // Properties\n  this.size = 0;\n  this.dimension = 0;\n  this.items.clear();\n};\n\n/**\n * Method used to set a value.\n *\n * @param  {any}      key   - Key.\n * @param  {any}      value - Value to add.\n * @return {MultiMap}\n */\nMultiMap.prototype.set = function(key, value) {\n  var container = this.items.get(key),\n      sizeBefore;\n\n  if (!container) {\n    this.dimension++;\n    container = new this.Container();\n    this.items.set(key, container);\n  }\n\n  if (this.Container === Set) {\n    sizeBefore = container.size;\n    container.add(value);\n\n    if (sizeBefore < container.size)\n      this.size++;\n  }\n  else {\n    container.push(value);\n    this.size++;\n  }\n\n  return this;\n};\n\n/**\n * Method used to delete the given key.\n *\n * @param  {any}     key - Key to delete.\n * @return {boolean}\n */\nMultiMap.prototype.delete = function(key) {\n  var container = this.items.get(key);\n\n  if (!container)\n    return false;\n\n  this.size -= (this.Container === Set ? container.size : container.length);\n  this.dimension--;\n  this.items.delete(key);\n\n  return true;\n};\n\n/**\n * Method used to delete the remove an item in the container stored at the\n * given key.\n *\n * @param  {any}     key - Key to delete.\n * @return {boolean}\n */\nMultiMap.prototype.remove = function(key, value) {\n  var container = this.items.get(key),\n      wasDeleted,\n      index;\n\n  if (!container)\n    return false;\n\n  if (this.Container === Set) {\n    wasDeleted = container.delete(value);\n\n    if (wasDeleted)\n      this.size--;\n\n    if (container.size === 0) {\n      this.items.delete(key);\n      this.dimension--;\n    }\n\n    return wasDeleted;\n  }\n  else {\n    index = container.indexOf(value);\n\n    if (index === -1)\n      return false;\n\n    this.size--;\n\n    if (container.length === 1) {\n      this.items.delete(key);\n      this.dimension--;\n\n      return true;\n    }\n\n    container.splice(index, 1);\n\n    return true;\n  }\n};\n\n/**\n * Method used to return whether the given keys exists in the map.\n *\n * @param  {any}     key - Key to check.\n * @return {boolean}\n */\nMultiMap.prototype.has = function(key) {\n  return this.items.has(key);\n};\n\n/**\n * Method used to return the container stored at the given key or `undefined`.\n *\n * @param  {any}     key - Key to get.\n * @return {boolean}\n */\nMultiMap.prototype.get = function(key) {\n  return this.items.get(key);\n};\n\n/**\n * Method used to return the multiplicity of the given key, meaning the number\n * of times it is set, or, more trivially, the size of the attached container.\n *\n * @param  {any}     key - Key to check.\n * @return {number}\n */\nMultiMap.prototype.multiplicity = function(key) {\n  var container = this.items.get(key);\n\n  if (typeof container === 'undefined')\n    return 0;\n\n  return this.Container === Set ? container.size : container.length;\n};\nMultiMap.prototype.count = MultiMap.prototype.multiplicity;\n\n/**\n * Method used to iterate over each of the key/value pairs.\n *\n * @param  {function}  callback - Function to call for each item.\n * @param  {object}    scope    - Optional scope.\n * @return {undefined}\n */\nMultiMap.prototype.forEach = function(callback, scope) {\n  scope = arguments.length > 1 ? scope : this;\n\n  // Inner iteration function is created here to avoid creating it in the loop\n  var key;\n  function inner(value) {\n    callback.call(scope, value, key);\n  }\n\n  this.items.forEach(function(container, k) {\n    key = k;\n    container.forEach(inner);\n  });\n};\n\n/**\n * Method used to iterate over each of the associations.\n *\n * @param  {function}  callback - Function to call for each item.\n * @param  {object}    scope    - Optional scope.\n * @return {undefined}\n */\nMultiMap.prototype.forEachAssociation = function(callback, scope) {\n  scope = arguments.length > 1 ? scope : this;\n\n  this.items.forEach(callback, scope);\n};\n\n/**\n * Method returning an iterator over the map's keys.\n *\n * @return {Iterator}\n */\nMultiMap.prototype.keys = function() {\n  return this.items.keys();\n};\n\n/**\n * Method returning an iterator over the map's keys.\n *\n * @return {Iterator}\n */\nMultiMap.prototype.values = function() {\n  var iterator = this.items.values(),\n      inContainer = false,\n      countainer,\n      step,\n      i,\n      l;\n\n  if (this.Container === Set)\n    return new Iterator(function next() {\n      if (!inContainer) {\n        step = iterator.next();\n\n        if (step.done)\n          return {done: true};\n\n        inContainer = true;\n        countainer = step.value.values();\n      }\n\n      step = countainer.next();\n\n      if (step.done) {\n        inContainer = false;\n        return next();\n      }\n\n      return {\n        done: false,\n        value: step.value\n      };\n    });\n\n  return new Iterator(function next() {\n    if (!inContainer) {\n      step = iterator.next();\n\n      if (step.done)\n        return {done: true};\n\n      inContainer = true;\n      countainer = step.value;\n      i = 0;\n      l = countainer.length;\n    }\n\n    if (i >= l) {\n      inContainer = false;\n      return next();\n    }\n\n    return {\n      done: false,\n      value: countainer[i++]\n    };\n  });\n};\n\n/**\n * Method returning an iterator over the map's entries.\n *\n * @return {Iterator}\n */\nMultiMap.prototype.entries = function() {\n  var iterator = this.items.entries(),\n      inContainer = false,\n      countainer,\n      step,\n      key,\n      i,\n      l;\n\n  if (this.Container === Set)\n    return new Iterator(function next() {\n      if (!inContainer) {\n        step = iterator.next();\n\n        if (step.done)\n          return {done: true};\n\n        inContainer = true;\n        key = step.value[0];\n        countainer = step.value[1].values();\n      }\n\n      step = countainer.next();\n\n      if (step.done) {\n        inContainer = false;\n        return next();\n      }\n\n      return {\n        done: false,\n        value: [key, step.value]\n      };\n    });\n\n  return new Iterator(function next() {\n    if (!inContainer) {\n      step = iterator.next();\n\n      if (step.done)\n        return {done: true};\n\n      inContainer = true;\n      key = step.value[0];\n      countainer = step.value[1];\n      i = 0;\n      l = countainer.length;\n    }\n\n    if (i >= l) {\n      inContainer = false;\n      return next();\n    }\n\n    return {\n      done: false,\n      value: [key, countainer[i++]]\n    };\n  });\n};\n\n/**\n * Method returning an iterator over the map's containers.\n *\n * @return {Iterator}\n */\nMultiMap.prototype.containers = function() {\n  return this.items.values();\n};\n\n/**\n * Method returning an iterator over the map's associations.\n *\n * @return {Iterator}\n */\nMultiMap.prototype.associations = function() {\n  return this.items.entries();\n};\n\n/**\n * Attaching the #.entries method to Symbol.iterator if possible.\n */\nif (typeof Symbol !== 'undefined')\n  MultiMap.prototype[Symbol.iterator] = MultiMap.prototype.entries;\n\n/**\n * Convenience known methods.\n */\nMultiMap.prototype.inspect = function() {\n  return this.items;\n};\n\nif (typeof Symbol !== 'undefined')\n  MultiMap.prototype[Symbol.for('nodejs.util.inspect.custom')] = MultiMap.prototype.inspect;\nMultiMap.prototype.toJSON = function() {\n  return this.items;\n};\n\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a structure.\n *\n * @param  {Iterable} iterable  - Target iterable.\n * @param  {Class}    Container - Container.\n * @return {MultiMap}\n */\nMultiMap.from = function(iterable, Container) {\n  var map = new MultiMap(Container);\n\n  forEach(iterable, function(value, key) {\n    map.set(key, value);\n  });\n\n  return map;\n};\n\n/**\n * Exporting.\n */\nmodule.exports = MultiMap;\n","/**\n * Mnemonist MultiSet\n * ====================\n *\n * JavaScript implementation of a MultiSet.\n */\nvar Iterator = require('obliterator/iterator'),\n    forEach = require('obliterator/foreach'),\n    FixedReverseHeap = require('./fixed-reverse-heap.js');\n\n/**\n * Helpers.\n */\nvar MULTISET_ITEM_COMPARATOR = function(a, b) {\n  if (a[1] > b[1])\n    return -1;\n  if (a[1] < b[1])\n    return 1;\n\n  return 0;\n};\n\n// TODO: helper functions: union, intersection, sum, difference, subtract\n\n/**\n * MultiSet.\n *\n * @constructor\n */\nfunction MultiSet() {\n  this.items = new Map();\n\n  Object.defineProperty(this.items, 'constructor', {\n    value: MultiSet,\n    enumerable: false\n  });\n\n  this.clear();\n}\n\n/**\n * Method used to clear the structure.\n *\n * @return {undefined}\n */\nMultiSet.prototype.clear = function() {\n\n  // Properties\n  this.size = 0;\n  this.dimension = 0;\n  this.items.clear();\n};\n\n/**\n * Method used to add an item to the set.\n *\n * @param  {any}    item  - Item to add.\n * @param  {number} count - Optional count.\n * @return {MultiSet}\n */\nMultiSet.prototype.add = function(item, count) {\n  if (count === 0)\n    return this;\n\n  if (count < 0)\n    return this.remove(item, -count);\n\n  count = count || 1;\n\n  if (typeof count !== 'number')\n    throw new Error('mnemonist/multi-set.add: given count should be a number.');\n\n  this.size += count;\n\n  const currentCount = this.items.get(item);\n\n  if (currentCount === undefined)\n    this.dimension++;\n  else\n    count += currentCount;\n\n  this.items.set(item, count);\n\n  return this;\n};\n\n/**\n * Method used to set the multiplicity of an item in the set.\n *\n * @param  {any}    item  - Target item.\n * @param  {number} count - Desired multiplicity.\n * @return {MultiSet}\n */\nMultiSet.prototype.set = function(item, count) {\n  var currentCount;\n\n  if (typeof count !== 'number')\n    throw new Error('mnemonist/multi-set.set: given count should be a number.');\n\n  // Setting an item to 0 or to a negative number means deleting it from the set\n  if (count <= 0) {\n    currentCount = this.items.get(item);\n\n    if (typeof currentCount !== 'undefined') {\n      this.size -= currentCount;\n      this.dimension--;\n    }\n\n    this.items.delete(item);\n    return this;\n  }\n\n  count = count || 1;\n\n  currentCount = this.items.get(item);\n\n  if (typeof currentCount === 'number') {\n    this.items.set(item, currentCount + count);\n  }\n  else {\n    this.dimension++;\n    this.items.set(item, count);\n  }\n\n  this.size += count;\n\n  return this;\n};\n\n/**\n * Method used to return whether the item exists in the set.\n *\n * @param  {any} item  - Item to check.\n * @return {boolan}\n */\nMultiSet.prototype.has = function(item) {\n  return this.items.has(item);\n};\n\n/**\n * Method used to delete an item from the set.\n *\n * @param  {any} item  - Item to delete.\n * @return {boolan}\n */\nMultiSet.prototype.delete = function(item) {\n  var count = this.items.get(item);\n\n  if (count === 0)\n    return false;\n\n  this.size -= count;\n  this.dimension--;\n  this.items.delete(item);\n\n  return true;\n};\n\n/**\n * Method used to remove an item from the set.\n *\n * @param  {any} item  - Item to delete.\n * @param  {number} count - Optional count.\n * @return {undefined}\n */\nMultiSet.prototype.remove = function(item, count) {\n  if (count === 0)\n    return;\n\n  if (count < 0)\n    return this.add(item, -count);\n\n  count = count || 1;\n\n  if (typeof count !== 'number')\n    throw new Error('mnemonist/multi-set.remove: given count should be a number.');\n\n  var currentCount = this.items.get(item);\n\n  if (typeof currentCount === 'undefined') return;\n\n  var newCount = Math.max(0, currentCount - count);\n\n  if (newCount === 0) {\n    this.items.delete(item);\n    this.size -= currentCount;\n    this.dimension--;\n  }\n  else {\n    this.items.set(item, newCount);\n    this.size -= count;\n  }\n\n  return;\n};\n\n/**\n * Method used to change a key into another one, merging counts if the target\n * key already exists.\n *\n * @param  {any} a - From key.\n * @param  {any} b - To key.\n * @return {MultiSet}\n */\nMultiSet.prototype.edit = function(a, b) {\n  var am = this.multiplicity(a);\n\n  // If a does not exist in the set, we can stop right there\n  if (am === 0)\n    return;\n\n  var bm = this.multiplicity(b);\n\n  this.items.set(b, am + bm);\n  this.items.delete(a);\n\n  return this;\n};\n\n/**\n * Method used to return the multiplicity of the given item.\n *\n * @param  {any} item  - Item to get.\n * @return {number}\n */\nMultiSet.prototype.multiplicity = function(item) {\n  var count = this.items.get(item);\n\n  if (typeof count === 'undefined')\n    return 0;\n\n  return count;\n};\nMultiSet.prototype.get = MultiSet.prototype.multiplicity;\nMultiSet.prototype.count = MultiSet.prototype.multiplicity;\n\n/**\n * Method used to return the frequency of the given item in the set.\n *\n * @param  {any} item - Item to get.\n * @return {number}\n */\nMultiSet.prototype.frequency = function(item) {\n  if (this.size === 0)\n    return 0;\n\n  var count = this.multiplicity(item);\n\n  return count / this.size;\n};\n\n/**\n * Method used to return the n most common items from the set.\n *\n * @param  {number} n - Number of items to retrieve.\n * @return {array}\n */\nMultiSet.prototype.top = function(n) {\n  if (typeof n !== 'number' || n <= 0)\n    throw new Error('mnemonist/multi-set.top: n must be a number > 0.');\n\n  var heap = new FixedReverseHeap(Array, MULTISET_ITEM_COMPARATOR, n);\n\n  var iterator = this.items.entries(),\n      step;\n\n  while ((step = iterator.next(), !step.done))\n    heap.push(step.value);\n\n  return heap.consume();\n};\n\n/**\n * Method used to iterate over the set's values.\n *\n * @param  {function}  callback - Function to call for each item.\n * @param  {object}    scope    - Optional scope.\n * @return {undefined}\n */\nMultiSet.prototype.forEach = function(callback, scope) {\n  scope = arguments.length > 1 ? scope : this;\n\n  var i;\n\n  this.items.forEach(function(multiplicity, value) {\n\n    for (i = 0; i < multiplicity; i++)\n      callback.call(scope, value, value);\n  });\n};\n\n/**\n * Method used to iterate over the set's multiplicities.\n *\n * @param  {function}  callback - Function to call for each multiplicity.\n * @param  {object}    scope    - Optional scope.\n * @return {undefined}\n */\nMultiSet.prototype.forEachMultiplicity = function(callback, scope) {\n  scope = arguments.length > 1 ? scope : this;\n\n  this.items.forEach(callback, scope);\n};\n\n/**\n * Method returning an iterator over the set's keys. I.e. its unique values,\n * in a sense.\n *\n * @return {Iterator}\n */\nMultiSet.prototype.keys = function() {\n  return this.items.keys();\n};\n\n/**\n * Method returning an iterator over the set's values.\n *\n * @return {Iterator}\n */\nMultiSet.prototype.values = function() {\n  var iterator = this.items.entries(),\n      inContainer = false,\n      step,\n      value,\n      multiplicity,\n      i;\n\n  return new Iterator(function next() {\n    if (!inContainer) {\n      step = iterator.next();\n\n      if (step.done)\n        return {done: true};\n\n      inContainer = true;\n      value = step.value[0];\n      multiplicity = step.value[1];\n      i = 0;\n    }\n\n    if (i >= multiplicity) {\n      inContainer = false;\n      return next();\n    }\n\n    i++;\n\n    return {\n      done: false,\n      value: value\n    };\n  });\n};\n\n/**\n * Method returning an iterator over the set's multiplicities.\n *\n * @return {Iterator}\n */\nMultiSet.prototype.multiplicities = function() {\n  return this.items.entries();\n};\n\n/**\n * Attaching the #.entries method to Symbol.iterator if possible.\n */\nif (typeof Symbol !== 'undefined')\n  MultiSet.prototype[Symbol.iterator] = MultiSet.prototype.values;\n\n/**\n * Convenience known methods.\n */\nMultiSet.prototype.inspect = function() {\n  return this.items;\n};\n\nif (typeof Symbol !== 'undefined')\n  MultiSet.prototype[Symbol.for('nodejs.util.inspect.custom')] = MultiSet.prototype.inspect;\nMultiSet.prototype.toJSON = function() {\n  return this.items;\n};\n\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a structure.\n *\n * @param  {Iterable} iterable - Target iterable.\n * @return {MultiSet}\n */\nMultiSet.from = function(iterable) {\n  var set = new MultiSet();\n\n  forEach(iterable, function(value) {\n    set.add(value);\n  });\n\n  return set;\n};\n\n/**\n * Function returning whether the multiset A is a subset of the multiset B.\n *\n * @param  {MultiSet} A - First set.\n * @param  {MultiSet} B - Second set.\n * @return {boolean}\n */\nMultiSet.isSubset = function(A, B) {\n  var iterator = A.multiplicities(),\n      step,\n      key,\n      mA;\n\n  // Shortcuts\n  if (A === B)\n    return true;\n\n  if (A.dimension > B.dimension)\n    return false;\n\n  while ((step = iterator.next(), !step.done)) {\n    key = step.value[0];\n    mA = step.value[1];\n\n    if (B.multiplicity(key) < mA)\n      return false;\n  }\n\n  return true;\n};\n\n/**\n * Function returning whether the multiset A is a superset of the multiset B.\n *\n * @param  {MultiSet} A - First set.\n * @param  {MultiSet} B - Second set.\n * @return {boolean}\n */\nMultiSet.isSuperset = function(A, B) {\n  return MultiSet.isSubset(B, A);\n};\n\n/**\n * Exporting.\n */\nmodule.exports = MultiSet;\n","/**\n * Mnemonist PassjoinIndex\n * ========================\n *\n * The PassjoinIndex is an index leveraging the \"passjoin\" algorithm as a mean\n * to index strings for Levenshtein distance queries. It features a complexity\n * related to the Levenshtein query threshold k rather than the number of\n * strings to test (roughly O(k^3)).\n *\n * [References]:\n * Jiang, Yu, Dong Deng, Jiannan Wang, Guoliang Li, et Jianhua Feng.\n * « Efficient Parallel Partition-Based Algorithms for Similarity Search and Join\n * with Edit Distance Constraints ». In Proceedings of the Joint EDBT/ICDT 2013\n * Workshops on - EDBT ’13, 341. Genoa, Italy: ACM Press, 2013.\n * https://doi.org/10.1145/2457317.2457382.\n *\n * Li, Guoliang, Dong Deng, et Jianhua Feng. « A Partition-Based Method for\n * String Similarity Joins with Edit-Distance Constraints ». ACM Transactions on\n * Database Systems 38, no 2 (1 juin 2013): 1‑33.\n * https://doi.org/10.1145/2487259.2487261.\n *\n * [Urls]:\n * http://people.csail.mit.edu/dongdeng/projects/passjoin/index.html\n */\nvar Iterator = require('obliterator/iterator'),\n    forEach = require('obliterator/foreach');\n\n// TODO: leveraging BagDistance as an upper bound of Levenshtein\n// TODO: leverage n-grams recursive indexing\n// TODO: try the MultiArray as a memory backend\n// TODO: what about damerau levenshtein\n\n/**\n * Helpers.\n */\n\n/**\n * Function returning the number of substrings that will be selected by the\n * multi-match-aware selection scheme for theshold `k`, for a string of length\n * `s` to match strings of length `l`.\n *\n * @param   {number} k - Levenshtein distance threshold.\n * @param   {number} s - Length of target strings.\n * @param   {number} l - Length of strings to match.\n * @returns {number}   - The number of selected substrings.\n */\nfunction countSubstringsL(k, s, l) {\n  return (((Math.pow(k, 2) - Math.pow(Math.abs(s - l), 2)) / 2) | 0) + k + 1;\n}\n\n/**\n * Function returning the minimum number of substrings that will be selected by\n * the multi-match-aware selection scheme for theshold `k`, for a string of\n * length `s` to match any string of relevant length.\n *\n * @param   {number} k - Levenshtein distance threshold.\n * @param   {number} s - Length of target strings.\n * @returns {number}   - The number of selected substrings.\n */\nfunction countKeys(k, s) {\n  var c = 0;\n\n  for (var l = 0, m = s + 1; l < m; l++)\n    c += countSubstringsL(k, s, l);\n\n  return c;\n}\n\n/**\n * Function used to compare two keys in order to sort them first by decreasing\n * length and then alphabetically as per the \"4.2 Effective Indexing Strategy\"\n * point of the paper.\n *\n * @param   {number} k - Levenshtein distance threshold.\n * @param   {number} s - Length of target strings.\n * @returns {number}   - The number of selected substrings.\n */\nfunction comparator(a, b) {\n  if (a.length > b.length)\n    return -1;\n  if (a.length < b.length)\n    return 1;\n\n  if (a < b)\n    return -1;\n  if (a > b)\n    return 1;\n\n  return 0;\n}\n\n/**\n * Function partitioning a string into k + 1 uneven segments, the shorter\n * ones, then the longer ones.\n *\n * @param   {number} k - Levenshtein distance threshold.\n * @param   {number} l - Length of the string.\n * @returns {Array}    - The partition tuples (start, length).\n */\nfunction partition(k, l) {\n  var m = k + 1,\n      a = (l / m) | 0,\n      b = a + 1,\n      i,\n      j;\n\n  var largeSegments = l - a * m,\n      smallSegments = m - largeSegments;\n\n  var tuples = new Array(k + 1);\n\n  for (i = 0; i < smallSegments; i++)\n    tuples[i] = [i * a, a];\n\n  var offset = (i - 1) * a + a;\n\n  for (j = 0; j < largeSegments; j++)\n    tuples[i + j] = [offset + j * b, b];\n\n  return tuples;\n}\n\n/**\n * Function yielding a string's k + 1 passjoin segments to index.\n *\n * @param   {number} k      - Levenshtein distance threshold.\n * @param   {string} string - Target string.\n * @returns {Array}         - The string's segments.\n */\nfunction segments(k, string) {\n  var l = string.length,\n      m = k + 1,\n      a = (l / m) | 0,\n      b = a + 1,\n      o,\n      i,\n      j;\n\n  var largeSegments = l - a * m,\n      smallSegments = m - largeSegments;\n\n  var S = new Array(k + 1);\n\n  for (i = 0; i < smallSegments; i++) {\n    o = i * a;\n    S[i] = string.slice(o, o + a);\n  }\n\n  var offset = (i - 1) * a + a;\n\n  for (j = 0; j < largeSegments; j++) {\n    o = offset + j * b;\n    S[i + j] = string.slice(o, o + b);\n  }\n\n  return S;\n}\n\n// TODO: jsdocs\nfunction segmentPos(k, i, string) {\n  if (i === 0)\n    return 0;\n\n  var l = string.length;\n\n  var m = k + 1,\n      a = (l / m) | 0,\n      b = a + 1;\n\n  var largeSegments = l - a * m,\n      smallSegments = m - largeSegments;\n\n  if (i <= smallSegments - 1)\n    return i * a;\n\n  var offset = i - smallSegments;\n\n  return smallSegments * a + offset * b;\n}\n\n/**\n * Function returning the interval of relevant substrings to lookup using the\n * multi-match-aware substring selection scheme described in the paper.\n *\n * @param   {number} k      - Levenshtein distance threshold.\n * @param   {number} delta  - Signed length difference between both considered strings.\n * @param   {number} i      - k + 1 segment index.\n * @param   {number} s      - String's length.\n * @param   {number} pi     - k + 1 segment position in target string.\n * @param   {number} li     - k + 1 segment length.\n * @returns {Array}         - The interval (start, stop).\n */\nfunction multiMatchAwareInterval(k, delta, i, s, pi, li) {\n  var start1 = pi - i,\n      end1 = pi + i;\n\n  var o = k - i;\n\n  var start2 = pi + delta - o,\n      end2 = pi + delta + o;\n\n  var end3 = s - li;\n\n  return [Math.max(0, start1, start2), Math.min(end1, end2, end3)];\n}\n\n/**\n * Function yielding relevant substrings to lookup using the multi-match-aware\n * substring selection scheme described in the paper.\n *\n * @param   {number} k      - Levenshtein distance threshold.\n * @param   {string} string  - Target string.\n * @param   {number} l      - Length of strings to match.\n * @param   {number} i      - k + 1 segment index.\n * @param   {number} pi     - k + 1 segment position in target string.\n * @param   {number} li     - k + 1 segment length.\n * @returns {Array}         - The contiguous substrings.\n */\nfunction multiMatchAwareSubstrings(k, string, l, i, pi, li) {\n  var s = string.length;\n\n  // Note that we need to keep the non-absolute delta for this function\n  // to work in both directions, up & down\n  var delta = s - l;\n\n  var interval = multiMatchAwareInterval(k, delta, i, s, pi, li);\n\n  var start = interval[0],\n      stop = interval[1];\n\n  var currentSubstring = '';\n\n  var substrings = [];\n\n  var substring, j, m;\n\n  for (j = start, m = stop + 1; j < m; j++) {\n    substring = string.slice(j, j + li);\n\n    // We skip identical consecutive substrings (to avoid repetition in case\n    // of contiguous letter duplication)\n    if (substring === currentSubstring)\n      continue;\n\n    substrings.push(substring);\n\n    currentSubstring = substring;\n  }\n\n  return substrings;\n}\n\n/**\n * PassjoinIndex.\n *\n * @note I tried to apply the paper's optimizations regarding Levenshtein\n * distance computations but it did not provide a performance boost, quite\n * the contrary. This is because since we are mostly using the index for small k\n * here, most of the strings we work on are quite small and the bookkeeping\n * induced by Ukkonen's method and the paper's one are slowing us down more than\n * they actually help us go faster.\n *\n * @note This implementation does not try to ensure that you add the same string\n * more than once.\n *\n * @constructor\n * @param {function} levenshtein - Levenshtein distance function.\n * @param {number}   k           - Levenshtein distance threshold.\n */\nfunction PassjoinIndex(levenshtein, k) {\n  if (typeof levenshtein !== 'function')\n    throw new Error('mnemonist/passjoin-index: `levenshtein` should be a function returning edit distance between two strings.');\n\n  if (typeof k !== 'number' || k < 1)\n    throw new Error('mnemonist/passjoin-index: `k` should be a number > 0');\n\n  this.levenshtein = levenshtein;\n  this.k = k;\n  this.clear();\n}\n\n/**\n * Method used to clear the structure.\n *\n * @return {undefined}\n */\nPassjoinIndex.prototype.clear = function() {\n\n  // Properties\n  this.size = 0;\n  this.strings = [];\n  this.invertedIndices = {};\n};\n\n/**\n * Method used to add a new value to the index.\n *\n * @param  {string|Array} value - Value to add.\n * @return {PassjoinIndex}\n */\nPassjoinIndex.prototype.add = function(value) {\n  var l = value.length;\n\n  var stringIndex = this.size;\n\n  this.strings.push(value);\n  this.size++;\n\n  var S = segments(this.k, value);\n\n  var Ll = this.invertedIndices[l];\n\n  if (typeof Ll === 'undefined') {\n    Ll = {};\n    this.invertedIndices[l] = Ll;\n  }\n\n  var segment,\n      matches,\n      key,\n      i,\n      m;\n\n  for (i = 0, m = S.length; i < m; i++) {\n    segment = S[i];\n    key = segment + i;\n    matches = Ll[key];\n\n    if (typeof matches === 'undefined') {\n      matches = [stringIndex];\n      Ll[key] = matches;\n    }\n    else {\n      matches.push(stringIndex);\n    }\n  }\n\n  return this;\n};\n\n/**\n * Method used to search for string matching the given query.\n *\n * @param  {string|Array} query - Query string.\n * @return {Array}\n */\nPassjoinIndex.prototype.search = function(query) {\n  var s = query.length,\n      k = this.k;\n\n  var M = new Set();\n\n  var candidates,\n      candidate,\n      queryPos,\n      querySegmentLength,\n      key,\n      S,\n      P,\n      l,\n      m,\n      i,\n      n1,\n      j,\n      n2,\n      y,\n      n3;\n\n  for (l = Math.max(0, s - k), m = s + k + 1; l < m; l++) {\n    var Ll = this.invertedIndices[l];\n\n    if (typeof Ll === 'undefined')\n      continue;\n\n    P = partition(k, l);\n\n    for (i = 0, n1 = P.length; i < n1; i++) {\n      queryPos = P[i][0];\n      querySegmentLength = P[i][1];\n\n      S = multiMatchAwareSubstrings(\n        k,\n        query,\n        l,\n        i,\n        queryPos,\n        querySegmentLength\n      );\n\n      // Empty string edge case\n      if (!S.length)\n        S = [''];\n\n      for (j = 0, n2 = S.length; j < n2; j++) {\n        key = S[j] + i;\n        candidates = Ll[key];\n\n        if (typeof candidates === 'undefined')\n          continue;\n\n        for (y = 0, n3 = candidates.length; y < n3; y++) {\n          candidate = this.strings[candidates[y]];\n\n          // NOTE: first condition is here not to compute Levenshtein\n          // distance for tiny strings\n\n          // NOTE: maintaining a Set of rejected candidate is not really useful\n          // because it consumes more memory and because non-matches are\n          // less likely to be candidates agains\n          if (\n            s <= k && l <= k ||\n            (\n              !M.has(candidate) &&\n              this.levenshtein(query, candidate) <= k\n            )\n          )\n            M.add(candidate);\n        }\n      }\n    }\n  }\n\n  return M;\n};\n\n/**\n * Method used to iterate over the index.\n *\n * @param  {function}  callback - Function to call for each item.\n * @param  {object}    scope    - Optional scope.\n * @return {undefined}\n */\nPassjoinIndex.prototype.forEach = function(callback, scope) {\n  scope = arguments.length > 1 ? scope : this;\n\n  for (var i = 0, l = this.strings.length; i < l; i++)\n    callback.call(scope, this.strings[i], i, this);\n};\n\n/**\n * Method used to create an iterator over a index's values.\n *\n * @return {Iterator}\n */\nPassjoinIndex.prototype.values = function() {\n  var strings = this.strings,\n      l = strings.length,\n      i = 0;\n\n  return new Iterator(function() {\n    if (i >= l)\n      return {\n        done: true\n      };\n\n    var value = strings[i];\n    i++;\n\n    return {\n      value: value,\n      done: false\n    };\n  });\n};\n\n/**\n * Attaching the #.values method to Symbol.iterator if possible.\n */\nif (typeof Symbol !== 'undefined')\n  PassjoinIndex.prototype[Symbol.iterator] = PassjoinIndex.prototype.values;\n\n/**\n * Convenience known methods.\n */\nPassjoinIndex.prototype.inspect = function() {\n  var array = this.strings.slice();\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(array, 'constructor', {\n    value: PassjoinIndex,\n    enumerable: false\n  });\n\n  return array;\n};\n\nif (typeof Symbol !== 'undefined')\n  PassjoinIndex.prototype[Symbol.for('nodejs.util.inspect.custom')] = PassjoinIndex.prototype.inspect;\n\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a structure.\n *\n * @param  {Iterable} iterable - Target iterable.\n * @return {PassjoinIndex}\n */\nPassjoinIndex.from = function(iterable, levenshtein, k) {\n  var index = new PassjoinIndex(levenshtein, k);\n\n  forEach(iterable, function(string) {\n    index.add(string);\n  });\n\n  return index;\n};\n\n/**\n * Exporting.\n */\nPassjoinIndex.countKeys = countKeys;\nPassjoinIndex.comparator = comparator;\nPassjoinIndex.partition = partition;\nPassjoinIndex.segments = segments;\nPassjoinIndex.segmentPos = segmentPos;\nPassjoinIndex.multiMatchAwareInterval = multiMatchAwareInterval;\nPassjoinIndex.multiMatchAwareSubstrings = multiMatchAwareSubstrings;\n\nmodule.exports = PassjoinIndex;\n","/**\n * Mnemonist Queue\n * ================\n *\n * Queue implementation based on the ideas of Queue.js that seems to beat\n * a LinkedList one in performance.\n */\nvar Iterator = require('obliterator/iterator'),\n    forEach = require('obliterator/foreach');\n\n/**\n * Queue\n *\n * @constructor\n */\nfunction Queue() {\n  this.clear();\n}\n\n/**\n * Method used to clear the queue.\n *\n * @return {undefined}\n */\nQueue.prototype.clear = function() {\n\n  // Properties\n  this.items = [];\n  this.offset = 0;\n  this.size = 0;\n};\n\n/**\n * Method used to add an item to the queue.\n *\n * @param  {any}    item - Item to enqueue.\n * @return {number}\n */\nQueue.prototype.enqueue = function(item) {\n\n  this.items.push(item);\n  return ++this.size;\n};\n\n/**\n * Method used to retrieve & remove the first item of the queue.\n *\n * @return {any}\n */\nQueue.prototype.dequeue = function() {\n  if (!this.size)\n    return;\n\n  var item = this.items[this.offset];\n\n  if (++this.offset * 2 >= this.items.length) {\n    this.items = this.items.slice(this.offset);\n    this.offset = 0;\n  }\n\n  this.size--;\n\n  return item;\n};\n\n/**\n * Method used to retrieve the first item of the queue.\n *\n * @return {any}\n */\nQueue.prototype.peek = function() {\n  if (!this.size)\n    return;\n\n  return this.items[this.offset];\n};\n\n/**\n * Method used to iterate over the queue.\n *\n * @param  {function}  callback - Function to call for each item.\n * @param  {object}    scope    - Optional scope.\n * @return {undefined}\n */\nQueue.prototype.forEach = function(callback, scope) {\n  scope = arguments.length > 1 ? scope : this;\n\n  for (var i = this.offset, j = 0, l = this.items.length; i < l; i++, j++)\n    callback.call(scope, this.items[i], j, this);\n};\n\n/*\n * Method used to convert the queue to a JavaScript array.\n *\n * @return {array}\n */\nQueue.prototype.toArray = function() {\n  return this.items.slice(this.offset);\n};\n\n/**\n * Method used to create an iterator over a queue's values.\n *\n * @return {Iterator}\n */\nQueue.prototype.values = function() {\n  var items = this.items,\n      i = this.offset;\n\n  return new Iterator(function() {\n    if (i >= items.length)\n      return {\n        done: true\n      };\n\n    var value = items[i];\n    i++;\n\n    return {\n      value: value,\n      done: false\n    };\n  });\n};\n\n/**\n * Method used to create an iterator over a queue's entries.\n *\n * @return {Iterator}\n */\nQueue.prototype.entries = function() {\n  var items = this.items,\n      i = this.offset,\n      j = 0;\n\n  return new Iterator(function() {\n    if (i >= items.length)\n      return {\n        done: true\n      };\n\n    var value = items[i];\n    i++;\n\n    return {\n      value: [j++, value],\n      done: false\n    };\n  });\n};\n\n/**\n * Attaching the #.values method to Symbol.iterator if possible.\n */\nif (typeof Symbol !== 'undefined')\n  Queue.prototype[Symbol.iterator] = Queue.prototype.values;\n\n/**\n * Convenience known methods.\n */\nQueue.prototype.toString = function() {\n  return this.toArray().join(',');\n};\n\nQueue.prototype.toJSON = function() {\n  return this.toArray();\n};\n\nQueue.prototype.inspect = function() {\n  var array = this.toArray();\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(array, 'constructor', {\n    value: Queue,\n    enumerable: false\n  });\n\n  return array;\n};\n\nif (typeof Symbol !== 'undefined')\n  Queue.prototype[Symbol.for('nodejs.util.inspect.custom')] = Queue.prototype.inspect;\n\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a queue.\n *\n * @param  {Iterable} iterable   - Target iterable.\n * @return {Queue}\n */\nQueue.from = function(iterable) {\n  var queue = new Queue();\n\n  forEach(iterable, function(value) {\n    queue.enqueue(value);\n  });\n\n  return queue;\n};\n\n/**\n * Static @.of function taking an arbitrary number of arguments & converting it\n * into a queue.\n *\n * @param  {...any} args\n * @return {Queue}\n */\nQueue.of = function() {\n  return Queue.from(arguments);\n};\n\n/**\n * Exporting.\n */\nmodule.exports = Queue;\n","/**\n * Mnemonist Set\n * ==============\n *\n * Useful function related to sets such as union, intersection and so on...\n */\n\n// TODO: optimize versions for less variadicities\n\n/**\n * Variadic function computing the intersection of multiple sets.\n *\n * @param  {...Set} sets - Sets to intersect.\n * @return {Set}         - The intesection.\n */\nexports.intersection = function() {\n  if (arguments.length < 2)\n    throw new Error('mnemonist/Set.intersection: needs at least two arguments.');\n\n  var I = new Set();\n\n  // First we need to find the smallest set\n  var smallestSize = Infinity,\n      smallestSet = null;\n\n  var s, i, l = arguments.length;\n\n  for (i = 0; i < l; i++) {\n    s = arguments[i];\n\n    // If one of the set has no items, we can stop right there\n    if (s.size === 0)\n      return I;\n\n    if (s.size < smallestSize) {\n      smallestSize = s.size;\n      smallestSet = s;\n    }\n  }\n\n  // Now we need to intersect this set with the others\n  var iterator = smallestSet.values(),\n      step,\n      item,\n      add,\n      set;\n\n  // TODO: we can optimize by iterating each next time over the current intersection\n  // but this probably means more RAM to consume since we'll create n-1 sets rather than\n  // only the one.\n  while ((step = iterator.next(), !step.done)) {\n    item = step.value;\n    add = true;\n\n    for (i = 0; i < l; i++) {\n      set = arguments[i];\n\n      if (set === smallestSet)\n        continue;\n\n      if (!set.has(item)) {\n        add = false;\n        break;\n      }\n    }\n\n    if (add)\n      I.add(item);\n  }\n\n  return I;\n};\n\n/**\n * Variadic function computing the union of multiple sets.\n *\n * @param  {...Set} sets - Sets to unite.\n * @return {Set}         - The union.\n */\nexports.union = function() {\n  if (arguments.length < 2)\n    throw new Error('mnemonist/Set.union: needs at least two arguments.');\n\n  var U = new Set();\n\n  var i, l = arguments.length;\n\n  var iterator,\n      step;\n\n  for (i = 0; i < l; i++) {\n    iterator = arguments[i].values();\n\n    while ((step = iterator.next(), !step.done))\n      U.add(step.value);\n  }\n\n  return U;\n};\n\n/**\n * Function computing the difference between two sets.\n *\n * @param  {Set} A - First set.\n * @param  {Set} B - Second set.\n * @return {Set}   - The difference.\n */\nexports.difference = function(A, B) {\n\n  // If first set is empty\n  if (!A.size)\n    return new Set();\n\n  if (!B.size)\n    return new Set(A);\n\n  var D = new Set();\n\n  var iterator = A.values(),\n      step;\n\n  while ((step = iterator.next(), !step.done)) {\n    if (!B.has(step.value))\n      D.add(step.value);\n  }\n\n  return D;\n};\n\n/**\n * Function computing the symmetric difference between two sets.\n *\n * @param  {Set} A - First set.\n * @param  {Set} B - Second set.\n * @return {Set}   - The symmetric difference.\n */\nexports.symmetricDifference = function(A, B) {\n  var S = new Set();\n\n  var iterator = A.values(),\n      step;\n\n  while ((step = iterator.next(), !step.done)) {\n    if (!B.has(step.value))\n      S.add(step.value);\n  }\n\n  iterator = B.values();\n\n  while ((step = iterator.next(), !step.done)) {\n    if (!A.has(step.value))\n      S.add(step.value);\n  }\n\n  return S;\n};\n\n/**\n * Function returning whether A is a subset of B.\n *\n * @param  {Set} A - First set.\n * @param  {Set} B - Second set.\n * @return {boolean}\n */\nexports.isSubset = function(A, B) {\n  var iterator = A.values(),\n      step;\n\n  // Shortcuts\n  if (A === B)\n    return true;\n\n  if (A.size > B.size)\n    return false;\n\n  while ((step = iterator.next(), !step.done)) {\n    if (!B.has(step.value))\n      return false;\n  }\n\n  return true;\n};\n\n/**\n * Function returning whether A is a superset of B.\n *\n * @param  {Set} A - First set.\n * @param  {Set} B - Second set.\n * @return {boolean}\n */\nexports.isSuperset = function(A, B) {\n  return exports.isSubset(B, A);\n};\n\n/**\n * Function adding the items of set B to the set A.\n *\n * @param  {Set} A - First set.\n * @param  {Set} B - Second set.\n */\nexports.add = function(A, B) {\n  var iterator = B.values(),\n      step;\n\n  while ((step = iterator.next(), !step.done))\n    A.add(step.value);\n\n  return;\n};\n\n/**\n * Function subtracting the items of set B from the set A.\n *\n * @param  {Set} A - First set.\n * @param  {Set} B - Second set.\n */\nexports.subtract = function(A, B) {\n  var iterator = B.values(),\n      step;\n\n  while ((step = iterator.next(), !step.done))\n    A.delete(step.value);\n\n  return;\n};\n\n/**\n * Function intersecting the items of A & B.\n *\n * @param  {Set} A - First set.\n * @param  {Set} B - Second set.\n */\nexports.intersect = function(A, B) {\n  var iterator = A.values(),\n      step;\n\n  while ((step = iterator.next(), !step.done)) {\n    if (!B.has(step.value))\n      A.delete(step.value);\n  }\n\n  return;\n};\n\n/**\n * Function disjuncting the items of A & B.\n *\n * @param  {Set} A - First set.\n * @param  {Set} B - Second set.\n */\nexports.disjunct = function(A, B) {\n  var iterator = A.values(),\n      step;\n\n  var toRemove = [];\n\n  while ((step = iterator.next(), !step.done)) {\n    if (B.has(step.value))\n      toRemove.push(step.value);\n  }\n\n  iterator = B.values();\n\n  while ((step = iterator.next(), !step.done)) {\n    if (!A.has(step.value))\n      A.add(step.value);\n  }\n\n  for (var i = 0, l = toRemove.length; i < l; i++)\n    A.delete(toRemove[i]);\n\n  return;\n};\n\n/**\n * Function returning the size of the intersection of A & B.\n *\n * @param  {Set} A - First set.\n * @param  {Set} B - Second set.\n * @return {number}\n */\nexports.intersectionSize = function(A, B) {\n  var tmp;\n\n  // We need to know the smallest set\n  if (A.size > B.size) {\n    tmp = A;\n    A = B;\n    B = tmp;\n  }\n\n  if (A.size === 0)\n    return 0;\n\n  if (A === B)\n    return A.size;\n\n  var iterator = A.values(),\n      step;\n\n  var I = 0;\n\n  while ((step = iterator.next(), !step.done)) {\n    if (B.has(step.value))\n      I++;\n  }\n\n  return I;\n};\n\n/**\n * Function returning the size of the union of A & B.\n *\n * @param  {Set} A - First set.\n * @param  {Set} B - Second set.\n * @return {number}\n */\nexports.unionSize = function(A, B) {\n  var I = exports.intersectionSize(A, B);\n\n  return A.size + B.size - I;\n};\n\n/**\n * Function returning the Jaccard similarity between A & B.\n *\n * @param  {Set} A - First set.\n * @param  {Set} B - Second set.\n * @return {number}\n */\nexports.jaccard = function(A, B) {\n  var I = exports.intersectionSize(A, B);\n\n  if (I === 0)\n    return 0;\n\n  var U = A.size + B.size - I;\n\n  return I / U;\n};\n\n/**\n * Function returning the overlap coefficient between A & B.\n *\n * @param  {Set} A - First set.\n * @param  {Set} B - Second set.\n * @return {number}\n */\nexports.overlap = function(A, B) {\n  var I = exports.intersectionSize(A, B);\n\n  if (I === 0)\n    return 0;\n\n  return I / Math.min(A.size, B.size);\n};\n","/**\n * Mnemonist Quick Sort\n * =====================\n *\n * Quick sort related functions.\n * Adapted from: https://alienryderflex.com/quicksort/\n */\nvar LOS = new Float64Array(64),\n    HIS = new Float64Array(64);\n\nfunction inplaceQuickSort(array, lo, hi) {\n  var p, i, l, r, swap;\n\n  LOS[0] = lo;\n  HIS[0] = hi;\n  i = 0;\n\n  while (i >= 0) {\n    l = LOS[i];\n    r = HIS[i] - 1;\n\n    if (l < r) {\n      p = array[l];\n\n      while (l < r) {\n        while (array[r] >= p && l < r)\n          r--;\n\n        if (l < r)\n          array[l++] = array[r];\n\n        while (array[l] <= p && l < r)\n          l++;\n\n        if (l < r)\n          array[r--] = array[l];\n      }\n\n      array[l] = p;\n      LOS[i + 1] = l + 1;\n      HIS[i + 1] = HIS[i];\n      HIS[i++] = l;\n\n      if (HIS[i] - LOS[i] > HIS[i - 1] - LOS[i - 1]) {\n        swap = LOS[i];\n        LOS[i] = LOS[i - 1];\n        LOS[i - 1] = swap;\n\n        swap = HIS[i];\n        HIS[i] = HIS[i - 1];\n        HIS[i - 1] = swap;\n      }\n    }\n    else {\n      i--;\n    }\n  }\n\n  return array;\n}\n\nexports.inplaceQuickSort = inplaceQuickSort;\n\nfunction inplaceQuickSortIndices(array, indices, lo, hi) {\n  var p, i, l, r, t, swap;\n\n  LOS[0] = lo;\n  HIS[0] = hi;\n  i = 0;\n\n  while (i >= 0) {\n    l = LOS[i];\n    r = HIS[i] - 1;\n\n    if (l < r) {\n      t = indices[l];\n      p = array[t];\n\n      while (l < r) {\n        while (array[indices[r]] >= p && l < r)\n          r--;\n\n        if (l < r)\n          indices[l++] = indices[r];\n\n        while (array[indices[l]] <= p && l < r)\n          l++;\n\n        if (l < r)\n          indices[r--] = indices[l];\n      }\n\n      indices[l] = t;\n      LOS[i + 1] = l + 1;\n      HIS[i + 1] = HIS[i];\n      HIS[i++] = l;\n\n      if (HIS[i] - LOS[i] > HIS[i - 1] - LOS[i - 1]) {\n        swap = LOS[i];\n        LOS[i] = LOS[i - 1];\n        LOS[i - 1] = swap;\n\n        swap = HIS[i];\n        HIS[i] = HIS[i - 1];\n        HIS[i - 1] = swap;\n      }\n    }\n    else {\n      i--;\n    }\n  }\n\n  return indices;\n}\n\nexports.inplaceQuickSortIndices = inplaceQuickSortIndices;\n","/**\n * Mnemonist SparseMap\n * ====================\n *\n * JavaScript sparse map implemented on top of byte arrays.\n *\n * [Reference]: https://research.swtch.com/sparse\n */\nvar Iterator = require('obliterator/iterator'),\n    getPointerArray = require('./utils/typed-arrays.js').getPointerArray;\n\n/**\n * SparseMap.\n *\n * @constructor\n */\nfunction SparseMap(Values, length) {\n  if (arguments.length < 2) {\n    length = Values;\n    Values = Array;\n  }\n\n  var ByteArray = getPointerArray(length);\n\n  // Properties\n  this.size = 0;\n  this.length = length;\n  this.dense = new ByteArray(length);\n  this.sparse = new ByteArray(length);\n  this.vals = new Values(length);\n}\n\n/**\n * Method used to clear the structure.\n *\n * @return {undefined}\n */\nSparseMap.prototype.clear = function() {\n  this.size = 0;\n};\n\n/**\n * Method used to check the existence of a member in the set.\n *\n * @param  {number} member - Member to test.\n * @return {SparseMap}\n */\nSparseMap.prototype.has = function(member) {\n  var index = this.sparse[member];\n\n  return (\n    index < this.size &&\n    this.dense[index] === member\n  );\n};\n\n/**\n * Method used to get the value associated to a member in the set.\n *\n * @param  {number} member - Member to test.\n * @return {any}\n */\nSparseMap.prototype.get = function(member) {\n  var index = this.sparse[member];\n\n  if (index < this.size && this.dense[index] === member)\n    return this.vals[index];\n\n  return;\n};\n\n/**\n * Method used to set a value into the map.\n *\n * @param  {number} member - Member to set.\n * @param  {any}    value  - Associated value.\n * @return {SparseMap}\n */\nSparseMap.prototype.set = function(member, value) {\n  var index = this.sparse[member];\n\n  if (index < this.size && this.dense[index] === member) {\n    this.vals[index] = value;\n    return this;\n  }\n\n  this.dense[this.size] = member;\n  this.sparse[member] = this.size;\n  this.vals[this.size] = value;\n  this.size++;\n\n  return this;\n};\n\n/**\n * Method used to remove a member from the set.\n *\n * @param  {number} member - Member to delete.\n * @return {boolean}\n */\nSparseMap.prototype.delete = function(member) {\n  var index = this.sparse[member];\n\n  if (index >= this.size || this.dense[index] !== member)\n    return false;\n\n  index = this.dense[this.size - 1];\n  this.dense[this.sparse[member]] = index;\n  this.sparse[index] = this.sparse[member];\n  this.size--;\n\n  return true;\n};\n\n/**\n * Method used to iterate over the set's values.\n *\n * @param  {function}  callback - Function to call for each item.\n * @param  {object}    scope    - Optional scope.\n * @return {undefined}\n */\nSparseMap.prototype.forEach = function(callback, scope) {\n  scope = arguments.length > 1 ? scope : this;\n\n  for (var i = 0; i < this.size; i++)\n    callback.call(scope, this.vals[i], this.dense[i]);\n};\n\n/**\n * Method used to create an iterator over a set's members.\n *\n * @return {Iterator}\n */\nSparseMap.prototype.keys = function() {\n  var size = this.size,\n      dense = this.dense,\n      i = 0;\n\n  return new Iterator(function() {\n    if (i < size) {\n      var item = dense[i];\n      i++;\n\n      return {\n        value: item\n      };\n    }\n\n    return {\n      done: true\n    };\n  });\n};\n\n/**\n * Method used to create an iterator over a set's values.\n *\n * @return {Iterator}\n */\nSparseMap.prototype.values = function() {\n  var size = this.size,\n      values = this.vals,\n      i = 0;\n\n  return new Iterator(function() {\n    if (i < size) {\n      var item = values[i];\n      i++;\n\n      return {\n        value: item\n      };\n    }\n\n    return {\n      done: true\n    };\n  });\n};\n\n/**\n * Method used to create an iterator over a set's entries.\n *\n * @return {Iterator}\n */\nSparseMap.prototype.entries = function() {\n  var size = this.size,\n      dense = this.dense,\n      values = this.vals,\n      i = 0;\n\n  return new Iterator(function() {\n    if (i < size) {\n      var item = [dense[i], values[i]];\n      i++;\n\n      return {\n        value: item\n      };\n    }\n\n    return {\n      done: true\n    };\n  });\n};\n\n/**\n * Attaching the #.entries method to Symbol.iterator if possible.\n */\nif (typeof Symbol !== 'undefined')\n  SparseMap.prototype[Symbol.iterator] = SparseMap.prototype.entries;\n\n/**\n * Convenience known methods.\n */\nSparseMap.prototype.inspect = function() {\n  var proxy = new Map();\n\n  for (var i = 0; i < this.size; i++)\n    proxy.set(this.dense[i], this.vals[i]);\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(proxy, 'constructor', {\n    value: SparseMap,\n    enumerable: false\n  });\n\n  proxy.length = this.length;\n\n  if (this.vals.constructor !== Array)\n    proxy.type = this.vals.constructor.name;\n\n  return proxy;\n};\n\nif (typeof Symbol !== 'undefined')\n  SparseMap.prototype[Symbol.for('nodejs.util.inspect.custom')] = SparseMap.prototype.inspect;\n\n/**\n * Exporting.\n */\nmodule.exports = SparseMap;\n","/**\n * Mnemonist SparseQueueSet\n * =========================\n *\n * JavaScript sparse queue set implemented on top of byte arrays.\n *\n * [Reference]: https://research.swtch.com/sparse\n */\nvar Iterator = require('obliterator/iterator'),\n    getPointerArray = require('./utils/typed-arrays.js').getPointerArray;\n\n/**\n * SparseQueueSet.\n *\n * @constructor\n */\nfunction SparseQueueSet(capacity) {\n\n  var ByteArray = getPointerArray(capacity);\n\n  // Properties\n  this.start = 0;\n  this.size = 0;\n  this.capacity = capacity;\n  this.dense = new ByteArray(capacity);\n  this.sparse = new ByteArray(capacity);\n}\n\n/**\n * Method used to clear the structure.\n *\n * @return {undefined}\n */\nSparseQueueSet.prototype.clear = function() {\n  this.start = 0;\n  this.size = 0;\n};\n\n/**\n * Method used to check the existence of a member in the queue.\n *\n * @param  {number} member - Member to test.\n * @return {SparseQueueSet}\n */\nSparseQueueSet.prototype.has = function(member) {\n  if (this.size === 0)\n    return false;\n\n  var index = this.sparse[member];\n\n  var inBounds = (\n    index < this.capacity &&\n    (\n      index >= this.start &&\n      index < this.start + this.size\n    ) ||\n    (\n      index < ((this.start + this.size) % this.capacity)\n    )\n  );\n\n  return (\n    inBounds &&\n    this.dense[index] === member\n  );\n};\n\n/**\n * Method used to add a member to the queue.\n *\n * @param  {number} member - Member to add.\n * @return {SparseQueueSet}\n */\nSparseQueueSet.prototype.enqueue = function(member) {\n  var index = this.sparse[member];\n\n  if (this.size !== 0) {\n    var inBounds = (\n      index < this.capacity &&\n      (\n        index >= this.start &&\n        index < this.start + this.size\n      ) ||\n      (\n        index < ((this.start + this.size) % this.capacity)\n      )\n    );\n\n    if (inBounds && this.dense[index] === member)\n      return this;\n  }\n\n  index = (this.start + this.size) % this.capacity;\n\n  this.dense[index] = member;\n  this.sparse[member] = index;\n  this.size++;\n\n  return this;\n};\n\n/**\n * Method used to remove the next member from the queue.\n *\n * @param  {number} member - Member to delete.\n * @return {boolean}\n */\nSparseQueueSet.prototype.dequeue = function() {\n  if (this.size === 0)\n    return;\n\n  var index = this.start;\n\n  this.size--;\n  this.start++;\n\n  if (this.start === this.capacity)\n    this.start = 0;\n\n  var member = this.dense[index];\n\n  this.sparse[member] = this.capacity;\n\n  return member;\n};\n\n/**\n * Method used to iterate over the queue's values.\n *\n * @param  {function}  callback - Function to call for each item.\n * @param  {object}    scope    - Optional scope.\n * @return {undefined}\n */\nSparseQueueSet.prototype.forEach = function(callback, scope) {\n  scope = arguments.length > 1 ? scope : this;\n\n  var c = this.capacity,\n      l = this.size,\n      i = this.start,\n      j = 0;\n\n  while (j < l) {\n    callback.call(scope, this.dense[i], j, this);\n    i++;\n    j++;\n\n    if (i === c)\n      i = 0;\n  }\n};\n\n/**\n * Method used to create an iterator over a set's values.\n *\n * @return {Iterator}\n */\nSparseQueueSet.prototype.values = function() {\n  var dense = this.dense,\n      c = this.capacity,\n      l = this.size,\n      i = this.start,\n      j = 0;\n\n  return new Iterator(function() {\n    if (j >= l)\n      return {\n        done: true\n      };\n\n    var value = dense[i];\n\n    i++;\n    j++;\n\n    if (i === c)\n      i = 0;\n\n    return {\n      value: value,\n      done: false\n    };\n  });\n};\n\n/**\n * Attaching the #.values method to Symbol.iterator if possible.\n */\nif (typeof Symbol !== 'undefined')\n  SparseQueueSet.prototype[Symbol.iterator] = SparseQueueSet.prototype.values;\n\n/**\n * Convenience known methods.\n */\nSparseQueueSet.prototype.inspect = function() {\n  var proxy = [];\n\n  this.forEach(function(member) {\n    proxy.push(member);\n  });\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(proxy, 'constructor', {\n    value: SparseQueueSet,\n    enumerable: false\n  });\n\n  proxy.capacity = this.capacity;\n\n  return proxy;\n};\n\nif (typeof Symbol !== 'undefined')\n  SparseQueueSet.prototype[Symbol.for('nodejs.util.inspect.custom')] = SparseQueueSet.prototype.inspect;\n\n/**\n * Exporting.\n */\nmodule.exports = SparseQueueSet;\n","/**\n * Mnemonist SparseSet\n * ====================\n *\n * JavaScript sparse set implemented on top of byte arrays.\n *\n * [Reference]: https://research.swtch.com/sparse\n */\nvar Iterator = require('obliterator/iterator'),\n    getPointerArray = require('./utils/typed-arrays.js').getPointerArray;\n\n/**\n * SparseSet.\n *\n * @constructor\n */\nfunction SparseSet(length) {\n\n  var ByteArray = getPointerArray(length);\n\n  // Properties\n  this.size = 0;\n  this.length = length;\n  this.dense = new ByteArray(length);\n  this.sparse = new ByteArray(length);\n}\n\n/**\n * Method used to clear the structure.\n *\n * @return {undefined}\n */\nSparseSet.prototype.clear = function() {\n  this.size = 0;\n};\n\n/**\n * Method used to check the existence of a member in the set.\n *\n * @param  {number} member - Member to test.\n * @return {SparseSet}\n */\nSparseSet.prototype.has = function(member) {\n  var index = this.sparse[member];\n\n  return (\n    index < this.size &&\n    this.dense[index] === member\n  );\n};\n\n/**\n * Method used to add a member to the set.\n *\n * @param  {number} member - Member to add.\n * @return {SparseSet}\n */\nSparseSet.prototype.add = function(member) {\n  var index = this.sparse[member];\n\n  if (index < this.size && this.dense[index] === member)\n    return this;\n\n  this.dense[this.size] = member;\n  this.sparse[member] = this.size;\n  this.size++;\n\n  return this;\n};\n\n/**\n * Method used to remove a member from the set.\n *\n * @param  {number} member - Member to delete.\n * @return {boolean}\n */\nSparseSet.prototype.delete = function(member) {\n  var index = this.sparse[member];\n\n  if (index >= this.size || this.dense[index] !== member)\n    return false;\n\n  index = this.dense[this.size - 1];\n  this.dense[this.sparse[member]] = index;\n  this.sparse[index] = this.sparse[member];\n  this.size--;\n\n  return true;\n};\n\n/**\n * Method used to iterate over the set's values.\n *\n * @param  {function}  callback - Function to call for each item.\n * @param  {object}    scope    - Optional scope.\n * @return {undefined}\n */\nSparseSet.prototype.forEach = function(callback, scope) {\n  scope = arguments.length > 1 ? scope : this;\n\n  var item;\n\n  for (var i = 0; i < this.size; i++) {\n    item = this.dense[i];\n\n    callback.call(scope, item, item);\n  }\n};\n\n/**\n * Method used to create an iterator over a set's values.\n *\n * @return {Iterator}\n */\nSparseSet.prototype.values = function() {\n  var size = this.size,\n      dense = this.dense,\n      i = 0;\n\n  return new Iterator(function() {\n    if (i < size) {\n      var item = dense[i];\n      i++;\n\n      return {\n        value: item\n      };\n    }\n\n    return {\n      done: true\n    };\n  });\n};\n\n/**\n * Attaching the #.values method to Symbol.iterator if possible.\n */\nif (typeof Symbol !== 'undefined')\n  SparseSet.prototype[Symbol.iterator] = SparseSet.prototype.values;\n\n/**\n * Convenience known methods.\n */\nSparseSet.prototype.inspect = function() {\n  var proxy = new Set();\n\n  for (var i = 0; i < this.size; i++)\n    proxy.add(this.dense[i]);\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(proxy, 'constructor', {\n    value: SparseSet,\n    enumerable: false\n  });\n\n  proxy.length = this.length;\n\n  return proxy;\n};\n\nif (typeof Symbol !== 'undefined')\n  SparseSet.prototype[Symbol.for('nodejs.util.inspect.custom')] = SparseSet.prototype.inspect;\n\n/**\n * Exporting.\n */\nmodule.exports = SparseSet;\n","/**\n * Mnemonist Stack\n * ================\n *\n * Stack implementation relying on JavaScript arrays, which are fast enough &\n * correctly optimized for this kind of work.\n */\nvar Iterator = require('obliterator/iterator'),\n    forEach = require('obliterator/foreach');\n\n/**\n * Stack\n *\n * @constructor\n */\nfunction Stack() {\n  this.clear();\n}\n\n/**\n * Method used to clear the stack.\n *\n * @return {undefined}\n */\nStack.prototype.clear = function() {\n\n  // Properties\n  this.items = [];\n  this.size = 0;\n};\n\n/**\n * Method used to add an item to the stack.\n *\n * @param  {any}    item - Item to add.\n * @return {number}\n */\nStack.prototype.push = function(item) {\n  this.items.push(item);\n  return ++this.size;\n};\n\n/**\n * Method used to retrieve & remove the last item of the stack.\n *\n * @return {any}\n */\nStack.prototype.pop = function() {\n  if (this.size === 0)\n    return;\n\n  this.size--;\n  return this.items.pop();\n};\n\n/**\n * Method used to get the last item of the stack.\n *\n * @return {any}\n */\nStack.prototype.peek = function() {\n  return this.items[this.size - 1];\n};\n\n/**\n * Method used to iterate over the stack.\n *\n * @param  {function}  callback - Function to call for each item.\n * @param  {object}    scope    - Optional scope.\n * @return {undefined}\n */\nStack.prototype.forEach = function(callback, scope) {\n  scope = arguments.length > 1 ? scope : this;\n\n  for (var i = 0, l = this.items.length; i < l; i++)\n    callback.call(scope, this.items[l - i - 1], i, this);\n};\n\n/**\n * Method used to convert the stack to a JavaScript array.\n *\n * @return {array}\n */\nStack.prototype.toArray = function() {\n  var array = new Array(this.size),\n      l = this.size - 1,\n      i = this.size;\n\n  while (i--)\n    array[i] = this.items[l - i];\n\n  return array;\n};\n\n/**\n * Method used to create an iterator over a stack's values.\n *\n * @return {Iterator}\n */\nStack.prototype.values = function() {\n  var items = this.items,\n      l = items.length,\n      i = 0;\n\n  return new Iterator(function() {\n    if (i >= l)\n      return {\n        done: true\n      };\n\n    var value = items[l - i - 1];\n    i++;\n\n    return {\n      value: value,\n      done: false\n    };\n  });\n};\n\n/**\n * Method used to create an iterator over a stack's entries.\n *\n * @return {Iterator}\n */\nStack.prototype.entries = function() {\n  var items = this.items,\n      l = items.length,\n      i = 0;\n\n  return new Iterator(function() {\n    if (i >= l)\n      return {\n        done: true\n      };\n\n    var value = items[l - i - 1];\n\n    return {\n      value: [i++, value],\n      done: false\n    };\n  });\n};\n\n/**\n * Attaching the #.values method to Symbol.iterator if possible.\n */\nif (typeof Symbol !== 'undefined')\n  Stack.prototype[Symbol.iterator] = Stack.prototype.values;\n\n\n/**\n * Convenience known methods.\n */\nStack.prototype.toString = function() {\n  return this.toArray().join(',');\n};\n\nStack.prototype.toJSON = function() {\n  return this.toArray();\n};\n\nStack.prototype.inspect = function() {\n  var array = this.toArray();\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(array, 'constructor', {\n    value: Stack,\n    enumerable: false\n  });\n\n  return array;\n};\n\nif (typeof Symbol !== 'undefined')\n  Stack.prototype[Symbol.for('nodejs.util.inspect.custom')] = Stack.prototype.inspect;\n\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a stack.\n *\n * @param  {Iterable} iterable   - Target iterable.\n * @return {Stack}\n */\nStack.from = function(iterable) {\n  var stack = new Stack();\n\n  forEach(iterable, function(value) {\n    stack.push(value);\n  });\n\n  return stack;\n};\n\n/**\n * Static @.of function taking an arbitrary number of arguments & converting it\n * into a stack.\n *\n * @param  {...any} args\n * @return {Stack}\n */\nStack.of = function() {\n  return Stack.from(arguments);\n};\n\n/**\n * Exporting.\n */\nmodule.exports = Stack;\n","/* eslint no-constant-condition: 0 */\n/**\n * Mnemonist StaticDisjointSet\n * ============================\n *\n * JavaScript implementation of a static disjoint set (union-find).\n *\n * Note that to remain performant, this implementation needs to know a size\n * beforehand.\n */\nvar helpers = require('./utils/typed-arrays.js');\n\n/**\n * StaticDisjointSet.\n *\n * @constructor\n */\nfunction StaticDisjointSet(size) {\n\n  // Optimizing the typed array types\n  var ParentsTypedArray = helpers.getPointerArray(size),\n      RanksTypedArray = helpers.getPointerArray(Math.log2(size));\n\n  // Properties\n  this.size = size;\n  this.dimension = size;\n  this.parents = new ParentsTypedArray(size);\n  this.ranks = new RanksTypedArray(size);\n\n  // Initializing parents\n  for (var i = 0; i < size; i++)\n    this.parents[i] = i;\n}\n\n/**\n * Method used to find the root of the given item.\n *\n * @param  {number} x - Target item.\n * @return {number}\n */\nStaticDisjointSet.prototype.find = function(x) {\n  var y = x;\n\n  var c, p;\n\n  while (true) {\n    c = this.parents[y];\n\n    if (y === c)\n      break;\n\n    y = c;\n  }\n\n  // Path compression\n  while (true) {\n    p = this.parents[x];\n\n    if (p === y)\n      break;\n\n    this.parents[x] = y;\n    x = p;\n  }\n\n  return y;\n};\n\n/**\n * Method used to perform the union of two items.\n *\n * @param  {number} x - First item.\n * @param  {number} y - Second item.\n * @return {StaticDisjointSet}\n */\nStaticDisjointSet.prototype.union = function(x, y) {\n  var xRoot = this.find(x),\n      yRoot = this.find(y);\n\n  // x and y are already in the same set\n  if (xRoot === yRoot)\n    return this;\n\n  this.dimension--;\n\n  // x and y are not in the same set, we merge them\n  var xRank = this.ranks[x],\n      yRank = this.ranks[y];\n\n  if (xRank < yRank) {\n    this.parents[xRoot] = yRoot;\n  }\n  else if (xRank > yRank) {\n    this.parents[yRoot] = xRoot;\n  }\n  else {\n    this.parents[yRoot] = xRoot;\n    this.ranks[xRoot]++;\n  }\n\n  return this;\n};\n\n/**\n * Method returning whether two items are connected.\n *\n * @param  {number} x - First item.\n * @param  {number} y - Second item.\n * @return {boolean}\n */\nStaticDisjointSet.prototype.connected = function(x, y) {\n  var xRoot = this.find(x);\n\n  return xRoot === this.find(y);\n};\n\n/**\n * Method returning the set mapping.\n *\n * @return {TypedArray}\n */\nStaticDisjointSet.prototype.mapping = function() {\n  var MappingClass = helpers.getPointerArray(this.dimension);\n\n  var ids = {},\n      mapping = new MappingClass(this.size),\n      c = 0;\n\n  var r;\n\n  for (var i = 0, l = this.parents.length; i < l; i++) {\n    r = this.find(i);\n\n    if (typeof ids[r] === 'undefined') {\n      mapping[i] = c;\n      ids[r] = c++;\n    }\n    else {\n      mapping[i] = ids[r];\n    }\n  }\n\n  return mapping;\n};\n\n/**\n * Method used to compile the disjoint set into an array of arrays.\n *\n * @return {array}\n */\nStaticDisjointSet.prototype.compile = function() {\n  var ids = {},\n      result = new Array(this.dimension),\n      c = 0;\n\n  var r;\n\n  for (var i = 0, l = this.parents.length; i < l; i++) {\n    r = this.find(i);\n\n    if (typeof ids[r] === 'undefined') {\n      result[c] = [i];\n      ids[r] = c++;\n    }\n    else {\n      result[ids[r]].push(i);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Convenience known methods.\n */\nStaticDisjointSet.prototype.inspect = function() {\n  var array = this.compile();\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(array, 'constructor', {\n    value: StaticDisjointSet,\n    enumerable: false\n  });\n\n  return array;\n};\n\nif (typeof Symbol !== 'undefined')\n  StaticDisjointSet.prototype[Symbol.for('nodejs.util.inspect.custom')] = StaticDisjointSet.prototype.inspect;\n\n\n/**\n * Exporting.\n */\nmodule.exports = StaticDisjointSet;\n","/*\n * Mnemonist StaticIntervalTree\n * =============================\n *\n * JavaScript implementation of a static interval tree. This tree is static in\n * that you are required to know all its items beforehand and to built it\n * from an iterable.\n *\n * This implementation represents the interval tree as an augmented balanced\n * binary search tree. It works by sorting the intervals by startpoint first\n * then proceeds building the augmented balanced BST bottom-up from the\n * sorted list.\n *\n * Note that this implementation considers every given intervals as closed for\n * simplicity's sake.\n *\n * For more information: https://en.wikipedia.org/wiki/Interval_tree\n */\nvar iterables = require('./utils/iterables.js'),\n    typed = require('./utils/typed-arrays.js');\n\nvar FixedStack = require('./fixed-stack.js');\n\n\n// TODO: pass index to getters\n// TODO: custom comparison\n// TODO: possibility to pass offset buffer\n\n// TODO: intervals() => Symbol.iterator\n// TODO: dfs()\n\n/**\n * Helpers.\n */\n\n/**\n * Recursive function building the BST from the sorted list of interval\n * indices.\n *\n * @param  {array}    intervals     - Array of intervals to index.\n * @param  {function} endGetter     - Getter function for end of intervals.\n * @param  {array}    sortedIndices - Sorted indices of the intervals.\n * @param  {array}    tree          - BST memory.\n * @param  {array}    augmentations - Array of node augmentations.\n * @param  {number}   i             - BST index of current node.\n * @param  {number}   low           - Dichotomy low index.\n * @param  {number}   high          - Dichotomy high index.\n * @return {number}                 - Created node augmentation value.\n */\nfunction buildBST(\n  intervals,\n  endGetter,\n  sortedIndices,\n  tree,\n  augmentations,\n  i,\n  low,\n  high\n) {\n  var mid = (low + (high - low) / 2) | 0,\n      midMinusOne = ~-mid,\n      midPlusOne = -~mid;\n\n  var current = sortedIndices[mid];\n  tree[i] = current + 1;\n\n  var end = endGetter ? endGetter(intervals[current]) : intervals[current][1];\n\n  var left = i * 2 + 1,\n      right = i * 2 + 2;\n\n  var leftEnd = -Infinity,\n      rightEnd = -Infinity;\n\n  if (low <= midMinusOne) {\n    leftEnd = buildBST(\n      intervals,\n      endGetter,\n      sortedIndices,\n      tree,\n      augmentations,\n      left,\n      low,\n      midMinusOne\n    );\n  }\n\n  if (midPlusOne <= high) {\n    rightEnd = buildBST(\n      intervals,\n      endGetter,\n      sortedIndices,\n      tree,\n      augmentations,\n      right,\n      midPlusOne,\n      high\n    );\n  }\n\n  var augmentation = Math.max(end, leftEnd, rightEnd);\n\n  var augmentationPointer = current;\n\n  if (augmentation === leftEnd)\n    augmentationPointer = augmentations[tree[left] - 1];\n  else if (augmentation === rightEnd)\n    augmentationPointer = augmentations[tree[right] - 1];\n\n  augmentations[current] = augmentationPointer;\n\n  return augmentation;\n}\n\n/**\n * StaticIntervalTree.\n *\n * @constructor\n * @param {array}           intervals - Array of intervals to index.\n * @param {array<function>} getters   - Optional getters.\n */\nfunction StaticIntervalTree(intervals, getters) {\n\n  // Properties\n  this.size = intervals.length;\n  this.intervals = intervals;\n\n  var startGetter = null,\n      endGetter = null;\n\n  if (Array.isArray(getters)) {\n    startGetter = getters[0];\n    endGetter = getters[1];\n  }\n\n  // Building the indices array\n  var length = intervals.length;\n\n  var IndicesArray = typed.getPointerArray(length + 1);\n\n  var indices = new IndicesArray(length);\n\n  var i;\n\n  for (i = 1; i < length; i++)\n    indices[i] = i;\n\n  // Sorting indices array\n  // TODO: check if some version of radix sort can outperform this part\n  indices.sort(function(a, b) {\n    a = intervals[a];\n    b = intervals[b];\n\n    if (startGetter) {\n      a = startGetter(a);\n      b = startGetter(b);\n    }\n    else {\n      a = a[0];\n      b = b[0];\n    }\n\n    if (a < b)\n      return -1;\n\n    if (a > b)\n      return 1;\n\n    // TODO: use getters\n    // TODO: this ordering has the following invariant: if query interval\n    // contains [nodeStart, max], then whole right subtree can be collected\n    // a = a[1];\n    // b = b[1];\n\n    // if (a < b)\n    //   return 1;\n\n    // if (a > b)\n    //   return -1;\n\n    return 0;\n  });\n\n  // Building the binary tree\n  var height = Math.ceil(Math.log2(length + 1)),\n      treeSize = Math.pow(2, height) - 1;\n\n  var tree = new IndicesArray(treeSize);\n\n  var augmentations = new IndicesArray(length);\n\n  buildBST(\n    intervals,\n    endGetter,\n    indices,\n    tree,\n    augmentations,\n    0,\n    0,\n    length - 1\n  );\n\n  // Dropping indices\n  indices = null;\n\n  // Storing necessary information\n  this.height = height;\n  this.tree = tree;\n  this.augmentations = augmentations;\n  this.startGetter = startGetter;\n  this.endGetter = endGetter;\n\n  // Initializing DFS stack\n  this.stack = new FixedStack(IndicesArray, this.height);\n}\n\n/**\n * Method returning a list of intervals containing the given point.\n *\n * @param  {any}   point - Target point.\n * @return {array}\n */\nStaticIntervalTree.prototype.intervalsContainingPoint = function(point) {\n  var matches = [];\n\n  var stack = this.stack;\n\n  stack.clear();\n  stack.push(0);\n\n  var l = this.tree.length;\n\n  var bstIndex,\n      intervalIndex,\n      interval,\n      maxInterval,\n      start,\n      end,\n      max,\n      left,\n      right;\n\n  while (stack.size) {\n    bstIndex = stack.pop();\n    intervalIndex = this.tree[bstIndex] - 1;\n    interval = this.intervals[intervalIndex];\n    maxInterval = this.intervals[this.augmentations[intervalIndex]];\n\n    max = this.endGetter ? this.endGetter(maxInterval) : maxInterval[1];\n\n    // No possible match, point is farther right than the max end value\n    if (point > max)\n      continue;\n\n    // Searching left\n    left = bstIndex * 2 + 1;\n\n    if (left < l && this.tree[left] !== 0)\n      stack.push(left);\n\n    start = this.startGetter ? this.startGetter(interval) : interval[0];\n    end = this.endGetter ? this.endGetter(interval) : interval[1];\n\n    // Checking current node\n    if (point >= start && point <= end)\n      matches.push(interval);\n\n    // If the point is to the left of the start of the current interval,\n    // then it cannot be in the right child\n    if (point < start)\n      continue;\n\n    // Searching right\n    right = bstIndex * 2 + 2;\n\n    if (right < l && this.tree[right] !== 0)\n      stack.push(right);\n  }\n\n  return matches;\n};\n\n/**\n * Method returning a list of intervals overlapping the given interval.\n *\n * @param  {any}   interval - Target interval.\n * @return {array}\n */\nStaticIntervalTree.prototype.intervalsOverlappingInterval = function(interval) {\n  var intervalStart = this.startGetter ? this.startGetter(interval) : interval[0],\n      intervalEnd = this.endGetter ? this.endGetter(interval) : interval[1];\n\n  var matches = [];\n\n  var stack = this.stack;\n\n  stack.clear();\n  stack.push(0);\n\n  var l = this.tree.length;\n\n  var bstIndex,\n      intervalIndex,\n      currentInterval,\n      maxInterval,\n      start,\n      end,\n      max,\n      left,\n      right;\n\n  while (stack.size) {\n    bstIndex = stack.pop();\n    intervalIndex = this.tree[bstIndex] - 1;\n    currentInterval = this.intervals[intervalIndex];\n    maxInterval = this.intervals[this.augmentations[intervalIndex]];\n\n    max = this.endGetter ? this.endGetter(maxInterval) : maxInterval[1];\n\n    // No possible match, start is farther right than the max end value\n    if (intervalStart > max)\n      continue;\n\n    // Searching left\n    left = bstIndex * 2 + 1;\n\n    if (left < l && this.tree[left] !== 0)\n      stack.push(left);\n\n    start = this.startGetter ? this.startGetter(currentInterval) : currentInterval[0];\n    end = this.endGetter ? this.endGetter(currentInterval) : currentInterval[1];\n\n    // Checking current node\n    if (intervalEnd >= start && intervalStart <= end)\n      matches.push(currentInterval);\n\n    // If the end is to the left of the start of the current interval,\n    // then it cannot be in the right child\n    if (intervalEnd < start)\n      continue;\n\n    // Searching right\n    right = bstIndex * 2 + 2;\n\n    if (right < l && this.tree[right] !== 0)\n      stack.push(right);\n  }\n\n  return matches;\n};\n\n/**\n * Convenience known methods.\n */\nStaticIntervalTree.prototype.inspect = function() {\n  var proxy = this.intervals.slice();\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(proxy, 'constructor', {\n    value: StaticIntervalTree,\n    enumerable: false\n  });\n\n  return proxy;\n};\n\nif (typeof Symbol !== 'undefined')\n  StaticIntervalTree.prototype[Symbol.for('nodejs.util.inspect.custom')] = StaticIntervalTree.prototype.inspect;\n\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a structure.\n *\n * @param  {Iterable} iterable - Target iterable.\n * @return {StaticIntervalTree}\n */\nStaticIntervalTree.from = function(iterable, getters) {\n  if (iterables.isArrayLike(iterable))\n    return new StaticIntervalTree(iterable, getters);\n\n  return new StaticIntervalTree(Array.from(iterable), getters);\n};\n\n/**\n * Exporting.\n */\nmodule.exports = StaticIntervalTree;\n","/**\n * Mnemonist Suffix Array\n * =======================\n *\n * Linear time implementation of a suffix array using the recursive\n * method by Karkkainen and Sanders.\n *\n * [References]:\n * https://www.cs.helsinki.fi/u/tpkarkka/publications/jacm05-revised.pdf\n * http://people.mpi-inf.mpg.de/~sanders/programs/suffix/\n * http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.184.442&rep=rep1&type=pdf\n *\n * [Article]:\n * \"Simple Linear Work Suffix Array Construction\", Karkkainen and Sanders.\n *\n * [Note]:\n * A paper by Simon J. Puglisi, William F. Smyth & Andrew Turpin named\n * \"The Performance of Linear Time Suffix Sorting Algorithms\" seems to\n * prove that supralinear algorithm are in fact better faring for\n * \"real\" world use cases. It would be nice to check this out in JavaScript\n * because the high level of the language could change a lot to the fact.\n *\n * The current code is largely inspired by the following:\n * https://github.com/tixxit/suffixarray/blob/master/suffixarray.js\n */\n\n/**\n * Constants.\n */\nvar SEPARATOR = '\\u0001';\n\n/**\n * Function used to sort the triples.\n *\n * @param {string|array} string - Padded sequence.\n * @param {array}        array  - Array to sort (will be mutated).\n * @param {number}       offset - Index offset.\n */\nfunction sort(string, array, offset) {\n  var l = array.length,\n      buckets = [],\n      i = l,\n      j = -1,\n      b,\n      d = 0,\n      bits;\n\n  while (i--)\n    j = Math.max(string[array[i] + offset], j);\n\n  bits = j >> 24 && 32 || j >> 16 && 24 || j >> 8 && 16 || 8;\n\n  for (; d < bits; d += 4) {\n    for (i = 16; i--;)\n      buckets[i] = [];\n    for (i = l; i--;)\n      buckets[((string[array[i] + offset]) >> d) & 15].push(array[i]);\n    for (b = 0; b < 16; b++) {\n      for (j = buckets[b].length; j--;)\n        array[++i] = buckets[b][j];\n    }\n  }\n}\n\n/**\n * Comparison helper.\n */\nfunction compare(string, lookup, m, n) {\n  return (\n    (string[m] - string[n]) ||\n    (m % 3 === 2 ?\n      (string[m + 1] - string[n + 1]) || (lookup[m + 2] - lookup[n + 2]) :\n      (lookup[m + 1] - lookup[n + 1]))\n  );\n}\n\n/**\n * Recursive function used to build the suffix tree in linear time.\n *\n * @param  {string|array} string - Padded sequence.\n * @param  {number}       l      - True length of sequence (unpadded).\n * @return {array}\n */\nfunction build(string, l) {\n  var a = [],\n      b = [],\n      al = (2 * l / 3) | 0,\n      bl = l - al,\n      r = (al + 1) >> 1,\n      i = al,\n      j = 0,\n      k,\n      lookup = [],\n      result = [];\n\n  if (l === 1)\n    return [0];\n\n  while (i--)\n    a[i] = ((i * 3) >> 1) + 1;\n\n  for (i = 3; i--;)\n    sort(string, a, i);\n\n  j = b[((a[0] / 3) | 0) + (a[0] % 3 === 1 ? 0 : r)] = 1;\n\n  for (i = 1; i < al; i++) {\n    if (string[a[i]] !== string[a[i - 1]] ||\n        string[a[i] + 1] !== string[a[i - 1] + 1] ||\n        string[a[i] + 2] !== string[a[i - 1] + 2])\n      j++;\n\n    b[((a[i] / 3) | 0) + (a[i] % 3 === 1 ? 0 : r)] = j;\n  }\n\n  if (j < al) {\n    b = build(b, al);\n\n    for (i = al; i--;)\n      a[i] = b[i] < r ? b[i] * 3 + 1 : ((b[i] - r) * 3 + 2);\n  }\n\n  for (i = al; i--;)\n    lookup[a[i]] = i;\n  lookup[l] = -1;\n  lookup[l + 1] = -2;\n\n  b = l % 3 === 1 ? [l - 1] : [];\n\n  for (i = 0; i < al; i++) {\n    if (a[i] % 3 === 1)\n      b.push(a[i] - 1);\n  }\n\n  sort(string, b, 0);\n\n  for (i = 0, j = 0, k = 0; i < al && j < bl;)\n    result[k++] = (\n      compare(string, lookup, a[i], b[j]) < 0 ?\n        a[i++] :\n        b[j++]\n    );\n\n  while (i < al)\n    result[k++] = a[i++];\n\n  while (j < bl)\n    result[k++] = b[j++];\n\n  return result;\n}\n\n/**\n * Function used to create the array we are going to work on.\n *\n * @param  {string|array} target - Target sequence.\n * @return {array}\n */\nfunction convert(target) {\n\n  // Creating the alphabet array\n  var length = target.length,\n      paddingOffset = length % 3,\n      array = new Array(length + paddingOffset),\n      l,\n      i;\n\n  // If we have an arbitrary sequence, we need to transform it\n  if (typeof target !== 'string') {\n    var uniqueTokens = Object.create(null);\n\n    for (i = 0; i < length; i++) {\n      if (!uniqueTokens[target[i]])\n        uniqueTokens[target[i]] = true;\n    }\n\n    var alphabet = Object.create(null),\n        sortedUniqueTokens = Object.keys(uniqueTokens).sort();\n\n    for (i = 0, l = sortedUniqueTokens.length; i < l; i++)\n      alphabet[sortedUniqueTokens[i]] = i + 1;\n\n    for (i = 0; i < length; i++) {\n      array[i] = alphabet[target[i]];\n    }\n  }\n  else {\n    for (i = 0; i < length; i++)\n      array[i] = target.charCodeAt(i);\n  }\n\n  // Padding the array\n  for (i = length; i < length + paddingOffset; i++)\n    array[i] = 0;\n\n  return array;\n}\n\n/**\n * Suffix Array.\n *\n * @constructor\n * @param {string|array} string - Sequence for which to build the suffix array.\n */\nfunction SuffixArray(string) {\n\n  // Properties\n  this.hasArbitrarySequence = typeof string !== 'string';\n  this.string = string;\n  this.length = string.length;\n\n  // Building the array\n  this.array = build(convert(string), this.length);\n}\n\n/**\n * Convenience known methods.\n */\nSuffixArray.prototype.toString = function() {\n  return this.array.join(',');\n};\n\nSuffixArray.prototype.toJSON = function() {\n  return this.array;\n};\n\nSuffixArray.prototype.inspect = function() {\n  var array = new Array(this.length);\n\n  for (var i = 0; i < this.length; i++)\n    array[i] = this.string.slice(this.array[i]);\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(array, 'constructor', {\n    value: SuffixArray,\n    enumerable: false\n  });\n\n  return array;\n};\n\nif (typeof Symbol !== 'undefined')\n  SuffixArray.prototype[Symbol.for('nodejs.util.inspect.custom')] = SuffixArray.prototype.inspect;\n\n/**\n * Generalized Suffix Array.\n *\n * @constructor\n */\nfunction GeneralizedSuffixArray(strings) {\n\n  // Properties\n  this.hasArbitrarySequence = typeof strings[0] !== 'string';\n  this.size = strings.length;\n\n  if (this.hasArbitrarySequence) {\n    this.text = [];\n\n    for (var i = 0, l = this.size; i < l; i++) {\n      this.text.push.apply(this.text, strings[i]);\n\n      if (i < l - 1)\n        this.text.push(SEPARATOR);\n    }\n  }\n  else {\n    this.text = strings.join(SEPARATOR);\n  }\n\n  this.firstLength = strings[0].length;\n  this.length = this.text.length;\n\n  // Building the array\n  this.array = build(convert(this.text), this.length);\n}\n\n/**\n * Method used to retrieve the longest common subsequence of the generalized\n * suffix array.\n *\n * @return {string|array}\n */\nGeneralizedSuffixArray.prototype.longestCommonSubsequence = function() {\n  var lcs = this.hasArbitrarySequence ? [] : '',\n      lcp,\n      i,\n      j,\n      s,\n      t;\n\n  for (i = 1; i < this.length; i++) {\n    s = this.array[i];\n    t = this.array[i - 1];\n\n    if (s < this.firstLength &&\n        t < this.firstLength)\n      continue;\n\n    if (s > this.firstLength &&\n        t > this.firstLength)\n      continue;\n\n    lcp = Math.min(this.length - s, this.length - t);\n\n    for (j = 0; j < lcp; j++) {\n      if (this.text[s + j] !== this.text[t + j]) {\n        lcp = j;\n        break;\n      }\n    }\n\n    if (lcp > lcs.length)\n      lcs = this.text.slice(s, s + lcp);\n  }\n\n  return lcs;\n};\n\n/**\n * Convenience known methods.\n */\nGeneralizedSuffixArray.prototype.toString = function() {\n  return this.array.join(',');\n};\n\nGeneralizedSuffixArray.prototype.toJSON = function() {\n  return this.array;\n};\n\nGeneralizedSuffixArray.prototype.inspect = function() {\n  var array = new Array(this.length);\n\n  for (var i = 0; i < this.length; i++)\n    array[i] = this.text.slice(this.array[i]);\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(array, 'constructor', {\n    value: GeneralizedSuffixArray,\n    enumerable: false\n  });\n\n  return array;\n};\n\nif (typeof Symbol !== 'undefined')\n  GeneralizedSuffixArray.prototype[Symbol.for('nodejs.util.inspect.custom')] = GeneralizedSuffixArray.prototype.inspect;\n\n/**\n * Exporting.\n */\nSuffixArray.GeneralizedSuffixArray = GeneralizedSuffixArray;\nmodule.exports = SuffixArray;\n","/* eslint no-loop-func: 0 */\n/**\n * Mnemonist SymSpell\n * ===================\n *\n * JavaScript implementation of the Symmetric Delete Spelling dictionary to\n * efficiently index & query expression based on edit distance.\n * Note that the current implementation target the v3.0 of the algorithm.\n *\n * [Reference]:\n * http://blog.faroo.com/2012/06/07/improved-edit-distance-based-spelling-correction/\n * https://github.com/wolfgarbe/symspell\n *\n * [Author]:\n * Wolf Garbe\n */\nvar forEach = require('obliterator/foreach');\n\n/**\n * Constants.\n */\nvar DEFAULT_MAX_DISTANCE = 2,\n    DEFAULT_VERBOSITY = 2;\n\nvar VERBOSITY = new Set([\n  // Returns only the top suggestion\n  0,\n  // Returns suggestions with the smallest edit distance\n  1,\n  // Returns every suggestion (no early termination)\n  2\n]);\n\nvar VERBOSITY_EXPLANATIONS = {\n  0: 'Returns only the top suggestion',\n  1: 'Returns suggestions with the smallest edit distance',\n  2: 'Returns every suggestion (no early termination)'\n};\n\n/**\n * Functions.\n */\n\n/**\n * Function creating a dictionary item.\n *\n * @param  {number} [value] - An optional suggestion.\n * @return {object}         - The created item.\n */\nfunction createDictionaryItem(value) {\n  var suggestions = new Set();\n\n  if (typeof value === 'number')\n    suggestions.add(value);\n\n  return {\n    suggestions,\n    count: 0\n  };\n}\n\n/**\n * Function creating a suggestion item.\n *\n * @return {object} - The created item.\n */\nfunction createSuggestionItem(term, distance, count) {\n  return {\n    term: term || '',\n    distance: distance || 0,\n    count: count || 0\n  };\n}\n\n/**\n * Simplified edit function.\n *\n * @param {string} word      - Target word.\n * @param {number} distance  - Distance.\n * @param {number} max       - Max distance.\n * @param {Set}    [deletes] - Set mutated to store deletes.\n */\nfunction edits(word, distance, max, deletes) {\n  deletes = deletes || new Set();\n  distance++;\n\n  var deletedItem,\n      l = word.length,\n      i;\n\n  if (l > 1) {\n    for (i = 0; i < l; i++) {\n      deletedItem = word.substring(0, i) + word.substring(i + 1);\n\n      if (!deletes.has(deletedItem)) {\n        deletes.add(deletedItem);\n\n        if (distance < max)\n          edits(deletedItem, distance, max, deletes);\n      }\n    }\n  }\n\n  return deletes;\n}\n\n/**\n * Function used to conditionally add suggestions.\n *\n * @param {array}  words       - Words list.\n * @param {number} verbosity   - Verbosity level.\n * @param {object} item        - The target item.\n * @param {string} suggestion  - The target suggestion.\n * @param {number} int         - Integer key of the word.\n * @param {object} deletedItem - Considered deleted item.\n * @param {SymSpell}\n */\nfunction addLowestDistance(words, verbosity, item, suggestion, int, deletedItem) {\n  var first = item.suggestions.values().next().value;\n\n  if (verbosity < 2 &&\n      item.suggestions.size > 0 &&\n      words[first].length - deletedItem.length > suggestion.length - deletedItem.length) {\n    item.suggestions = new Set();\n    item.count = 0;\n  }\n\n  if (verbosity === 2 ||\n      !item.suggestions.size ||\n      words[first].length - deletedItem.length >= suggestion.length - deletedItem.length) {\n    item.suggestions.add(int);\n  }\n}\n\n/**\n * Custom Damerau-Levenshtein used by the algorithm.\n *\n * @param  {string} source - First string.\n * @param  {string} target - Second string.\n * @return {number}        - The distance.\n */\nfunction damerauLevenshtein(source, target) {\n  var m = source.length,\n      n = target.length,\n      H = [[]],\n      INF = m + n,\n      sd = new Map(),\n      i,\n      l,\n      j;\n\n  H[0][0] = INF;\n\n  for (i = 0; i <= m; i++) {\n    if (!H[i + 1])\n      H[i + 1] = [];\n    H[i + 1][1] = i;\n    H[i + 1][0] = INF;\n  }\n\n  for (j = 0; j <= n; j++) {\n    H[1][j + 1] = j;\n    H[0][j + 1] = INF;\n  }\n\n  var st = source + target,\n      letter;\n\n  for (i = 0, l = st.length; i < l; i++) {\n    letter = st[i];\n\n    if (!sd.has(letter))\n      sd.set(letter, 0);\n  }\n\n  // Iterating\n  for (i = 1; i <= m; i++) {\n    var DB = 0;\n\n    for (j = 1; j <= n; j++) {\n      var i1 = sd.get(target[j - 1]),\n          j1 = DB;\n\n      if (source[i - 1] === target[j - 1]) {\n        H[i + 1][j + 1] = H[i][j];\n        DB = j;\n      }\n      else {\n        H[i + 1][j + 1] = Math.min(\n          H[i][j],\n          H[i + 1][j],\n          H[i][j + 1]\n        ) + 1;\n      }\n\n      H[i + 1][j + 1] = Math.min(\n        H[i + 1][j + 1],\n        H[i1][j1] + (i - i1 - 1) + 1 + (j - j1 - 1)\n      );\n    }\n\n    sd.set(source[i - 1], i);\n  }\n\n  return H[m + 1][n + 1];\n}\n\n/**\n * Lookup function.\n *\n * @param  {object} dictionary  - A SymSpell dictionary.\n * @param  {array}  words       - Unique words list.\n * @param  {number} verbosity   - Verbosity level.\n * @param  {number} maxDistance - Maximum distance.\n * @param  {number} maxLength   - Maximum word length in the dictionary.\n * @param  {string} input       - Input string.\n * @return {array}              - The list of suggestions.\n */\nfunction lookup(dictionary, words, verbosity, maxDistance, maxLength, input) {\n  var length = input.length;\n\n  if (length - maxDistance > maxLength)\n    return [];\n\n  var candidates = [input],\n      candidateSet = new Set(),\n      suggestionSet = new Set();\n\n  var suggestions = [],\n      candidate,\n      item;\n\n  // Exhausting every candidates\n  while (candidates.length > 0) {\n    candidate = candidates.shift();\n\n    // Early termination\n    if (\n      verbosity < 2 &&\n      suggestions.length > 0 &&\n      length - candidate.length > suggestions[0].distance\n    )\n      break;\n\n    item = dictionary[candidate];\n\n    if (item !== undefined) {\n      if (typeof item === 'number')\n        item = createDictionaryItem(item);\n\n      if (item.count > 0 && !suggestionSet.has(candidate)) {\n        suggestionSet.add(candidate);\n\n        var suggestItem = createSuggestionItem(\n          candidate,\n          length - candidate.length,\n          item.count\n        );\n\n        suggestions.push(suggestItem);\n\n        // Another early termination\n        if (verbosity < 2 && length - candidate.length === 0)\n          break;\n      }\n\n      // Iterating over the item's suggestions\n      item.suggestions.forEach(index => {\n        var suggestion = words[index];\n\n        // Do we already have this suggestion?\n        if (suggestionSet.has(suggestion))\n          return;\n\n        suggestionSet.add(suggestion);\n\n        // Computing distance between candidate & suggestion\n        var distance = 0;\n\n        if (input !== suggestion) {\n          if (suggestion.length === candidate.length) {\n            distance = length - candidate.length;\n          }\n          else if (length === candidate.length) {\n            distance = suggestion.length - candidate.length;\n          }\n          else {\n            var ii = 0,\n                jj = 0;\n\n            var l = suggestion.length;\n\n            while (\n              ii < l &&\n              ii < length &&\n              suggestion[ii] === input[ii]\n            ) {\n              ii++;\n            }\n\n            while (\n              jj < l - ii &&\n              jj < length &&\n              suggestion[l - jj - 1] === input[length - jj - 1]\n            ) {\n              jj++;\n            }\n\n            if (ii > 0 || jj > 0) {\n              distance = damerauLevenshtein(\n                suggestion.substr(ii, l - ii - jj),\n                input.substr(ii, length - ii - jj)\n              );\n            }\n            else {\n              distance = damerauLevenshtein(suggestion, input);\n            }\n          }\n        }\n\n        // Removing suggestions of higher distance\n        if (verbosity < 2 &&\n            suggestions.length > 0 &&\n            suggestions[0].distance > distance) {\n          suggestions = [];\n        }\n\n        if (verbosity < 2 &&\n            suggestions.length > 0 &&\n            distance > suggestions[0].distance) {\n          return;\n        }\n\n        if (distance <= maxDistance) {\n          var target = dictionary[suggestion];\n\n          if (target !== undefined) {\n            suggestions.push(createSuggestionItem(\n              suggestion,\n              distance,\n              target.count\n            ));\n          }\n        }\n      });\n    }\n\n    // Adding edits\n    if (length - candidate.length < maxDistance) {\n\n      if (verbosity < 2 &&\n          suggestions.length > 0 &&\n          length - candidate.length >= suggestions[0].distance)\n        continue;\n\n      for (var i = 0, l = candidate.length; i < l; i++) {\n        var deletedItem = (\n          candidate.substring(0, i) +\n          candidate.substring(i + 1)\n        );\n\n        if (!candidateSet.has(deletedItem)) {\n          candidateSet.add(deletedItem);\n          candidates.push(deletedItem);\n        }\n      }\n    }\n  }\n\n  if (verbosity === 0)\n    return suggestions.slice(0, 1);\n\n  return suggestions;\n}\n\n/**\n * SymSpell.\n *\n * @constructor\n */\nfunction SymSpell(options) {\n  options = options || {};\n\n  this.clear();\n\n  // Properties\n  this.maxDistance = typeof options.maxDistance === 'number' ?\n    options.maxDistance :\n    DEFAULT_MAX_DISTANCE;\n  this.verbosity = typeof options.verbosity === 'number' ?\n    options.verbosity :\n    DEFAULT_VERBOSITY;\n\n  // Sanity checks\n  if (typeof this.maxDistance !== 'number' || this.maxDistance <= 0)\n    throw Error('mnemonist/SymSpell.constructor: invalid `maxDistance` option. Should be a integer greater than 0.');\n\n  if (!VERBOSITY.has(this.verbosity))\n    throw Error('mnemonist/SymSpell.constructor: invalid `verbosity` option. Should be either 0, 1 or 2.');\n}\n\n/**\n * Method used to clear the structure.\n *\n * @return {undefined}\n */\nSymSpell.prototype.clear = function() {\n\n  // Properties\n  this.size = 0;\n  this.dictionary = Object.create(null);\n  this.maxLength = 0;\n  this.words = [];\n};\n\n/**\n * Method used to add a word to the index.\n *\n * @param {string} word - Word to add.\n * @param {SymSpell}\n */\nSymSpell.prototype.add = function(word) {\n  var item = this.dictionary[word];\n\n  if (item !== undefined) {\n    if (typeof item === 'number') {\n      item = createDictionaryItem(item);\n      this.dictionary[word] = item;\n    }\n\n    item.count++;\n  }\n\n  else {\n    item = createDictionaryItem();\n    item.count++;\n\n    this.dictionary[word] = item;\n\n    if (word.length > this.maxLength)\n      this.maxLength = word.length;\n  }\n\n  if (item.count === 1) {\n    var number = this.words.length;\n    this.words.push(word);\n\n    var deletes = edits(word, 0, this.maxDistance);\n\n    deletes.forEach(deletedItem => {\n      var target = this.dictionary[deletedItem];\n\n      if (target !== undefined) {\n        if (typeof target === 'number') {\n          target = createDictionaryItem(target);\n\n          this.dictionary[deletedItem] = target;\n        }\n\n        if (!target.suggestions.has(number)) {\n          addLowestDistance(\n            this.words,\n            this.verbosity,\n            target,\n            word,\n            number,\n            deletedItem\n          );\n        }\n      }\n      else {\n        this.dictionary[deletedItem] = number;\n      }\n    });\n  }\n\n  this.size++;\n\n  return this;\n};\n\n/**\n * Method used to search the index.\n *\n * @param  {string} input - Input query.\n * @return {array}        - The found suggestions.\n */\nSymSpell.prototype.search = function(input) {\n  return lookup(\n    this.dictionary,\n    this.words,\n    this.verbosity,\n    this.maxDistance,\n    this.maxLength,\n    input\n  );\n};\n\n/**\n * Convenience known methods.\n */\nSymSpell.prototype.inspect = function() {\n  var array = [];\n\n  array.size = this.size;\n  array.maxDistance = this.maxDistance;\n  array.verbosity = this.verbosity;\n  array.behavior = VERBOSITY_EXPLANATIONS[this.verbosity];\n\n  for (var k in this.dictionary) {\n    if (typeof this.dictionary[k] === 'object' && this.dictionary[k].count)\n      array.push([k, this.dictionary[k].count]);\n  }\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(array, 'constructor', {\n    value: SymSpell,\n    enumerable: false\n  });\n\n  return array;\n};\n\nif (typeof Symbol !== 'undefined')\n  SymSpell.prototype[Symbol.for('nodejs.util.inspect.custom')] = SymSpell.prototype.inspect;\n\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a structure.\n *\n * @param  {Iterable} iterable - Target iterable.\n * @return {SymSpell}\n */\nSymSpell.from = function(iterable, options) {\n  var index = new SymSpell(options);\n\n  forEach(iterable, function(value) {\n    index.add(value);\n  });\n\n  return index;\n};\n\n/**\n * Exporting.\n */\nmodule.exports = SymSpell;\n","/**\n * Mnemonist TrieMap\n * ==================\n *\n * JavaScript TrieMap implementation based upon plain objects. As such this\n * structure is more a convenience building upon the trie's advantages than\n * a real performant alternative to already existing structures.\n *\n * Note that the Trie is based upon the TrieMap since the underlying machine\n * is the very same. The Trie just does not let you set values and only\n * considers the existence of the given prefixes.\n */\nvar forEach = require('obliterator/foreach'),\n    Iterator = require('obliterator/iterator');\n\n/**\n * Constants.\n */\nvar SENTINEL = String.fromCharCode(0);\n\n/**\n * TrieMap.\n *\n * @constructor\n */\nfunction TrieMap(Token) {\n  this.mode = Token === Array ? 'array' : 'string';\n  this.clear();\n}\n\n/**\n * Method used to clear the trie.\n *\n * @return {undefined}\n */\nTrieMap.prototype.clear = function() {\n\n  // Properties\n  this.root = {};\n  this.size = 0;\n};\n\n/**\n * Method used to set the value of the given prefix in the trie.\n *\n * @param  {string|array} prefix - Prefix to follow.\n * @param  {any}          value  - Value for the prefix.\n * @return {TrieMap}\n */\nTrieMap.prototype.set = function(prefix, value) {\n  var node = this.root,\n      token;\n\n  for (var i = 0, l = prefix.length; i < l; i++) {\n    token = prefix[i];\n\n    node = node[token] || (node[token] = {});\n  }\n\n  // Do we need to increase size?\n  if (!(SENTINEL in node))\n    this.size++;\n\n  node[SENTINEL] = value;\n\n  return this;\n};\n\n/**\n * Method used to update the value of the given prefix in the trie.\n *\n * @param  {string|array} prefix - Prefix to follow.\n * @param  {(oldValue: any | undefined) => any} updateFunction - Update value visitor callback.\n * @return {TrieMap}\n */\nTrieMap.prototype.update = function(prefix, updateFunction) {\n  var node = this.root,\n      token;\n\n  for (var i = 0, l = prefix.length; i < l; i++) {\n    token = prefix[i];\n\n    node = node[token] || (node[token] = {});\n  }\n\n  // Do we need to increase size?\n  if (!(SENTINEL in node))\n    this.size++;\n\n  node[SENTINEL] = updateFunction(node[SENTINEL]);\n\n  return this;\n};\n\n/**\n * Method used to return the value sitting at the end of the given prefix or\n * undefined if none exist.\n *\n * @param  {string|array} prefix - Prefix to follow.\n * @return {any|undefined}\n */\nTrieMap.prototype.get = function(prefix) {\n  var node = this.root,\n      token,\n      i,\n      l;\n\n  for (i = 0, l = prefix.length; i < l; i++) {\n    token = prefix[i];\n    node = node[token];\n\n    // Prefix does not exist\n    if (typeof node === 'undefined')\n      return;\n  }\n\n  if (!(SENTINEL in node))\n    return;\n\n  return node[SENTINEL];\n};\n\n/**\n * Method used to delete a prefix from the trie.\n *\n * @param  {string|array} prefix - Prefix to delete.\n * @return {boolean}\n */\nTrieMap.prototype.delete = function(prefix) {\n  var node = this.root,\n      toPrune = null,\n      tokenToPrune = null,\n      parent,\n      token,\n      i,\n      l;\n\n  for (i = 0, l = prefix.length; i < l; i++) {\n    token = prefix[i];\n    parent = node;\n    node = node[token];\n\n    // Prefix does not exist\n    if (typeof node === 'undefined')\n      return false;\n\n    // Keeping track of a potential branch to prune\n    if (toPrune !== null) {\n      if (Object.keys(node).length > 1) {\n        toPrune = null;\n        tokenToPrune = null;\n      }\n    }\n    else {\n      if (Object.keys(node).length < 2) {\n        toPrune = parent;\n        tokenToPrune = token;\n      }\n    }\n  }\n\n  if (!(SENTINEL in node))\n    return false;\n\n  this.size--;\n\n  if (toPrune)\n    delete toPrune[tokenToPrune];\n  else\n    delete node[SENTINEL];\n\n  return true;\n};\n\n// TODO: add #.prune?\n\n/**\n * Method used to assert whether the given prefix exists in the TrieMap.\n *\n * @param  {string|array} prefix - Prefix to check.\n * @return {boolean}\n */\nTrieMap.prototype.has = function(prefix) {\n  var node = this.root,\n      token;\n\n  for (var i = 0, l = prefix.length; i < l; i++) {\n    token = prefix[i];\n    node = node[token];\n\n    if (typeof node === 'undefined')\n      return false;\n  }\n\n  return SENTINEL in node;\n};\n\n/**\n * Method used to retrieve every item in the trie with the given prefix.\n *\n * @param  {string|array} prefix - Prefix to query.\n * @return {array}\n */\nTrieMap.prototype.find = function(prefix) {\n  var isString = typeof prefix === 'string';\n\n  var node = this.root,\n      matches = [],\n      token,\n      i,\n      l;\n\n  for (i = 0, l = prefix.length; i < l; i++) {\n    token = prefix[i];\n    node = node[token];\n\n    if (typeof node === 'undefined')\n      return matches;\n  }\n\n  // Performing DFS from prefix\n  var nodeStack = [node],\n      prefixStack = [prefix],\n      k;\n\n  while (nodeStack.length) {\n    prefix = prefixStack.pop();\n    node = nodeStack.pop();\n\n    for (k in node) {\n      if (k === SENTINEL) {\n        matches.push([prefix, node[SENTINEL]]);\n        continue;\n      }\n\n      nodeStack.push(node[k]);\n      prefixStack.push(isString ? prefix + k : prefix.concat(k));\n    }\n  }\n\n  return matches;\n};\n\n/**\n * Method returning an iterator over the trie's values.\n *\n * @param  {string|array} [prefix] - Optional starting prefix.\n * @return {Iterator}\n */\nTrieMap.prototype.values = function(prefix) {\n  var node = this.root,\n      nodeStack = [],\n      token,\n      i,\n      l;\n\n  // Resolving initial prefix\n  if (prefix) {\n    for (i = 0, l = prefix.length; i < l; i++) {\n      token = prefix[i];\n      node = node[token];\n\n      // If the prefix does not exist, we return an empty iterator\n      if (typeof node === 'undefined')\n        return Iterator.empty();\n    }\n  }\n\n  nodeStack.push(node);\n\n  return new Iterator(function() {\n    var currentNode,\n        hasValue = false,\n        k;\n\n    while (nodeStack.length) {\n      currentNode = nodeStack.pop();\n\n      for (k in currentNode) {\n        if (k === SENTINEL) {\n          hasValue = true;\n          continue;\n        }\n\n        nodeStack.push(currentNode[k]);\n      }\n\n      if (hasValue)\n        return {done: false, value: currentNode[SENTINEL]};\n    }\n\n    return {done: true};\n  });\n};\n\n/**\n * Method returning an iterator over the trie's prefixes.\n *\n * @param  {string|array} [prefix] - Optional starting prefix.\n * @return {Iterator}\n */\nTrieMap.prototype.prefixes = function(prefix) {\n  var node = this.root,\n      nodeStack = [],\n      prefixStack = [],\n      token,\n      i,\n      l;\n\n  var isString = this.mode === 'string';\n\n  // Resolving initial prefix\n  if (prefix) {\n    for (i = 0, l = prefix.length; i < l; i++) {\n      token = prefix[i];\n      node = node[token];\n\n      // If the prefix does not exist, we return an empty iterator\n      if (typeof node === 'undefined')\n        return Iterator.empty();\n    }\n  }\n  else {\n    prefix = isString ? '' : [];\n  }\n\n  nodeStack.push(node);\n  prefixStack.push(prefix);\n\n  return new Iterator(function() {\n    var currentNode,\n        currentPrefix,\n        hasValue = false,\n        k;\n\n    while (nodeStack.length) {\n      currentNode = nodeStack.pop();\n      currentPrefix = prefixStack.pop();\n\n      for (k in currentNode) {\n        if (k === SENTINEL) {\n          hasValue = true;\n          continue;\n        }\n\n        nodeStack.push(currentNode[k]);\n        prefixStack.push(isString ? currentPrefix + k : currentPrefix.concat(k));\n      }\n\n      if (hasValue)\n        return {done: false, value: currentPrefix};\n    }\n\n    return {done: true};\n  });\n};\nTrieMap.prototype.keys = TrieMap.prototype.prefixes;\n\n/**\n * Method returning an iterator over the trie's entries.\n *\n * @param  {string|array} [prefix] - Optional starting prefix.\n * @return {Iterator}\n */\nTrieMap.prototype.entries = function(prefix) {\n  var node = this.root,\n      nodeStack = [],\n      prefixStack = [],\n      token,\n      i,\n      l;\n\n  var isString = this.mode === 'string';\n\n  // Resolving initial prefix\n  if (prefix) {\n    for (i = 0, l = prefix.length; i < l; i++) {\n      token = prefix[i];\n      node = node[token];\n\n      // If the prefix does not exist, we return an empty iterator\n      if (typeof node === 'undefined')\n        return Iterator.empty();\n    }\n  }\n  else {\n    prefix = isString ? '' : [];\n  }\n\n  nodeStack.push(node);\n  prefixStack.push(prefix);\n\n  return new Iterator(function() {\n    var currentNode,\n        currentPrefix,\n        hasValue = false,\n        k;\n\n    while (nodeStack.length) {\n      currentNode = nodeStack.pop();\n      currentPrefix = prefixStack.pop();\n\n      for (k in currentNode) {\n        if (k === SENTINEL) {\n          hasValue = true;\n          continue;\n        }\n\n        nodeStack.push(currentNode[k]);\n        prefixStack.push(isString ? currentPrefix + k : currentPrefix.concat(k));\n      }\n\n      if (hasValue)\n        return {done: false, value: [currentPrefix, currentNode[SENTINEL]]};\n    }\n\n    return {done: true};\n  });\n};\n\n/**\n * Attaching the #.entries method to Symbol.iterator if possible.\n */\nif (typeof Symbol !== 'undefined')\n  TrieMap.prototype[Symbol.iterator] = TrieMap.prototype.entries;\n\n/**\n * Convenience known methods.\n */\nTrieMap.prototype.inspect = function() {\n  var proxy = new Array(this.size);\n\n  var iterator = this.entries(),\n      step,\n      i = 0;\n\n  while ((step = iterator.next(), !step.done))\n    proxy[i++] = step.value;\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(proxy, 'constructor', {\n    value: TrieMap,\n    enumerable: false\n  });\n\n  return proxy;\n};\n\nif (typeof Symbol !== 'undefined')\n  TrieMap.prototype[Symbol.for('nodejs.util.inspect.custom')] = TrieMap.prototype.inspect;\n\nTrieMap.prototype.toJSON = function() {\n  return this.root;\n};\n\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a trie.\n *\n * @param  {Iterable} iterable   - Target iterable.\n * @return {TrieMap}\n */\nTrieMap.from = function(iterable) {\n  var trie = new TrieMap();\n\n  forEach(iterable, function(value, key) {\n    trie.set(key, value);\n  });\n\n  return trie;\n};\n\n/**\n * Exporting.\n */\nTrieMap.SENTINEL = SENTINEL;\nmodule.exports = TrieMap;\n","/**\n * Mnemonist Trie\n * ===============\n *\n * JavaScript Trie implementation based upon plain objects. As such this\n * structure is more a convenience building upon the trie's advantages than\n * a real performant alternative to already existing structures.\n *\n * Note that the Trie is based upon the TrieMap since the underlying machine\n * is the very same. The Trie just does not let you set values and only\n * considers the existence of the given prefixes.\n */\nvar forEach = require('obliterator/foreach'),\n    TrieMap = require('./trie-map.js');\n\n/**\n * Constants.\n */\nvar SENTINEL = String.fromCharCode(0);\n\n/**\n * Trie.\n *\n * @constructor\n */\nfunction Trie(Token) {\n  this.mode = Token === Array ? 'array' : 'string';\n  this.clear();\n}\n\n// Re-using TrieMap's prototype\nfor (var methodName in TrieMap.prototype)\n  Trie.prototype[methodName] = TrieMap.prototype[methodName];\n\n// Dropping irrelevant methods\ndelete Trie.prototype.set;\ndelete Trie.prototype.get;\ndelete Trie.prototype.values;\ndelete Trie.prototype.entries;\n\n/**\n * Method used to add the given prefix to the trie.\n *\n * @param  {string|array} prefix - Prefix to follow.\n * @return {TrieMap}\n */\nTrie.prototype.add = function(prefix) {\n  var node = this.root,\n      token;\n\n  for (var i = 0, l = prefix.length; i < l; i++) {\n    token = prefix[i];\n\n    node = node[token] || (node[token] = {});\n  }\n\n  // Do we need to increase size?\n  if (!(SENTINEL in node))\n    this.size++;\n\n  node[SENTINEL] = true;\n\n  return this;\n};\n\n/**\n * Method used to retrieve every item in the trie with the given prefix.\n *\n * @param  {string|array} prefix - Prefix to query.\n * @return {array}\n */\nTrie.prototype.find = function(prefix) {\n  var isString = typeof prefix === 'string';\n\n  var node = this.root,\n      matches = [],\n      token,\n      i,\n      l;\n\n  for (i = 0, l = prefix.length; i < l; i++) {\n    token = prefix[i];\n    node = node[token];\n\n    if (typeof node === 'undefined')\n      return matches;\n  }\n\n  // Performing DFS from prefix\n  var nodeStack = [node],\n      prefixStack = [prefix],\n      k;\n\n  while (nodeStack.length) {\n    prefix = prefixStack.pop();\n    node = nodeStack.pop();\n\n    for (k in node) {\n      if (k === SENTINEL) {\n        matches.push(prefix);\n        continue;\n      }\n\n      nodeStack.push(node[k]);\n      prefixStack.push(isString ? prefix + k : prefix.concat(k));\n    }\n  }\n\n  return matches;\n};\n\n/**\n * Attaching the #.keys method to Symbol.iterator if possible.\n */\nif (typeof Symbol !== 'undefined')\n  Trie.prototype[Symbol.iterator] = Trie.prototype.keys;\n\n/**\n * Convenience known methods.\n */\nTrie.prototype.inspect = function() {\n  var proxy = new Set();\n\n  var iterator = this.keys(),\n      step;\n\n  while ((step = iterator.next(), !step.done))\n    proxy.add(step.value);\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(proxy, 'constructor', {\n    value: Trie,\n    enumerable: false\n  });\n\n  return proxy;\n};\n\nif (typeof Symbol !== 'undefined')\n  Trie.prototype[Symbol.for('nodejs.util.inspect.custom')] = Trie.prototype.inspect;\n\nTrie.prototype.toJSON = function() {\n  return this.root;\n};\n\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a trie.\n *\n * @param  {Iterable} iterable   - Target iterable.\n * @return {Trie}\n */\nTrie.from = function(iterable) {\n  var trie = new Trie();\n\n  forEach(iterable, function(value) {\n    trie.add(value);\n  });\n\n  return trie;\n};\n\n/**\n * Exporting.\n */\nTrie.SENTINEL = SENTINEL;\nmodule.exports = Trie;\n","/**\n * Mnemonist Binary Search Helpers\n * ================================\n *\n * Typical binary search functions.\n */\n\n/**\n * Function returning the index of the search value in the array or `-1` if\n * not found.\n *\n * @param  {array} array - Haystack.\n * @param  {any}   value - Needle.\n * @return {number}\n */\nexports.search = function(array, value, lo, hi) {\n  var mid = 0;\n\n  lo = typeof lo !== 'undefined' ? lo : 0;\n  hi = typeof hi !== 'undefined' ? hi : array.length;\n\n  hi--;\n\n  var current;\n\n  while (lo <= hi) {\n    mid = (lo + hi) >>> 1;\n\n    current = array[mid];\n\n    if (current > value) {\n      hi = ~-mid;\n    }\n    else if (current < value) {\n      lo = -~mid;\n    }\n    else {\n      return mid;\n    }\n  }\n\n  return -1;\n};\n\n/**\n * Same as above, but can use a custom comparator function.\n *\n * @param  {function} comparator - Custom comparator function.\n * @param  {array}    array      - Haystack.\n * @param  {any}      value      - Needle.\n * @return {number}\n */\nexports.searchWithComparator = function(comparator, array, value) {\n  var mid = 0,\n      lo = 0,\n      hi = ~-array.length,\n      comparison;\n\n  while (lo <= hi) {\n    mid = (lo + hi) >>> 1;\n\n    comparison = comparator(array[mid], value);\n\n    if (comparison > 0) {\n      hi = ~-mid;\n    }\n    else if (comparison < 0) {\n      lo = -~mid;\n    }\n    else {\n      return mid;\n    }\n  }\n\n  return -1;\n};\n\n/**\n * Function returning the lower bound of the given value in the array.\n *\n * @param  {array}  array - Haystack.\n * @param  {any}    value - Needle.\n * @param  {number} [lo] - Start index.\n * @param  {numner} [hi] - End index.\n * @return {number}\n */\nexports.lowerBound = function(array, value, lo, hi) {\n  var mid = 0;\n\n  lo = typeof lo !== 'undefined' ? lo : 0;\n  hi = typeof hi !== 'undefined' ? hi : array.length;\n\n  while (lo < hi) {\n    mid = (lo + hi) >>> 1;\n\n    if (value <= array[mid]) {\n      hi = mid;\n    }\n    else {\n      lo = -~mid;\n    }\n  }\n\n  return lo;\n};\n\n/**\n * Same as above, but can use a custom comparator function.\n *\n * @param  {function} comparator - Custom comparator function.\n * @param  {array}    array      - Haystack.\n * @param  {any}      value      - Needle.\n * @return {number}\n */\nexports.lowerBoundWithComparator = function(comparator, array, value) {\n  var mid = 0,\n      lo = 0,\n      hi = array.length;\n\n  while (lo < hi) {\n    mid = (lo + hi) >>> 1;\n\n    if (comparator(value, array[mid]) <= 0) {\n      hi = mid;\n    }\n    else {\n      lo = -~mid;\n    }\n  }\n\n  return lo;\n};\n\n/**\n * Same as above, but can work on sorted indices.\n *\n * @param  {array}    array - Haystack.\n * @param  {array}    array - Indices.\n * @param  {any}      value - Needle.\n * @return {number}\n */\nexports.lowerBoundIndices = function(array, indices, value, lo, hi) {\n  var mid = 0;\n\n  lo = typeof lo !== 'undefined' ? lo : 0;\n  hi = typeof hi !== 'undefined' ? hi : array.length;\n\n  while (lo < hi) {\n    mid = (lo + hi) >>> 1;\n\n    if (value <= array[indices[mid]]) {\n      hi = mid;\n    }\n    else {\n      lo = -~mid;\n    }\n  }\n\n  return lo;\n};\n\n/**\n * Function returning the upper bound of the given value in the array.\n *\n * @param  {array}  array - Haystack.\n * @param  {any}    value - Needle.\n * @param  {number} [lo] - Start index.\n * @param  {numner} [hi] - End index.\n * @return {number}\n */\nexports.upperBound = function(array, value, lo, hi) {\n  var mid = 0;\n\n  lo = typeof lo !== 'undefined' ? lo : 0;\n  hi = typeof hi !== 'undefined' ? hi : array.length;\n\n  while (lo < hi) {\n    mid = (lo + hi) >>> 1;\n\n    if (value >= array[mid]) {\n      lo = -~mid;\n    }\n    else {\n      hi = mid;\n    }\n  }\n\n  return lo;\n};\n\n/**\n * Same as above, but can use a custom comparator function.\n *\n * @param  {function} comparator - Custom comparator function.\n * @param  {array}    array      - Haystack.\n * @param  {any}      value      - Needle.\n * @return {number}\n */\nexports.upperBoundWithComparator = function(comparator, array, value) {\n  var mid = 0,\n      lo = 0,\n      hi = array.length;\n\n  while (lo < hi) {\n    mid = (lo + hi) >>> 1;\n\n    if (comparator(value, array[mid]) >= 0) {\n      lo = -~mid;\n    }\n    else {\n      hi = mid;\n    }\n  }\n\n  return lo;\n};\n","/**\n * Mnemonist Bitwise Helpers\n * ==========================\n *\n * Miscellaneous helpers helping with bitwise operations.\n */\n\n/**\n * Takes a 32 bits integer and returns its MSB using SWAR strategy.\n *\n * @param  {number} x - Target number.\n * @return {number}\n */\nfunction msb32(x) {\n  x |= (x >> 1);\n  x |= (x >> 2);\n  x |= (x >> 4);\n  x |= (x >> 8);\n  x |= (x >> 16);\n\n  return (x & ~(x >> 1));\n}\nexports.msb32 = msb32;\n\n/**\n * Takes a byte and returns its MSB using SWAR strategy.\n *\n * @param  {number} x - Target number.\n * @return {number}\n */\nfunction msb8(x) {\n  x |= (x >> 1);\n  x |= (x >> 2);\n  x |= (x >> 4);\n\n  return (x & ~(x >> 1));\n}\nexports.msb8 = msb8;\n\n/**\n * Takes a number and return bit at position.\n *\n * @param  {number} x   - Target number.\n * @param  {number} pos - Position.\n * @return {number}\n */\nexports.test = function(x, pos) {\n  return (x >> pos) & 1;\n};\n\n/**\n * Compare two bytes and return their critical bit.\n *\n * @param  {number} a - First byte.\n * @param  {number} b - Second byte.\n * @return {number}\n */\nexports.criticalBit8 = function(a, b) {\n  return msb8(a ^ b);\n};\n\nexports.criticalBit8Mask = function(a, b) {\n  return (~msb8(a ^ b) >>> 0) & 0xff;\n};\n\nexports.testCriticalBit8 = function(x, mask) {\n  return (1 + (x | mask)) >> 8;\n};\n\nexports.criticalBit32Mask = function(a, b) {\n  return (~msb32(a ^ b) >>> 0) & 0xffffffff;\n};\n\n/**\n * Takes a 32 bits integer and returns its population count (number of 1 of\n * the binary representation).\n *\n * @param  {number} x - Target number.\n * @return {number}\n */\nexports.popcount = function(x) {\n  x -= x >> 1 & 0x55555555;\n  x = (x & 0x33333333) + (x >> 2 & 0x33333333);\n  x = x + (x >> 4) & 0x0f0f0f0f;\n  x += x >> 8;\n  x += x >> 16;\n  return x & 0x7f;\n};\n\n/**\n * Slightly faster popcount function based on a precomputed table of 8bits\n * words.\n *\n * @param  {number} x - Target number.\n * @return {number}\n */\nvar TABLE8 = new Uint8Array(Math.pow(2, 8));\n\nfor (var i = 0, l = TABLE8.length; i < l; i++)\n  TABLE8[i] = exports.popcount(i);\n\nexports.table8Popcount = function(x) {\n  return (\n    TABLE8[x & 0xff] +\n    TABLE8[(x >> 8) & 0xff] +\n    TABLE8[(x >> 16) & 0xff] +\n    TABLE8[(x >> 24) & 0xff]\n  );\n};\n","/**\n * Mnemonist Heap Comparators\n * ===========================\n *\n * Default comparators & functions dealing with comparators reversing etc.\n */\nvar DEFAULT_COMPARATOR = function(a, b) {\n  if (a < b)\n    return -1;\n  if (a > b)\n    return 1;\n\n  return 0;\n};\n\nvar DEFAULT_REVERSE_COMPARATOR = function(a, b) {\n  if (a < b)\n    return 1;\n  if (a > b)\n    return -1;\n\n  return 0;\n};\n\n/**\n * Function used to reverse a comparator.\n */\nfunction reverseComparator(comparator) {\n  return function(a, b) {\n    return comparator(b, a);\n  };\n}\n\n/**\n * Function returning a tuple comparator.\n */\nfunction createTupleComparator(size) {\n  if (size === 2) {\n    return function(a, b) {\n      if (a[0] < b[0])\n        return -1;\n\n      if (a[0] > b[0])\n        return 1;\n\n      if (a[1] < b[1])\n        return -1;\n\n      if (a[1] > b[1])\n        return 1;\n\n      return 0;\n    };\n  }\n\n  return function(a, b) {\n    var i = 0;\n\n    while (i < size) {\n      if (a[i] < b[i])\n        return -1;\n\n      if (a[i] > b[i])\n        return 1;\n\n      i++;\n    }\n\n    return 0;\n  };\n}\n\n/**\n * Exporting.\n */\nexports.DEFAULT_COMPARATOR = DEFAULT_COMPARATOR;\nexports.DEFAULT_REVERSE_COMPARATOR = DEFAULT_REVERSE_COMPARATOR;\nexports.reverseComparator = reverseComparator;\nexports.createTupleComparator = createTupleComparator;\n","/**\n * Mnemonist Iterable Function\n * ============================\n *\n * Harmonized iteration helpers over mixed iterable targets.\n */\nvar forEach = require('obliterator/foreach');\n\nvar typed = require('./typed-arrays.js');\n\n/**\n * Function used to determine whether the given object supports array-like\n * random access.\n *\n * @param  {any} target - Target object.\n * @return {boolean}\n */\nfunction isArrayLike(target) {\n  return Array.isArray(target) || typed.isTypedArray(target);\n}\n\n/**\n * Function used to guess the length of the structure over which we are going\n * to iterate.\n *\n * @param  {any} target - Target object.\n * @return {number|undefined}\n */\nfunction guessLength(target) {\n  if (typeof target.length === 'number')\n    return target.length;\n\n  if (typeof target.size === 'number')\n    return target.size;\n\n  return;\n}\n\n/**\n * Function used to convert an iterable to an array.\n *\n * @param  {any}   target - Iteration target.\n * @return {array}\n */\nfunction toArray(target) {\n  var l = guessLength(target);\n\n  var array = typeof l === 'number' ? new Array(l) : [];\n\n  var i = 0;\n\n  // TODO: we could optimize when given target is array like\n  forEach(target, function(value) {\n    array[i++] = value;\n  });\n\n  return array;\n}\n\n/**\n * Same as above but returns a supplementary indices array.\n *\n * @param  {any}   target - Iteration target.\n * @return {array}\n */\nfunction toArrayWithIndices(target) {\n  var l = guessLength(target);\n\n  var IndexArray = typeof l === 'number' ?\n    typed.getPointerArray(l) :\n    Array;\n\n  var array = typeof l === 'number' ? new Array(l) : [];\n  var indices = typeof l === 'number' ? new IndexArray(l) : [];\n\n  var i = 0;\n\n  // TODO: we could optimize when given target is array like\n  forEach(target, function(value) {\n    array[i] = value;\n    indices[i] = i++;\n  });\n\n  return [array, indices];\n}\n\n/**\n * Exporting.\n */\nexports.isArrayLike = isArrayLike;\nexports.guessLength = guessLength;\nexports.toArray = toArray;\nexports.toArrayWithIndices = toArrayWithIndices;\n","/* eslint no-constant-condition: 0 */\n/**\n * Mnemonist Merge Helpers\n * ========================\n *\n * Various merge algorithms used to handle sorted lists. Note that the given\n * functions are optimized and won't accept mixed arguments.\n *\n * Note: maybe this piece of code belong to sortilege, along with binary-search.\n */\nvar typed = require('./typed-arrays.js'),\n    isArrayLike = require('./iterables.js').isArrayLike,\n    binarySearch = require('./binary-search.js'),\n    FibonacciHeap = require('../fibonacci-heap.js');\n\n// TODO: update to use exponential search\n// TODO: when not knowing final length => should use plain arrays rather than\n// same type as input\n\n/**\n * Merge two sorted array-like structures into one.\n *\n * @param  {array} a - First array.\n * @param  {array} b - Second array.\n * @return {array}\n */\nfunction mergeArrays(a, b) {\n\n  // One of the arrays is empty\n  if (a.length === 0)\n    return b.slice();\n  if (b.length === 0)\n    return a.slice();\n\n  // Finding min array\n  var tmp;\n\n  if (a[0] > b[0]) {\n    tmp = a;\n    a = b;\n    b = tmp;\n  }\n\n  // If array have non overlapping ranges, we can just concatenate them\n  var aEnd = a[a.length - 1],\n      bStart = b[0];\n\n  if (aEnd <= bStart) {\n    if (typed.isTypedArray(a))\n      return typed.concat(a, b);\n    return a.concat(b);\n  }\n\n  // Initializing target\n  var array = new a.constructor(a.length + b.length);\n\n  // Iterating until we overlap\n  var i, l, v;\n\n  for (i = 0, l = a.length; i < l; i++) {\n    v = a[i];\n\n    if (v <= bStart)\n      array[i] = v;\n    else\n      break;\n  }\n\n  // Handling overlap\n  var aPointer = i,\n      aLength = a.length,\n      bPointer = 0,\n      bLength = b.length,\n      aHead,\n      bHead;\n\n  while (aPointer < aLength && bPointer < bLength) {\n    aHead = a[aPointer];\n    bHead = b[bPointer];\n\n    if (aHead <= bHead) {\n      array[i++] = aHead;\n      aPointer++;\n    }\n    else {\n      array[i++] = bHead;\n      bPointer++;\n    }\n  }\n\n  // Filling\n  while (aPointer < aLength)\n    array[i++] = a[aPointer++];\n  while (bPointer < bLength)\n    array[i++] = b[bPointer++];\n\n  return array;\n}\n\n/**\n * Perform the union of two already unique sorted array-like structures into one.\n *\n * @param  {array} a - First array.\n * @param  {array} b - Second array.\n * @return {array}\n */\nfunction unionUniqueArrays(a, b) {\n\n  // One of the arrays is empty\n  if (a.length === 0)\n    return b.slice();\n  if (b.length === 0)\n    return a.slice();\n\n  // Finding min array\n  var tmp;\n\n  if (a[0] > b[0]) {\n    tmp = a;\n    a = b;\n    b = tmp;\n  }\n\n  // If array have non overlapping ranges, we can just concatenate them\n  var aEnd = a[a.length - 1],\n      bStart = b[0];\n\n  if (aEnd < bStart) {\n    if (typed.isTypedArray(a))\n      return typed.concat(a, b);\n    return a.concat(b);\n  }\n\n  // Initializing target\n  var array = new a.constructor();\n\n  // Iterating until we overlap\n  var i, l, v;\n\n  for (i = 0, l = a.length; i < l; i++) {\n    v = a[i];\n\n    if (v < bStart)\n      array.push(v);\n    else\n      break;\n  }\n\n  // Handling overlap\n  var aPointer = i,\n      aLength = a.length,\n      bPointer = 0,\n      bLength = b.length,\n      aHead,\n      bHead;\n\n  while (aPointer < aLength && bPointer < bLength) {\n    aHead = a[aPointer];\n    bHead = b[bPointer];\n\n    if (aHead <= bHead) {\n\n      if (array.length === 0 || array[array.length - 1] !== aHead)\n        array.push(aHead);\n\n      aPointer++;\n    }\n    else {\n      if (array.length === 0 || array[array.length - 1] !== bHead)\n        array.push(bHead);\n\n      bPointer++;\n    }\n  }\n\n  // Filling\n  // TODO: it's possible to optimize a bit here, since the condition is only\n  // relevant the first time\n  while (aPointer < aLength) {\n    aHead = a[aPointer++];\n\n    if (array.length === 0 || array[array.length - 1] !== aHead)\n      array.push(aHead);\n  }\n  while (bPointer < bLength) {\n    bHead = b[bPointer++];\n\n    if (array.length === 0 || array[array.length - 1] !== bHead)\n      array.push(bHead);\n  }\n\n  return array;\n}\n\n/**\n * Perform the intersection of two already unique sorted array-like structures into one.\n *\n * @param  {array} a - First array.\n * @param  {array} b - Second array.\n * @return {array}\n */\nexports.intersectionUniqueArrays = function(a, b) {\n\n  // One of the arrays is empty\n  if (a.length === 0 || b.length === 0)\n    return new a.constructor(0);\n\n  // Finding min array\n  var tmp;\n\n  if (a[0] > b[0]) {\n    tmp = a;\n    a = b;\n    b = tmp;\n  }\n\n  // If array have non overlapping ranges, there is no intersection\n  var aEnd = a[a.length - 1],\n      bStart = b[0];\n\n  if (aEnd < bStart)\n    return new a.constructor(0);\n\n  // Initializing target\n  var array = new a.constructor();\n\n  // Handling overlap\n  var aPointer = binarySearch.lowerBound(a, bStart),\n      aLength = a.length,\n      bPointer = 0,\n      bLength = binarySearch.upperBound(b, aEnd),\n      aHead,\n      bHead;\n\n  while (aPointer < aLength && bPointer < bLength) {\n    aHead = a[aPointer];\n    bHead = b[bPointer];\n\n    if (aHead < bHead) {\n      aPointer = binarySearch.lowerBound(a, bHead, aPointer + 1);\n    }\n    else if (aHead > bHead) {\n      bPointer = binarySearch.lowerBound(b, aHead, bPointer + 1);\n    }\n    else {\n      array.push(aHead);\n      aPointer++;\n      bPointer++;\n    }\n  }\n\n  return array;\n};\n\n/**\n * Merge k sorted array-like structures into one.\n *\n * @param  {array<array>} arrays - Arrays to merge.\n * @return {array}\n */\nfunction kWayMergeArrays(arrays) {\n  var length = 0,\n      max = -Infinity,\n      al,\n      i,\n      l;\n\n  var filtered = [];\n\n  for (i = 0, l = arrays.length; i < l; i++) {\n    al = arrays[i].length;\n\n    if (al === 0)\n      continue;\n\n    filtered.push(arrays[i]);\n\n    length += al;\n\n    if (al > max)\n      max = al;\n  }\n\n  if (filtered.length === 0)\n    return new arrays[0].constructor(0);\n\n  if (filtered.length === 1)\n    return filtered[0].slice();\n\n  if (filtered.length === 2)\n    return mergeArrays(filtered[0], filtered[1]);\n\n  arrays = filtered;\n\n  var array = new arrays[0].constructor(length);\n\n  var PointerArray = typed.getPointerArray(max);\n\n  var pointers = new PointerArray(arrays.length);\n\n  // TODO: benchmark vs. a binomial heap\n  var heap = new FibonacciHeap(function(a, b) {\n    a = arrays[a][pointers[a]];\n    b = arrays[b][pointers[b]];\n\n    if (a < b)\n      return -1;\n\n    if (a > b)\n      return 1;\n\n    return 0;\n  });\n\n  for (i = 0; i < l; i++)\n    heap.push(i);\n\n  i = 0;\n\n  var p,\n      v;\n\n  while (heap.size) {\n    p = heap.pop();\n    v = arrays[p][pointers[p]++];\n    array[i++] = v;\n\n    if (pointers[p] < arrays[p].length)\n      heap.push(p);\n  }\n\n  return array;\n}\n\n/**\n * Perform the union of k sorted unique array-like structures into one.\n *\n * @param  {array<array>} arrays - Arrays to merge.\n * @return {array}\n */\nfunction kWayUnionUniqueArrays(arrays) {\n  var max = -Infinity,\n      al,\n      i,\n      l;\n\n  var filtered = [];\n\n  for (i = 0, l = arrays.length; i < l; i++) {\n    al = arrays[i].length;\n\n    if (al === 0)\n      continue;\n\n    filtered.push(arrays[i]);\n\n    if (al > max)\n      max = al;\n  }\n\n  if (filtered.length === 0)\n    return new arrays[0].constructor(0);\n\n  if (filtered.length === 1)\n    return filtered[0].slice();\n\n  if (filtered.length === 2)\n    return unionUniqueArrays(filtered[0], filtered[1]);\n\n  arrays = filtered;\n\n  var array = new arrays[0].constructor();\n\n  var PointerArray = typed.getPointerArray(max);\n\n  var pointers = new PointerArray(arrays.length);\n\n  // TODO: benchmark vs. a binomial heap\n  var heap = new FibonacciHeap(function(a, b) {\n    a = arrays[a][pointers[a]];\n    b = arrays[b][pointers[b]];\n\n    if (a < b)\n      return -1;\n\n    if (a > b)\n      return 1;\n\n    return 0;\n  });\n\n  for (i = 0; i < l; i++)\n    heap.push(i);\n\n  var p,\n      v;\n\n  while (heap.size) {\n    p = heap.pop();\n    v = arrays[p][pointers[p]++];\n\n    if (array.length === 0 || array[array.length - 1] !== v)\n      array.push(v);\n\n    if (pointers[p] < arrays[p].length)\n      heap.push(p);\n  }\n\n  return array;\n}\n\n/**\n * Perform the intersection of k sorted array-like structures into one.\n *\n * @param  {array<array>} arrays - Arrays to merge.\n * @return {array}\n */\nexports.kWayIntersectionUniqueArrays = function(arrays) {\n  var max = -Infinity,\n      maxStart = -Infinity,\n      minEnd = Infinity,\n      first,\n      last,\n      al,\n      i,\n      l;\n\n  for (i = 0, l = arrays.length; i < l; i++) {\n    al = arrays[i].length;\n\n    // If one of the arrays is empty, so is the intersection\n    if (al === 0)\n      return [];\n\n    if (al > max)\n      max = al;\n\n    first = arrays[i][0];\n    last = arrays[i][al - 1];\n\n    if (first > maxStart)\n      maxStart = first;\n\n    if (last < minEnd)\n      minEnd = last;\n  }\n\n  // Full overlap is impossible\n  if (maxStart > minEnd)\n    return [];\n\n  // Only one value\n  if (maxStart === minEnd)\n    return [maxStart];\n\n  // NOTE: trying to outsmart I(D,I(C,I(A,B))) is pointless unfortunately...\n  // NOTE: I tried to be very clever about bounds but it does not seem\n  // to improve the performance of the algorithm.\n  var a, b,\n      array = arrays[0],\n      aPointer,\n      bPointer,\n      aLimit,\n      bLimit,\n      aHead,\n      bHead,\n      start = maxStart;\n\n  for (i = 1; i < l; i++) {\n    a = array;\n    b = arrays[i];\n\n    // Change that to `[]` and observe some perf drops on V8...\n    array = new Array();\n\n    aPointer = 0;\n    bPointer = binarySearch.lowerBound(b, start);\n\n    aLimit = a.length;\n    bLimit = b.length;\n\n    while (aPointer < aLimit && bPointer < bLimit) {\n      aHead = a[aPointer];\n      bHead = b[bPointer];\n\n      if (aHead < bHead) {\n        aPointer = binarySearch.lowerBound(a, bHead, aPointer + 1);\n      }\n      else if (aHead > bHead) {\n        bPointer = binarySearch.lowerBound(b, aHead, bPointer + 1);\n      }\n      else {\n        array.push(aHead);\n        aPointer++;\n        bPointer++;\n      }\n    }\n\n    if (array.length === 0)\n      return array;\n\n    start = array[0];\n  }\n\n  return array;\n};\n\n/**\n * Variadic merging all of the given arrays.\n *\n * @param  {...array}\n * @return {array}\n */\nexports.merge = function() {\n  if (arguments.length === 2) {\n    if (isArrayLike(arguments[0]))\n      return mergeArrays(arguments[0], arguments[1]);\n  }\n  else {\n    if (isArrayLike(arguments[0]))\n      return kWayMergeArrays(arguments);\n  }\n\n  return null;\n};\n\n/**\n * Variadic function performing the union of all the given unique arrays.\n *\n * @param  {...array}\n * @return {array}\n */\nexports.unionUnique = function() {\n  if (arguments.length === 2) {\n    if (isArrayLike(arguments[0]))\n      return unionUniqueArrays(arguments[0], arguments[1]);\n  }\n  else {\n    if (isArrayLike(arguments[0]))\n      return kWayUnionUniqueArrays(arguments);\n  }\n\n  return null;\n};\n\n/**\n * Variadic function performing the intersection of all the given unique arrays.\n *\n * @param  {...array}\n * @return {array}\n */\nexports.intersectionUnique = function() {\n  if (arguments.length === 2) {\n    if (isArrayLike(arguments[0]))\n      return exports.intersectionUniqueArrays(arguments[0], arguments[1]);\n  }\n  else {\n    if (isArrayLike(arguments[0]))\n      return exports.kWayIntersectionUniqueArrays(arguments);\n  }\n\n  return null;\n};\n","/* eslint no-fallthrough: 0 */\n/**\n * Mnemonist MurmurHash 3\n * =======================\n *\n * Straightforward implementation of the third version of MurmurHash.\n *\n * Note: this piece of code belong to haschisch.\n */\n\n/**\n * Various helpers.\n */\nfunction mul32(a, b) {\n  return (a & 0xffff) * b + (((a >>> 16) * b & 0xffff) << 16) & 0xffffffff;\n}\n\nfunction sum32(a, b) {\n  return (a & 0xffff) + (b >>> 16) + (((a >>> 16) + b & 0xffff) << 16) & 0xffffffff;\n}\n\nfunction rotl32(a, b) {\n  return (a << b) | (a >>> (32 - b));\n}\n\n/**\n * MumurHash3 function.\n *\n * @param  {number}    seed - Seed.\n * @param  {ByteArray} data - Data.\n */\nmodule.exports = function murmurhash3(seed, data) {\n  var c1 = 0xcc9e2d51,\n      c2 = 0x1b873593,\n      r1 = 15,\n      r2 = 13,\n      m = 5,\n      n = 0x6b64e654;\n\n  var hash = seed,\n      k1,\n      i,\n      l;\n\n  for (i = 0, l = data.length - 4; i <= l; i += 4) {\n    k1 = (\n      data[i] |\n      (data[i + 1] << 8) |\n      (data[i + 2] << 16) |\n      (data[i + 3] << 24)\n    );\n\n    k1 = mul32(k1, c1);\n    k1 = rotl32(k1, r1);\n    k1 = mul32(k1, c2);\n\n    hash ^= k1;\n    hash = rotl32(hash, r2);\n    hash = mul32(hash, m);\n    hash = sum32(hash, n);\n  }\n\n  k1 = 0;\n\n  switch (data.length & 3) {\n    case 3:\n      k1 ^= data[i + 2] << 16;\n    case 2:\n      k1 ^= data[i + 1] << 8;\n    case 1:\n      k1 ^= data[i];\n      k1 = mul32(k1, c1);\n      k1 = rotl32(k1, r1);\n      k1 = mul32(k1, c2);\n      hash ^= k1;\n    default:\n  }\n\n  hash ^= data.length;\n  hash ^= hash >>> 16;\n  hash = mul32(hash, 0x85ebca6b);\n  hash ^= hash >>> 13;\n  hash = mul32(hash, 0xc2b2ae35);\n  hash ^= hash >>> 16;\n\n  return hash >>> 0;\n};\n","/**\n * Mnemonist Typed Array Helpers\n * ==============================\n *\n * Miscellaneous helpers related to typed arrays.\n */\n\n/**\n * When using an unsigned integer array to store pointers, one might want to\n * choose the optimal word size in regards to the actual numbers of pointers\n * to store.\n *\n * This helpers does just that.\n *\n * @param  {number} size - Expected size of the array to map.\n * @return {TypedArray}\n */\nvar MAX_8BIT_INTEGER = Math.pow(2, 8) - 1,\n    MAX_16BIT_INTEGER = Math.pow(2, 16) - 1,\n    MAX_32BIT_INTEGER = Math.pow(2, 32) - 1;\n\nvar MAX_SIGNED_8BIT_INTEGER = Math.pow(2, 7) - 1,\n    MAX_SIGNED_16BIT_INTEGER = Math.pow(2, 15) - 1,\n    MAX_SIGNED_32BIT_INTEGER = Math.pow(2, 31) - 1;\n\nexports.getPointerArray = function(size) {\n  var maxIndex = size - 1;\n\n  if (maxIndex <= MAX_8BIT_INTEGER)\n    return Uint8Array;\n\n  if (maxIndex <= MAX_16BIT_INTEGER)\n    return Uint16Array;\n\n  if (maxIndex <= MAX_32BIT_INTEGER)\n    return Uint32Array;\n\n  throw new Error('mnemonist: Pointer Array of size > 4294967295 is not supported.');\n};\n\nexports.getSignedPointerArray = function(size) {\n  var maxIndex = size - 1;\n\n  if (maxIndex <= MAX_SIGNED_8BIT_INTEGER)\n    return Int8Array;\n\n  if (maxIndex <= MAX_SIGNED_16BIT_INTEGER)\n    return Int16Array;\n\n  if (maxIndex <= MAX_SIGNED_32BIT_INTEGER)\n    return Int32Array;\n\n  return Float64Array;\n};\n\n/**\n * Function returning the minimal type able to represent the given number.\n *\n * @param  {number} value - Value to test.\n * @return {TypedArrayClass}\n */\nexports.getNumberType = function(value) {\n\n  // <= 32 bits itnteger?\n  if (value === (value | 0)) {\n\n    // Negative\n    if (Math.sign(value) === -1) {\n      if (value <= 127 && value >= -128)\n        return Int8Array;\n\n      if (value <= 32767 && value >= -32768)\n        return Int16Array;\n\n      return Int32Array;\n    }\n    else {\n\n      if (value <= 255)\n        return Uint8Array;\n\n      if (value <= 65535)\n        return Uint16Array;\n\n      return Uint32Array;\n    }\n  }\n\n  // 53 bits integer & floats\n  // NOTE: it's kinda hard to tell whether we could use 32bits or not...\n  return Float64Array;\n};\n\n/**\n * Function returning the minimal type able to represent the given array\n * of JavaScript numbers.\n *\n * @param  {array}    array  - Array to represent.\n * @param  {function} getter - Optional getter.\n * @return {TypedArrayClass}\n */\nvar TYPE_PRIORITY = {\n  Uint8Array: 1,\n  Int8Array: 2,\n  Uint16Array: 3,\n  Int16Array: 4,\n  Uint32Array: 5,\n  Int32Array: 6,\n  Float32Array: 7,\n  Float64Array: 8\n};\n\n// TODO: make this a one-shot for one value\nexports.getMinimalRepresentation = function(array, getter) {\n  var maxType = null,\n      maxPriority = 0,\n      p,\n      t,\n      v,\n      i,\n      l;\n\n  for (i = 0, l = array.length; i < l; i++) {\n    v = getter ? getter(array[i]) : array[i];\n    t = exports.getNumberType(v);\n    p = TYPE_PRIORITY[t.name];\n\n    if (p > maxPriority) {\n      maxPriority = p;\n      maxType = t;\n    }\n  }\n\n  return maxType;\n};\n\n/**\n * Function returning whether the given value is a typed array.\n *\n * @param  {any} value - Value to test.\n * @return {boolean}\n */\nexports.isTypedArray = function(value) {\n  return typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView(value);\n};\n\n/**\n * Function used to concat byte arrays.\n *\n * @param  {...ByteArray}\n * @return {ByteArray}\n */\nexports.concat = function() {\n  var length = 0,\n      i,\n      o,\n      l;\n\n  for (i = 0, l = arguments.length; i < l; i++)\n    length += arguments[i].length;\n\n  var array = new (arguments[0].constructor)(length);\n\n  for (i = 0, o = 0; i < l; i++) {\n    array.set(arguments[i], o);\n    o += arguments[i].length;\n  }\n\n  return array;\n};\n\n/**\n * Function used to initialize a byte array of indices.\n *\n * @param  {number}    length - Length of target.\n * @return {ByteArray}\n */\nexports.indices = function(length) {\n  var PointerArray = exports.getPointerArray(length);\n\n  var array = new PointerArray(length);\n\n  for (var i = 0; i < length; i++)\n    array[i] = i;\n\n  return array;\n};\n","/**\n * Mnemonist Vector\n * =================\n *\n * Abstract implementation of a growing array that can be used with JavaScript\n * typed arrays and other array-like structures.\n *\n * Note: should try and use ArrayBuffer.transfer when it will be available.\n */\nvar Iterator = require('obliterator/iterator'),\n    forEach = require('obliterator/foreach'),\n    iterables = require('./utils/iterables.js'),\n    typed = require('./utils/typed-arrays.js');\n\n/**\n * Defaults.\n */\nvar DEFAULT_GROWING_POLICY = function(currentCapacity) {\n  return Math.max(1, Math.ceil(currentCapacity * 1.5));\n};\n\nvar pointerArrayFactory = function(capacity) {\n  var PointerArray = typed.getPointerArray(capacity);\n\n  return new PointerArray(capacity);\n};\n\n/**\n * Vector.\n *\n * @constructor\n * @param {function}      ArrayClass             - An array constructor.\n * @param {number|object} initialCapacityOrOptions - Self-explanatory:\n * @param {number}        initialCapacity          - Initial capacity.\n * @param {number}        initialLength            - Initial length.\n * @param {function}      policy                   - Allocation policy.\n */\nfunction Vector(ArrayClass, initialCapacityOrOptions) {\n  if (arguments.length < 1)\n    throw new Error('mnemonist/vector: expecting at least a byte array constructor.');\n\n  var initialCapacity = initialCapacityOrOptions || 0,\n      policy = DEFAULT_GROWING_POLICY,\n      initialLength = 0,\n      factory = false;\n\n  if (typeof initialCapacityOrOptions === 'object') {\n    initialCapacity = initialCapacityOrOptions.initialCapacity || 0;\n    initialLength = initialCapacityOrOptions.initialLength || 0;\n    policy = initialCapacityOrOptions.policy || policy;\n    factory = initialCapacityOrOptions.factory === true;\n  }\n\n  this.factory = factory ? ArrayClass : null;\n  this.ArrayClass = ArrayClass;\n  this.length = initialLength;\n  this.capacity = Math.max(initialLength, initialCapacity);\n  this.policy = policy;\n  this.array = new ArrayClass(this.capacity);\n}\n\n/**\n * Method used to set a value.\n *\n * @param  {number} index - Index to edit.\n * @param  {any}    value - Value.\n * @return {Vector}\n */\nVector.prototype.set = function(index, value) {\n\n  // Out of bounds?\n  if (this.length < index)\n    throw new Error('Vector(' + this.ArrayClass.name + ').set: index out of bounds.');\n\n  // Updating value\n  this.array[index] = value;\n\n  return this;\n};\n\n/**\n * Method used to get a value.\n *\n * @param  {number} index - Index to retrieve.\n * @return {any}\n */\nVector.prototype.get = function(index) {\n  if (this.length < index)\n    return undefined;\n\n  return this.array[index];\n};\n\n/**\n * Method used to apply the growing policy.\n *\n * @param  {number} [override] - Override capacity.\n * @return {number}\n */\nVector.prototype.applyPolicy = function(override) {\n  var newCapacity = this.policy(override || this.capacity);\n\n  if (typeof newCapacity !== 'number' || newCapacity < 0)\n    throw new Error('mnemonist/vector.applyPolicy: policy returned an invalid value (expecting a positive integer).');\n\n  if (newCapacity <= this.capacity)\n    throw new Error('mnemonist/vector.applyPolicy: policy returned a less or equal capacity to allocate.');\n\n  // TODO: we should probably check that the returned number is an integer\n  return newCapacity;\n};\n\n/**\n * Method used to reallocate the underlying array.\n *\n * @param  {number}       capacity - Target capacity.\n * @return {Vector}\n */\nVector.prototype.reallocate = function(capacity) {\n  if (capacity === this.capacity)\n    return this;\n\n  var oldArray = this.array;\n\n  if (capacity < this.length)\n    this.length = capacity;\n\n  if (capacity > this.capacity) {\n    if (this.factory === null)\n      this.array = new this.ArrayClass(capacity);\n    else\n      this.array = this.factory(capacity);\n\n    if (typed.isTypedArray(this.array)) {\n      this.array.set(oldArray, 0);\n    }\n    else {\n      for (var i = 0, l = this.length; i < l; i++)\n        this.array[i] = oldArray[i];\n    }\n  }\n  else {\n    this.array = oldArray.slice(0, capacity);\n  }\n\n  this.capacity = capacity;\n\n  return this;\n};\n\n/**\n * Method used to grow the array.\n *\n * @param  {number}       [capacity] - Optional capacity to match.\n * @return {Vector}\n */\nVector.prototype.grow = function(capacity) {\n  var newCapacity;\n\n  if (typeof capacity === 'number') {\n\n    if (this.capacity >= capacity)\n      return this;\n\n    // We need to match the given capacity\n    newCapacity = this.capacity;\n\n    while (newCapacity < capacity)\n      newCapacity = this.applyPolicy(newCapacity);\n\n    this.reallocate(newCapacity);\n\n    return this;\n  }\n\n  // We need to run the policy once\n  newCapacity = this.applyPolicy();\n  this.reallocate(newCapacity);\n\n  return this;\n};\n\n/**\n * Method used to resize the array. Won't deallocate.\n *\n * @param  {number}       length - Target length.\n * @return {Vector}\n */\nVector.prototype.resize = function(length) {\n  if (length === this.length)\n    return this;\n\n  if (length < this.length) {\n    this.length = length;\n    return this;\n  }\n\n  this.length = length;\n  this.reallocate(length);\n\n  return this;\n};\n\n/**\n * Method used to push a value into the array.\n *\n * @param  {any}    value - Value to push.\n * @return {number}       - Length of the array.\n */\nVector.prototype.push = function(value) {\n  if (this.capacity === this.length)\n    this.grow();\n\n  this.array[this.length++] = value;\n\n  return this.length;\n};\n\n/**\n * Method used to pop the last value of the array.\n *\n * @return {number} - The popped value.\n */\nVector.prototype.pop = function() {\n  if (this.length === 0)\n    return;\n\n  return this.array[--this.length];\n};\n\n/**\n * Method used to create an iterator over a vector's values.\n *\n * @return {Iterator}\n */\nVector.prototype.values = function() {\n  var items = this.array,\n      l = this.length,\n      i = 0;\n\n  return new Iterator(function() {\n    if (i >= l)\n      return {\n        done: true\n      };\n\n    var value = items[i];\n    i++;\n\n    return {\n      value: value,\n      done: false\n    };\n  });\n};\n\n/**\n * Method used to create an iterator over a vector's entries.\n *\n * @return {Iterator}\n */\nVector.prototype.entries = function() {\n  var items = this.array,\n      l = this.length,\n      i = 0;\n\n  return new Iterator(function() {\n    if (i >= l)\n      return {\n        done: true\n      };\n\n    var value = items[i];\n\n    return {\n      value: [i++, value],\n      done: false\n    };\n  });\n};\n\n/**\n * Attaching the #.values method to Symbol.iterator if possible.\n */\nif (typeof Symbol !== 'undefined')\n  Vector.prototype[Symbol.iterator] = Vector.prototype.values;\n\n/**\n * Convenience known methods.\n */\nVector.prototype.inspect = function() {\n  var proxy = this.array.slice(0, this.length);\n\n  proxy.type = this.array.constructor.name;\n  proxy.items = this.length;\n  proxy.capacity = this.capacity;\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(proxy, 'constructor', {\n    value: Vector,\n    enumerable: false\n  });\n\n  return proxy;\n};\n\nif (typeof Symbol !== 'undefined')\n  Vector.prototype[Symbol.for('nodejs.util.inspect.custom')] = Vector.prototype.inspect;\n\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a vector.\n *\n * @param  {Iterable} iterable   - Target iterable.\n * @param  {function} ArrayClass - Byte array class.\n * @param  {number}   capacity   - Desired capacity.\n * @return {Vector}\n */\nVector.from = function(iterable, ArrayClass, capacity) {\n\n  if (arguments.length < 3) {\n\n    // Attempting to guess the needed capacity\n    capacity = iterables.guessLength(iterable);\n\n    if (typeof capacity !== 'number')\n      throw new Error('mnemonist/vector.from: could not guess iterable length. Please provide desired capacity as last argument.');\n  }\n\n  var vector = new Vector(ArrayClass, capacity);\n\n  forEach(iterable, function(value) {\n    vector.push(value);\n  });\n\n  return vector;\n};\n\n/**\n * Exporting.\n */\nfunction subClass(ArrayClass) {\n  var SubClass = function(initialCapacityOrOptions) {\n    Vector.call(this, ArrayClass, initialCapacityOrOptions);\n  };\n\n  for (var k in Vector.prototype) {\n    if (Vector.prototype.hasOwnProperty(k))\n      SubClass.prototype[k] = Vector.prototype[k];\n  }\n\n  SubClass.from = function(iterable, capacity) {\n    return Vector.from(iterable, ArrayClass, capacity);\n  };\n\n  if (typeof Symbol !== 'undefined')\n    SubClass.prototype[Symbol.iterator] = SubClass.prototype.values;\n\n  return SubClass;\n}\n\nVector.Int8Vector = subClass(Int8Array);\nVector.Uint8Vector = subClass(Uint8Array);\nVector.Uint8ClampedVector = subClass(Uint8ClampedArray);\nVector.Int16Vector = subClass(Int16Array);\nVector.Uint16Vector = subClass(Uint16Array);\nVector.Int32Vector = subClass(Int32Array);\nVector.Uint32Vector = subClass(Uint32Array);\nVector.Float32Vector = subClass(Float32Array);\nVector.Float64Vector = subClass(Float64Array);\nVector.PointerVector = subClass(pointerArrayFactory);\n\nmodule.exports = Vector;\n","/**\n * Mnemonist Vantage Point Tree\n * =============================\n *\n * JavaScript implementation of the Vantage Point Tree storing the binary\n * tree as a flat byte array.\n *\n * Note that a VPTree has worst cases and is likely not to be perfectly\n * balanced because of median ambiguity. It is therefore not suitable\n * for hairballs and tiny datasets.\n *\n * [Reference]:\n * https://en.wikipedia.org/wiki/Vantage-point_tree\n */\nvar iterables = require('./utils/iterables.js'),\n    typed = require('./utils/typed-arrays.js'),\n    inplaceQuickSortIndices = require('./sort/quick.js').inplaceQuickSortIndices,\n    lowerBoundIndices = require('./utils/binary-search.js').lowerBoundIndices,\n    Heap = require('./heap.js');\n\nvar getPointerArray = typed.getPointerArray;\n\n// TODO: implement vantage point selection techniques (by swapping with last)\n// TODO: is this required to implement early termination for k <= size?\n\n/**\n * Heap comparator used by the #.nearestNeighbors method.\n */\nfunction comparator(a, b) {\n  if (a.distance < b.distance)\n    return 1;\n\n  if (a.distance > b.distance)\n    return -1;\n\n  return 0;\n}\n\n/**\n * Function used to create the binary tree.\n *\n * @param  {function}     distance - Distance function to use.\n * @param  {array}        items    - Items to index (will be mutated).\n * @param  {array}        indices  - Indexes of the items.\n * @return {Float64Array}          - The flat binary tree.\n */\nfunction createBinaryTree(distance, items, indices) {\n  var N = indices.length;\n\n  var PointerArray = getPointerArray(N);\n\n  var C = 0,\n      nodes = new PointerArray(N),\n      lefts = new PointerArray(N),\n      rights = new PointerArray(N),\n      mus = new Float64Array(N),\n      stack = [0, 0, N],\n      distances = new Float64Array(N),\n      nodeIndex,\n      vantagePoint,\n      medianIndex,\n      lo,\n      hi,\n      mid,\n      mu,\n      i,\n      l;\n\n  while (stack.length) {\n    hi = stack.pop();\n    lo = stack.pop();\n    nodeIndex = stack.pop();\n\n    // Getting our vantage point\n    vantagePoint = indices[hi - 1];\n    hi--;\n\n    l = hi - lo;\n\n    // Storing vantage point\n    nodes[nodeIndex] = vantagePoint;\n\n    // We are in a leaf\n    if (l === 0)\n      continue;\n\n    // We only have two elements, the second one has to go right\n    if (l === 1) {\n\n      // We put remaining item to the right\n      mu = distance(items[vantagePoint], items[indices[lo]]);\n\n      mus[nodeIndex] = mu;\n\n      // Right\n      C++;\n      rights[nodeIndex] = C;\n      nodes[C] = indices[lo];\n\n      continue;\n    }\n\n    // Computing distance from vantage point to other points\n    for (i = lo; i < hi; i++)\n      distances[indices[i]] = distance(items[vantagePoint], items[indices[i]]);\n\n    inplaceQuickSortIndices(distances, indices, lo, hi);\n\n    // Finding median of distances\n    medianIndex = lo + (l / 2) - 1;\n\n    // Need to interpolate?\n    if (medianIndex === (medianIndex | 0)) {\n      mu = (\n        distances[indices[medianIndex]] +\n        distances[indices[medianIndex + 1]]\n      ) / 2;\n    }\n    else {\n      mu = distances[indices[Math.ceil(medianIndex)]];\n    }\n\n    // Storing mu\n    mus[nodeIndex] = mu;\n\n    mid = lowerBoundIndices(distances, indices, mu, lo, hi);\n\n    // console.log('Vantage point', items[vantagePoint], vantagePoint);\n    // console.log('mu =', mu);\n    // console.log('lo =', lo);\n    // console.log('hi =', hi);\n    // console.log('mid =', mid);\n\n    // console.log('need to split', Array.from(indices).slice(lo, hi).map(i => {\n    //   return [distances[i], distance(items[vantagePoint], items[i]), items[i]];\n    // }));\n\n    // Right\n    if (hi - mid > 0) {\n      C++;\n      rights[nodeIndex] = C;\n      stack.push(C, mid, hi);\n      // console.log('Went right with ', Array.from(indices).slice(mid, hi).map(i => {\n      //   return [distances[i], distance(items[vantagePoint], items[i]), items[i]];\n      // }));\n    }\n\n    // Left\n    if (mid - lo > 0) {\n      C++;\n      lefts[nodeIndex] = C;\n      stack.push(C, lo, mid);\n      // console.log('Went left with', Array.from(indices).slice(lo, mid).map(i => {\n      //   return [distances[i], distance(items[vantagePoint], items[i]), items[i]];\n      // }));\n    }\n\n    // console.log();\n  }\n\n  return {\n    nodes: nodes,\n    lefts: lefts,\n    rights: rights,\n    mus: mus\n  };\n}\n\n/**\n * VPTree.\n *\n * @constructor\n * @param {function} distance - Distance function to use.\n * @param {Iterable} items    - Items to store.\n */\nfunction VPTree(distance, items) {\n  if (typeof distance !== 'function')\n    throw new Error('mnemonist/VPTree.constructor: given `distance` must be a function.');\n\n  if (!items)\n    throw new Error('mnemonist/VPTree.constructor: you must provide items to the tree. A VPTree cannot be updated after its creation.');\n\n  // Properties\n  this.distance = distance;\n  this.heap = new Heap(comparator);\n  this.D = 0;\n\n  var arrays = iterables.toArrayWithIndices(items);\n  this.items = arrays[0];\n  var indices = arrays[1];\n\n  // Creating the binary tree\n  this.size = indices.length;\n\n  var result = createBinaryTree(distance, this.items, indices);\n\n  this.nodes = result.nodes;\n  this.lefts = result.lefts;\n  this.rights = result.rights;\n  this.mus = result.mus;\n}\n\n/**\n * Function used to retrieve the k nearest neighbors of the query.\n *\n * @param  {number} k     - Number of neighbors to retrieve.\n * @param  {any}    query - The query.\n * @return {array}\n */\nVPTree.prototype.nearestNeighbors = function(k, query) {\n  var neighbors = this.heap,\n      stack = [0],\n      tau = Infinity,\n      nodeIndex,\n      itemIndex,\n      vantagePoint,\n      leftIndex,\n      rightIndex,\n      mu,\n      d;\n\n  this.D = 0;\n\n  while (stack.length) {\n    nodeIndex = stack.pop();\n    itemIndex = this.nodes[nodeIndex];\n    vantagePoint = this.items[itemIndex];\n\n    // Distance between query & the current vantage point\n    d = this.distance(vantagePoint, query);\n    this.D++;\n\n    if (d < tau) {\n      neighbors.push({distance: d, item: vantagePoint});\n\n      // Trimming\n      if (neighbors.size > k)\n        neighbors.pop();\n\n      // Adjusting tau (only if we already have k items, else it stays Infinity)\n      if (neighbors.size >= k)\n       tau = neighbors.peek().distance;\n    }\n\n    leftIndex = this.lefts[nodeIndex];\n    rightIndex = this.rights[nodeIndex];\n\n    // We are a leaf\n    if (!leftIndex && !rightIndex)\n      continue;\n\n    mu = this.mus[nodeIndex];\n\n    if (d < mu) {\n      if (leftIndex && d < mu + tau)\n        stack.push(leftIndex);\n      if (rightIndex && d >= mu - tau) // Might not be necessary to test d\n        stack.push(rightIndex);\n    }\n    else {\n      if (rightIndex && d >= mu - tau)\n        stack.push(rightIndex);\n      if (leftIndex && d < mu + tau) // Might not be necessary to test d\n        stack.push(leftIndex);\n    }\n  }\n\n  var array = new Array(neighbors.size);\n\n  for (var i = neighbors.size - 1; i >= 0; i--)\n    array[i] = neighbors.pop();\n\n  return array;\n};\n\n/**\n * Function used to retrieve every neighbors of query in the given radius.\n *\n * @param  {number} radius - Radius.\n * @param  {any}    query  - The query.\n * @return {array}\n */\nVPTree.prototype.neighbors = function(radius, query) {\n  var neighbors = [],\n      stack = [0],\n      nodeIndex,\n      itemIndex,\n      vantagePoint,\n      leftIndex,\n      rightIndex,\n      mu,\n      d;\n\n  this.D = 0;\n\n  while (stack.length) {\n    nodeIndex = stack.pop();\n    itemIndex = this.nodes[nodeIndex];\n    vantagePoint = this.items[itemIndex];\n\n    // Distance between query & the current vantage point\n    d = this.distance(vantagePoint, query);\n    this.D++;\n\n    if (d <= radius)\n      neighbors.push({distance: d, item: vantagePoint});\n\n    leftIndex = this.lefts[nodeIndex];\n    rightIndex = this.rights[nodeIndex];\n\n    // We are a leaf\n    if (!leftIndex && !rightIndex)\n      continue;\n\n    mu = this.mus[nodeIndex];\n\n    if (d < mu) {\n      if (leftIndex && d < mu + radius)\n        stack.push(leftIndex);\n      if (rightIndex && d >= mu - radius) // Might not be necessary to test d\n        stack.push(rightIndex);\n    }\n    else {\n      if (rightIndex && d >= mu - radius)\n        stack.push(rightIndex);\n      if (leftIndex && d < mu + radius) // Might not be necessary to test d\n        stack.push(leftIndex);\n    }\n  }\n\n  return neighbors;\n};\n\n/**\n * Convenience known methods.\n */\nVPTree.prototype.inspect = function() {\n  var array = this.items.slice();\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(array, 'constructor', {\n    value: VPTree,\n    enumerable: false\n  });\n\n  return array;\n};\n\nif (typeof Symbol !== 'undefined')\n  VPTree.prototype[Symbol.for('nodejs.util.inspect.custom')] = VPTree.prototype.inspect;\n\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a tree.\n *\n * @param  {Iterable} iterable - Target iterable.\n * @param  {function} distance - Distance function to use.\n * @return {VPTree}\n */\nVPTree.from = function(iterable, distance) {\n  return new VPTree(distance, iterable);\n};\n\n/**\n * Exporting.\n */\nmodule.exports = VPTree;\n","/**\n * Obliterator ForEach Function\n * =============================\n *\n * Helper function used to easily iterate over mixed values.\n */\nvar support = require('./support.js');\n\nvar ARRAY_BUFFER_SUPPORT = support.ARRAY_BUFFER_SUPPORT;\nvar SYMBOL_SUPPORT = support.SYMBOL_SUPPORT;\n\n/**\n * Function able to iterate over almost any iterable JS value.\n *\n * @param  {any}      iterable - Iterable value.\n * @param  {function} callback - Callback function.\n */\nmodule.exports = function forEach(iterable, callback) {\n  var iterator, k, i, l, s;\n\n  if (!iterable) throw new Error('obliterator/forEach: invalid iterable.');\n\n  if (typeof callback !== 'function')\n    throw new Error('obliterator/forEach: expecting a callback.');\n\n  // The target is an array or a string or function arguments\n  if (\n    Array.isArray(iterable) ||\n    (ARRAY_BUFFER_SUPPORT && ArrayBuffer.isView(iterable)) ||\n    typeof iterable === 'string' ||\n    iterable.toString() === '[object Arguments]'\n  ) {\n    for (i = 0, l = iterable.length; i < l; i++) callback(iterable[i], i);\n    return;\n  }\n\n  // The target has a #.forEach method\n  if (typeof iterable.forEach === 'function') {\n    iterable.forEach(callback);\n    return;\n  }\n\n  // The target is iterable\n  if (\n    SYMBOL_SUPPORT &&\n    Symbol.iterator in iterable &&\n    typeof iterable.next !== 'function'\n  ) {\n    iterable = iterable[Symbol.iterator]();\n  }\n\n  // The target is an iterator\n  if (typeof iterable.next === 'function') {\n    iterator = iterable;\n    i = 0;\n\n    while (((s = iterator.next()), s.done !== true)) {\n      callback(s.value, i);\n      i++;\n    }\n\n    return;\n  }\n\n  // The target is a plain object\n  for (k in iterable) {\n    if (iterable.hasOwnProperty(k)) {\n      callback(iterable[k], k);\n    }\n  }\n\n  return;\n};\n","/**\n * Obliterator Iterator Class\n * ===========================\n *\n * Simple class representing the library's iterators.\n */\n\n/**\n * Iterator class.\n *\n * @constructor\n * @param {function} next - Next function.\n */\nfunction Iterator(next) {\n  if (typeof next !== 'function')\n    throw new Error('obliterator/iterator: expecting a function!');\n\n  this.next = next;\n}\n\n/**\n * If symbols are supported, we add `next` to `Symbol.iterator`.\n */\nif (typeof Symbol !== 'undefined')\n  Iterator.prototype[Symbol.iterator] = function () {\n    return this;\n  };\n\n/**\n * Returning an iterator of the given values.\n *\n * @param  {any...} values - Values.\n * @return {Iterator}\n */\nIterator.of = function () {\n  var args = arguments,\n    l = args.length,\n    i = 0;\n\n  return new Iterator(function () {\n    if (i >= l) return {done: true};\n\n    return {done: false, value: args[i++]};\n  });\n};\n\n/**\n * Returning an empty iterator.\n *\n * @return {Iterator}\n */\nIterator.empty = function () {\n  var iterator = new Iterator(function () {\n    return {done: true};\n  });\n\n  return iterator;\n};\n\n/**\n * Returning an iterator over the given indexed sequence.\n *\n * @param  {string|Array} sequence - Target sequence.\n * @return {Iterator}\n */\nIterator.fromSequence = function (sequence) {\n  var i = 0,\n    l = sequence.length;\n\n  return new Iterator(function () {\n    if (i >= l) return {done: true};\n\n    return {done: false, value: sequence[i++]};\n  });\n};\n\n/**\n * Returning whether the given value is an iterator.\n *\n * @param  {any} value - Value.\n * @return {boolean}\n */\nIterator.is = function (value) {\n  if (value instanceof Iterator) return true;\n\n  return (\n    typeof value === 'object' &&\n    value !== null &&\n    typeof value.next === 'function'\n  );\n};\n\n/**\n * Exporting.\n */\nmodule.exports = Iterator;\n","exports.ARRAY_BUFFER_SUPPORT = typeof ArrayBuffer !== 'undefined';\nexports.SYMBOL_SUPPORT = typeof Symbol !== 'undefined';\n"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","this","constructor","create","iteratorType","ContainerIterator","iter","_node","_super","apply","arguments","Base","get","_length","enumerable","configurable","checkObject","key","t","throwIteratorAccessError","RangeError","node","header","_this","_header","pre","_pre","next","_next","Symbol","_originMap","_head","_tail","HashContainer","value","isObject","newTail","undefined","index","HASH_TAG","_objMap","_value","defineProperty","length","_key","push","forEach","el","_eraseNode","pos","Container","__generator","thisArg","body","f","y","g","_","label","sent","trys","ops","verb","throw","return","iterator","n","v","step","op","done","pop","e","HashSetIterator","HashContainerIterator","container","self","insert","HashSet","_set","_findElementNode","callback","_a","bind","require","InverseMap","original","size","items","Map","inverse","BiMap","clear","set","has","currentValue","delete","currentKey","del","name","entries","inspect","dummy","left","right","for","from","iterable","bimap","module","exports","Iterator","bitwise","BitSet","array","Uint32Array","Math","ceil","newBytes","byteIndex","oldBytes","reset","flip","test","Boolean","rank","i","r","j","table8Popcount","maskedByte","select","byte","c","l","scope","bit","values","inner","proxy","Uint8Array","toJSON","DEFAULT_GROWING_POLICY","capacity","max","BitVector","initialLengthOrOptions","initialLength","policy","initialCapacity","Error","applyPolicy","override","newCapacity","reallocate","virtualCapacity","oldArray","storageLength","slice","grow","resize","BKTree","distance","add","item","root","children","search","query","child","found","stack","tree","murmurhash3","LN2_SQUARED","LN2","DEFAULTS","stringToByteArray","string","Uint16Array","charCodeAt","hashArray","seed","BloomFilter","capacityOrOptions","options","errorRate","log","hashFunctions","data","position","filter","iterables","FixedDeque","CircularBuffer","ArrayClass","paste","keys","getOwnPropertySymbols","start","unshift","guessLength","buffer","isArrayLike","DefaultMap","factory","peek","deleted","autoIncrement","DefaultWeakMap","WeakMap","comparators","DEFAULT_COMPARATOR","reverseComparator","FibonacciHeap","comparator","mergeWithRoot","heap","consumeLinkedList","head","nodes","flag","removeFromRoot","link","x","parent","degree","MaxFibonacciHeap","min","createNode","z","A","consolidate","top","MinFibonacciHeap","shift","peekFirst","peekLast","toArray","offset","type","deque","Heap","siftUp","compare","rightIndex","endIndex","startIndex","childIndex","siftDown","consume","lastItem","FixedReverseHeap","replace","FixedStack","toString","join","identity","FuzzyMap","descriptor","isArray","writeHashFunction","readHashFunction","useSet","map","MultiMap","FuzzyMultiMap","dimension","DEFAULT_BLOCK_SIZE","powerOfTwo","HashedArrayTree","initialCapacityOrOptions","blockSize","initialBlocks","offsetMask","blockMask","log2","blocks","block","parentIndex","popped","pushpop","tmp","heapify","MaxHeap","nsmallest","result","reverseCompare","Infinity","sort","nlargest","MinHeap","SuffixArray","StaticDisjointSet","StaticIntervalTree","InvertedIndex","KDTree","LinkedList","LRUCache","LRUCacheWithDelete","LRUMap","LRUMapWithDelete","MultiSet","PassjoinIndex","Queue","Stack","GeneralizedSuffixArray","Set","SparseQueueSet","SparseMap","SparseSet","SymSpell","Trie","TrieMap","Vector","VPTree","helpers","documentTokenizer","queryTokenizer","mapping","doc","tokens","token","results","intersectionUniqueArrays","docs","documents","typed","createTupleComparator","inplaceQuickSortIndices","squaredDistanceAxes","dimensions","axes","pivot","dist","buildTree","ids","labels","direction","median","lo","hi","PointerArray","getPointerArray","pivots","lefts","rights","build","visited","nearestNeighbor","bestDistance","best","recurse","dx","KNN_HEAP_COMPARATOR_3","KNN_HEAP_COMPARATOR_2","kNearestNeighbors","k","point","split","linearKNearestNeighbors","reshaped","axis","row","Float64Array","reshapeIntoAxes","fromAxes","indices","tail","first","last","list","Keys","Values","deletedSize","pointer","splayOnTop","V","backward","K","forward","setpop","oldValue","oldKey","evicted","previous","remove","missing","dead","cache","isFinite","floor","oldHead","sizeBefore","wasDeleted","indexOf","splice","multiplicity","count","forEachAssociation","countainer","inContainer","containers","associations","MULTISET_ITEM_COMPARATOR","a","currentCount","newCount","edit","am","bm","frequency","forEachMultiplicity","multiplicities","isSubset","B","mA","isSuperset","countSubstringsL","s","pow","abs","partition","m","largeSegments","smallSegments","tuples","segments","o","S","multiMatchAwareInterval","delta","pi","li","start1","end1","start2","end2","end3","multiMatchAwareSubstrings","substring","interval","currentSubstring","substrings","levenshtein","strings","invertedIndices","stringIndex","matches","Ll","candidates","candidate","P","n1","n2","n3","M","countKeys","segmentPos","enqueue","dequeue","queue","of","intersection","I","smallestSize","smallestSet","union","U","difference","D","symmetricDifference","subtract","intersect","disjunct","toRemove","intersectionSize","unionSize","jaccard","overlap","LOS","HIS","swap","ByteArray","dense","sparse","vals","member","ParentsTypedArray","RanksTypedArray","parents","ranks","find","xRoot","yRoot","xRank","yRank","connected","compile","buildBST","intervals","endGetter","sortedIndices","augmentations","low","high","mid","midMinusOne","midPlusOne","current","end","leftEnd","rightEnd","augmentation","augmentationPointer","getters","startGetter","IndicesArray","height","intervalsContainingPoint","bstIndex","intervalIndex","maxInterval","intervalsOverlappingInterval","intervalStart","intervalEnd","currentInterval","bits","buckets","lookup","al","bl","convert","target","paddingOffset","uniqueTokens","alphabet","sortedUniqueTokens","hasArbitrarySequence","text","firstLength","longestCommonSubsequence","lcp","lcs","VERBOSITY","VERBOSITY_EXPLANATIONS","createDictionaryItem","suggestions","createSuggestionItem","term","edits","word","deletes","deletedItem","damerauLevenshtein","source","H","INF","sd","letter","st","DB","i1","j1","maxDistance","verbosity","dictionary","maxLength","words","number","suggestion","int","addLowestDistance","input","candidateSet","suggestionSet","suggestItem","ii","jj","substr","behavior","SENTINEL","fromCharCode","Token","mode","prefix","update","updateFunction","toPrune","tokenToPrune","isString","nodeStack","prefixStack","concat","empty","currentNode","hasValue","prefixes","currentPrefix","trie","methodName","searchWithComparator","comparison","lowerBound","lowerBoundWithComparator","lowerBoundIndices","upperBound","upperBoundWithComparator","msb32","msb8","criticalBit8","criticalBit8Mask","testCriticalBit8","mask","criticalBit32Mask","popcount","TABLE8","DEFAULT_REVERSE_COMPARATOR","isTypedArray","toArrayWithIndices","IndexArray","binarySearch","mergeArrays","aEnd","bStart","aHead","bHead","aPointer","aLength","bPointer","bLength","unionUniqueArrays","kWayMergeArrays","arrays","filtered","pointers","kWayUnionUniqueArrays","kWayIntersectionUniqueArrays","maxStart","minEnd","aLimit","bLimit","merge","unionUnique","intersectionUnique","mul32","rotl32","k1","c1","c2","hash","MAX_8BIT_INTEGER","MAX_16BIT_INTEGER","MAX_32BIT_INTEGER","MAX_SIGNED_8BIT_INTEGER","MAX_SIGNED_16BIT_INTEGER","MAX_SIGNED_32BIT_INTEGER","maxIndex","getSignedPointerArray","Int8Array","Int16Array","Int32Array","getNumberType","sign","TYPE_PRIORITY","Float32Array","getMinimalRepresentation","getter","maxType","maxPriority","ArrayBuffer","isView","currentCapacity","subClass","SubClass","vector","Int8Vector","Uint8Vector","Uint8ClampedVector","Uint8ClampedArray","Int16Vector","Uint16Vector","Int32Vector","Uint32Vector","Float32Vector","Float64Vector","PointerVector","nodeIndex","vantagePoint","medianIndex","mu","N","C","mus","distances","createBinaryTree","nearestNeighbors","itemIndex","leftIndex","neighbors","tau","radius","support","ARRAY_BUFFER_SUPPORT","SYMBOL_SUPPORT","args","fromSequence","sequence","is"],"sourceRoot":""}